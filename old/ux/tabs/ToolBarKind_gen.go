package tabs

//Code generated by ToolbarHelper - DO NOT EDIT.
import (
	_ "embed"
	"github.com/ddkwork/GolandProjects/ui/widget"

	"github.com/richardwilkes/unison"
	"strings"
)

type ToolbarKind byte

const (
	InvalidToolbarKind ToolbarKind = iota
	CpuKind
	SymbolsKind
	BreakpointKind
	HandlesKind
	LogKind
	MemoryKind
	NotesKind
	ScriptKind
	SehKind
	SourceKind
	StackKind
	ThreadKind
	TraceKind
	TraceintoKind
	VtKind
	Vt1Kind
)

func (t ToolbarKind) String() string {
	switch t {
	case CpuKind:
		return "cpu"
	case SymbolsKind:
		return "symbols"
	case BreakpointKind:
		return "breakpoint"
	case HandlesKind:
		return "handles"
	case LogKind:
		return "log"
	case MemoryKind:
		return "memory"
	case NotesKind:
		return "notes"
	case ScriptKind:
		return "script"
	case SehKind:
		return "seh"
	case SourceKind:
		return "source"
	case StackKind:
		return "stack"
	case ThreadKind:
		return "thread"
	case TraceKind:
		return "trace"
	case TraceintoKind:
		return "traceinto"
	case VtKind:
		return "vt"
	case Vt1Kind:
		return "vt1"
	}
	return "invalid ToolbarKind"
}
func (t ToolbarKind) FileName() string {
	switch t {
	case CpuKind:
		return "Cpu.ico"
	case SymbolsKind:
		return "Symbols.ico"
	case BreakpointKind:
		return "breakpoint.ico"
	case HandlesKind:
		return "handles.ico"
	case LogKind:
		return "log.ico"
	case MemoryKind:
		return "memory.ico"
	case NotesKind:
		return "notes.ico"
	case ScriptKind:
		return "script.ico"
	case SehKind:
		return "seh.ico"
	case SourceKind:
		return "source.ico"
	case StackKind:
		return "stack.ico"
	case ThreadKind:
		return "thread.ico"
	case TraceKind:
		return "trace.ico"
	case TraceintoKind:
		return "traceinto.ico"
	case VtKind:
		return "vt.ico"
	case Vt1Kind:
		return "vt1.ico"
	}
	return "invalid ToolbarKind"
}
func AssertKind(name string) ToolbarKind {
	for _, kind := range Kinds() {
		if strings.Contains(strings.ToLower(name), kind.String()) {
			return kind
		}
	}
	return InvalidToolbarKind
}
func Kinds() []ToolbarKind {
	return []ToolbarKind{
		CpuKind,
		SymbolsKind,
		BreakpointKind,
		HandlesKind,
		LogKind,
		MemoryKind,
		NotesKind,
		ScriptKind,
		SehKind,
		SourceKind,
		StackKind,
		ThreadKind,
		TraceKind,
		TraceintoKind,
		VtKind,
		Vt1Kind,
	}
}
func (t ToolbarKind) Image() *unison.Image {
	switch t {
	case CpuKind:
		return widget.MustImage(cpuBuf)
	case SymbolsKind:
		return widget.MustImage(symbolsBuf)
	case BreakpointKind:
		return widget.MustImage(breakpointBuf)
	case HandlesKind:
		return widget.MustImage(handlesBuf)
	case LogKind:
		return widget.MustImage(logBuf)
	case MemoryKind:
		return widget.MustImage(memoryBuf)
	case NotesKind:
		return widget.MustImage(notesBuf)
	case ScriptKind:
		return widget.MustImage(scriptBuf)
	case SehKind:
		return widget.MustImage(sehBuf)
	case SourceKind:
		return widget.MustImage(sourceBuf)
	case StackKind:
		return widget.MustImage(stackBuf)
	case ThreadKind:
		return widget.MustImage(threadBuf)
	case TraceKind:
		return widget.MustImage(traceBuf)
	case TraceintoKind:
		return widget.MustImage(traceintoBuf)
	case VtKind:
		return widget.MustImage(vtBuf)
	case Vt1Kind:
		return widget.MustImage(vt1Buf)

	}
	return nil
}

func (t ToolbarKind) Button() *unison.Button {
	switch t {
	case CpuKind:
		return widget.CreateToolBarButton(CpuKind.Buffer(), CpuKind.String())
	case SymbolsKind:
		return widget.CreateToolBarButton(SymbolsKind.Buffer(), SymbolsKind.String())
	case BreakpointKind:
		return widget.CreateToolBarButton(BreakpointKind.Buffer(), BreakpointKind.String())
	case HandlesKind:
		return widget.CreateToolBarButton(HandlesKind.Buffer(), HandlesKind.String())
	case LogKind:
		return widget.CreateToolBarButton(LogKind.Buffer(), LogKind.String())
	case MemoryKind:
		return widget.CreateToolBarButton(MemoryKind.Buffer(), MemoryKind.String())
	case NotesKind:
		return widget.CreateToolBarButton(NotesKind.Buffer(), NotesKind.String())
	case ScriptKind:
		return widget.CreateToolBarButton(ScriptKind.Buffer(), ScriptKind.String())
	case SehKind:
		return widget.CreateToolBarButton(SehKind.Buffer(), SehKind.String())
	case SourceKind:
		return widget.CreateToolBarButton(SourceKind.Buffer(), SourceKind.String())
	case StackKind:
		return widget.CreateToolBarButton(StackKind.Buffer(), StackKind.String())
	case ThreadKind:
		return widget.CreateToolBarButton(ThreadKind.Buffer(), ThreadKind.String())
	case TraceKind:
		return widget.CreateToolBarButton(TraceKind.Buffer(), TraceKind.String())
	case TraceintoKind:
		return widget.CreateToolBarButton(TraceintoKind.Buffer(), TraceintoKind.String())
	case VtKind:
		return widget.CreateToolBarButton(VtKind.Buffer(), VtKind.String())
	case Vt1Kind:
		return widget.CreateToolBarButton(Vt1Kind.Buffer(), Vt1Kind.String())
	}
	return unison.NewButton()
}
func (t ToolbarKind) Buffer() []byte {
	switch t {
	case CpuKind:
		return cpuBuf
	case SymbolsKind:
		return symbolsBuf
	case BreakpointKind:
		return breakpointBuf
	case HandlesKind:
		return handlesBuf
	case LogKind:
		return logBuf
	case MemoryKind:
		return memoryBuf
	case NotesKind:
		return notesBuf
	case ScriptKind:
		return scriptBuf
	case SehKind:
		return sehBuf
	case SourceKind:
		return sourceBuf
	case StackKind:
		return stackBuf
	case ThreadKind:
		return threadBuf
	case TraceKind:
		return traceBuf
	case TraceintoKind:
		return traceintoBuf
	case VtKind:
		return vtBuf
	case Vt1Kind:
		return vt1Buf
	}
	return nil
}

var (
	//go:embed pageIco/Cpu.ico
	cpuBuf []byte

	//go:embed pageIco/Symbols.ico
	symbolsBuf []byte

	//go:embed pageIco/breakpoint.ico
	breakpointBuf []byte

	//go:embed pageIco/handles.ico
	handlesBuf []byte

	//go:embed pageIco/log.ico
	logBuf []byte

	//go:embed pageIco/memory.ico
	memoryBuf []byte

	//go:embed pageIco/notes.ico
	notesBuf []byte

	//go:embed pageIco/script.ico
	scriptBuf []byte

	//go:embed pageIco/seh.ico
	sehBuf []byte

	//go:embed pageIco/source.ico
	sourceBuf []byte

	//go:embed pageIco/stack.ico
	stackBuf []byte

	//go:embed pageIco/thread.ico
	threadBuf []byte

	//go:embed pageIco/trace.ico
	traceBuf []byte

	//go:embed pageIco/traceinto.ico
	traceintoBuf []byte

	//go:embed pageIco/vt.ico
	vtBuf []byte

	//go:embed pageIco/vt1.ico
	vt1Buf []byte
)
