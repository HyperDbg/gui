// Code generated by gengo. DO NOT EDIT.
package HPRDBGCTRL

import (
	"unsafe"
	"github.com/can1357/gengo/gengort"
)

const GengoLibraryName = "HPRDBGCTRL"

var GengoLibrary = gengort.NewLibrary(GengoLibraryName)

type _Int128T = any
type _Uint128T = any
type __NSConstantString = any
type SizeT = uint64
type _BuiltinMsVaList = *byte
type _BuiltinVaList = *byte

var __imp_LogInitialize gengort.PreloadProc

//  Gengo init function.
func init() {
	__imp_LogInitialize = GengoLibrary.ImportNow("LogInitialize")
	__imp_LogUnInitialize = GengoLibrary.ImportNow("LogUnInitialize")
	__imp_LogMarkAllAsRead = GengoLibrary.ImportNow("LogMarkAllAsRead")
	__imp_LogCallbackPrepareAndSendMessageToQueue = GengoLibrary.ImportNow("LogCallbackPrepareAndSendMessageToQueue")
	__imp_LogCallbackPrepareAndSendMessageToQueueWrapper = GengoLibrary.ImportNow("LogCallbackPrepareAndSendMessageToQueueWrapper")
	__imp_LogCallbackSendBuffer = GengoLibrary.ImportNow("LogCallbackSendBuffer")
	__imp_LogCallbackCheckIfBufferIsFull = GengoLibrary.ImportNow("LogCallbackCheckIfBufferIsFull")
	__imp_LogCallbackSendMessageToQueue = GengoLibrary.ImportNow("LogCallbackSendMessageToQueue")
	__imp_LogRegisterEventBasedNotification = GengoLibrary.ImportNow("LogRegisterEventBasedNotification")
	__imp_LogRegisterIrpBasedNotification = GengoLibrary.ImportNow("LogRegisterIrpBasedNotification")
}

// ///////////////////////////////////////////////
func LogInitialize(MsgTracingCallbacks *int32) int32 {
	__res := gengort.CCall1(__imp_LogInitialize.Addr(), gengort.MarshallSyscall(MsgTracingCallbacks))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogUnInitialize gengort.PreloadProc

func LogUnInitialize() int32 {
	__res := gengort.CCall0(__imp_LogUnInitialize.Addr())
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogMarkAllAsRead gengort.PreloadProc

func LogMarkAllAsRead(IsVmxRoot int32) int32 {
	__res := gengort.CCall1(__imp_LogMarkAllAsRead.Addr(), gengort.MarshallSyscall(IsVmxRoot))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogCallbackPrepareAndSendMessageToQueue gengort.PreloadProc

func LogCallbackPrepareAndSendMessageToQueue(OperationCode int32, IsImmediateMessage int32, ShowCurrentSystemTime int32, Priority int32, Fmt *byte) int32 {
	__res := gengort.CCall5(__imp_LogCallbackPrepareAndSendMessageToQueue.Addr(), gengort.MarshallSyscall(OperationCode), gengort.MarshallSyscall(IsImmediateMessage), gengort.MarshallSyscall(ShowCurrentSystemTime), gengort.MarshallSyscall(Priority), gengort.MarshallSyscall(Fmt))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogCallbackPrepareAndSendMessageToQueueWrapper gengort.PreloadProc

func LogCallbackPrepareAndSendMessageToQueueWrapper(OperationCode int32, IsImmediateMessage int32, ShowCurrentSystemTime int32, Priority int32, Fmt *byte, ArgList int32) int32 {
	__res := gengort.CCall6(__imp_LogCallbackPrepareAndSendMessageToQueueWrapper.Addr(), gengort.MarshallSyscall(OperationCode), gengort.MarshallSyscall(IsImmediateMessage), gengort.MarshallSyscall(ShowCurrentSystemTime), gengort.MarshallSyscall(Priority), gengort.MarshallSyscall(Fmt), gengort.MarshallSyscall(ArgList))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogCallbackSendBuffer gengort.PreloadProc

func LogCallbackSendBuffer(UINT32 int32) int32 {
	__res := gengort.CCall1(__imp_LogCallbackSendBuffer.Addr(), gengort.MarshallSyscall(UINT32))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogCallbackCheckIfBufferIsFull gengort.PreloadProc

func LogCallbackCheckIfBufferIsFull(Priority int32) int32 {
	__res := gengort.CCall1(__imp_LogCallbackCheckIfBufferIsFull.Addr(), gengort.MarshallSyscall(Priority))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogCallbackSendMessageToQueue gengort.PreloadProc

func LogCallbackSendMessageToQueue(OperationCode int32, IsImmediateMessage int32, LogMessage *int32, BufferLen int32, Priority int32) int32 {
	__res := gengort.CCall5(__imp_LogCallbackSendMessageToQueue.Addr(), gengort.MarshallSyscall(OperationCode), gengort.MarshallSyscall(IsImmediateMessage), gengort.MarshallSyscall(LogMessage), gengort.MarshallSyscall(BufferLen), gengort.MarshallSyscall(Priority))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogRegisterEventBasedNotification gengort.PreloadProc

func LogRegisterEventBasedNotification(DeviceObject int32, Irp int32) int32 {
	__res := gengort.CCall2(__imp_LogRegisterEventBasedNotification.Addr(), gengort.MarshallSyscall(DeviceObject), gengort.MarshallSyscall(Irp))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_LogRegisterIrpBasedNotification gengort.PreloadProc

func LogRegisterIrpBasedNotification(DeviceObject int32, Irp int32) int32 {
	__res := gengort.CCall2(__imp_LogRegisterIrpBasedNotification.Addr(), gengort.MarshallSyscall(DeviceObject), gengort.MarshallSyscall(Irp))
	return gengort.UnmarshallSyscall[int32](__res)
}
