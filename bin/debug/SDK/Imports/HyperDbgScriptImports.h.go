// Code generated by gengo. DO NOT EDIT.
package HPRDBGCTRL

import (
	"unsafe"
	"github.com/can1357/gengo/gengort"
)

const GengoLibraryName = "HPRDBGCTRL"

var GengoLibrary = gengort.NewLibrary(GengoLibraryName)

type _Int128T = any
type _Uint128T = any
type __NSConstantString = any
type SizeT = uint64
type _BuiltinMsVaList = *byte
type _BuiltinVaList = *byte

var __imp_ScriptEngineParse gengort.PreloadProc

//  Gengo init function.
func init() {
	__imp_ScriptEngineParse = GengoLibrary.ImportNow("ScriptEngineParse")
	__imp_GetStackBuffer = GengoLibrary.ImportNow("GetStackBuffer")
	__imp_PrintSymbolBuffer = GengoLibrary.ImportNow("PrintSymbolBuffer")
	__imp_PrintSymbol = GengoLibrary.ImportNow("PrintSymbol")
	__imp_RemoveSymbolBuffer = GengoLibrary.ImportNow("RemoveSymbolBuffer")
	__imp_ScriptEngineSetTextMessageCallback = GengoLibrary.ImportNow("ScriptEngineSetTextMessageCallback")
	__imp_ScriptEngineSymbolAbortLoading = GengoLibrary.ImportNow("ScriptEngineSymbolAbortLoading")
	__imp_ScriptEngineConvertNameToAddress = GengoLibrary.ImportNow("ScriptEngineConvertNameToAddress")
	__imp_ScriptEngineLoadFileSymbol = GengoLibrary.ImportNow("ScriptEngineLoadFileSymbol")
	__imp_ScriptEngineUnloadAllSymbols = GengoLibrary.ImportNow("ScriptEngineUnloadAllSymbols")
	__imp_ScriptEngineUnloadModuleSymbol = GengoLibrary.ImportNow("ScriptEngineUnloadModuleSymbol")
	__imp_ScriptEngineSearchSymbolForMask = GengoLibrary.ImportNow("ScriptEngineSearchSymbolForMask")
	__imp_ScriptEngineGetFieldOffset = GengoLibrary.ImportNow("ScriptEngineGetFieldOffset")
	__imp_ScriptEngineGetDataTypeSize = GengoLibrary.ImportNow("ScriptEngineGetDataTypeSize")
	__imp_ScriptEngineCreateSymbolTableForDisassembler = GengoLibrary.ImportNow("ScriptEngineCreateSymbolTableForDisassembler")
	__imp_ScriptEngineConvertFileToPdbPath = GengoLibrary.ImportNow("ScriptEngineConvertFileToPdbPath")
	__imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails = GengoLibrary.ImportNow("ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails")
	__imp_ScriptEngineSymbolInitLoad = GengoLibrary.ImportNow("ScriptEngineSymbolInitLoad")
	__imp_ScriptEngineShowDataBasedOnSymbolTypes = GengoLibrary.ImportNow("ScriptEngineShowDataBasedOnSymbolTypes")
}
func ScriptEngineParse(str *byte) int32 {
	__res := gengort.CCall1(__imp_ScriptEngineParse.Addr(), gengort.MarshallSyscall(str))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_GetStackBuffer gengort.PreloadProc

func GetStackBuffer() int32 {
	__res := gengort.CCall0(__imp_GetStackBuffer.Addr())
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_PrintSymbolBuffer gengort.PreloadProc

func PrintSymbolBuffer(SymbolBuffer int32) {
	gengort.CCall1(__imp_PrintSymbolBuffer.Addr(), gengort.MarshallSyscall(SymbolBuffer))
}

var __imp_PrintSymbol gengort.PreloadProc

func PrintSymbol(Symbol int32) {
	gengort.CCall1(__imp_PrintSymbol.Addr(), gengort.MarshallSyscall(Symbol))
}

var __imp_RemoveSymbolBuffer gengort.PreloadProc

func RemoveSymbolBuffer(SymbolBuffer int32) {
	gengort.CCall1(__imp_RemoveSymbolBuffer.Addr(), gengort.MarshallSyscall(SymbolBuffer))
}

var __imp_ScriptEngineSetTextMessageCallback gengort.PreloadProc

func ScriptEngineSetTextMessageCallback(Handler int32) int32 {
	__res := gengort.CCall1(__imp_ScriptEngineSetTextMessageCallback.Addr(), gengort.MarshallSyscall(Handler))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineSymbolAbortLoading gengort.PreloadProc

func ScriptEngineSymbolAbortLoading() int32 {
	__res := gengort.CCall0(__imp_ScriptEngineSymbolAbortLoading.Addr())
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineConvertNameToAddress gengort.PreloadProc

func ScriptEngineConvertNameToAddress(FunctionOrVariableName *byte, WasFound int32) int32 {
	__res := gengort.CCall2(__imp_ScriptEngineConvertNameToAddress.Addr(), gengort.MarshallSyscall(FunctionOrVariableName), gengort.MarshallSyscall(WasFound))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineLoadFileSymbol gengort.PreloadProc

func ScriptEngineLoadFileSymbol(BaseAddress int32, PdbFileName *byte, CustomModuleName *byte) int32 {
	__res := gengort.CCall3(__imp_ScriptEngineLoadFileSymbol.Addr(), gengort.MarshallSyscall(BaseAddress), gengort.MarshallSyscall(PdbFileName), gengort.MarshallSyscall(CustomModuleName))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineUnloadAllSymbols gengort.PreloadProc

func ScriptEngineUnloadAllSymbols() int32 {
	__res := gengort.CCall0(__imp_ScriptEngineUnloadAllSymbols.Addr())
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineUnloadModuleSymbol gengort.PreloadProc

func ScriptEngineUnloadModuleSymbol(ModuleName *byte) int32 {
	__res := gengort.CCall1(__imp_ScriptEngineUnloadModuleSymbol.Addr(), gengort.MarshallSyscall(ModuleName))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineSearchSymbolForMask gengort.PreloadProc

func ScriptEngineSearchSymbolForMask(SearchMask *byte) int32 {
	__res := gengort.CCall1(__imp_ScriptEngineSearchSymbolForMask.Addr(), gengort.MarshallSyscall(SearchMask))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineGetFieldOffset gengort.PreloadProc

func ScriptEngineGetFieldOffset(TypeName *int32, FieldName *int32, FieldOffset *int32) int32 {
	__res := gengort.CCall3(__imp_ScriptEngineGetFieldOffset.Addr(), gengort.MarshallSyscall(TypeName), gengort.MarshallSyscall(FieldName), gengort.MarshallSyscall(FieldOffset))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineGetDataTypeSize gengort.PreloadProc

func ScriptEngineGetDataTypeSize(TypeName *int32, TypeSize *int32) int32 {
	__res := gengort.CCall2(__imp_ScriptEngineGetDataTypeSize.Addr(), gengort.MarshallSyscall(TypeName), gengort.MarshallSyscall(TypeSize))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineCreateSymbolTableForDisassembler gengort.PreloadProc

func ScriptEngineCreateSymbolTableForDisassembler(CallbackFunction unsafe.Pointer) int32 {
	__res := gengort.CCall1(__imp_ScriptEngineCreateSymbolTableForDisassembler.Addr(), gengort.MarshallSyscall(CallbackFunction))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineConvertFileToPdbPath gengort.PreloadProc

func ScriptEngineConvertFileToPdbPath(LocalFilePath *byte, ResultPath *byte) int32 {
	__res := gengort.CCall2(__imp_ScriptEngineConvertFileToPdbPath.Addr(), gengort.MarshallSyscall(LocalFilePath), gengort.MarshallSyscall(ResultPath))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails gengort.PreloadProc

func ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails(LocalFilePath *byte, PdbFilePath *byte, GuidAndAgeDetails *byte, Is32BitModule int32) int32 {
	__res := gengort.CCall4(__imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails.Addr(), gengort.MarshallSyscall(LocalFilePath), gengort.MarshallSyscall(PdbFilePath), gengort.MarshallSyscall(GuidAndAgeDetails), gengort.MarshallSyscall(Is32BitModule))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineSymbolInitLoad gengort.PreloadProc

func ScriptEngineSymbolInitLoad(BufferToStoreDetails int32, StoredLength int32, DownloadIfAvailable int32, SymbolPath *byte, IsSilentLoad int32) int32 {
	__res := gengort.CCall5(__imp_ScriptEngineSymbolInitLoad.Addr(), gengort.MarshallSyscall(BufferToStoreDetails), gengort.MarshallSyscall(StoredLength), gengort.MarshallSyscall(DownloadIfAvailable), gengort.MarshallSyscall(SymbolPath), gengort.MarshallSyscall(IsSilentLoad))
	return gengort.UnmarshallSyscall[int32](__res)
}

var __imp_ScriptEngineShowDataBasedOnSymbolTypes gengort.PreloadProc

func ScriptEngineShowDataBasedOnSymbolTypes(TypeName *byte, Address int32, IsStruct int32, BufferAddress int32, AdditionalParameters *byte) int32 {
	__res := gengort.CCall5(__imp_ScriptEngineShowDataBasedOnSymbolTypes.Addr(), gengort.MarshallSyscall(TypeName), gengort.MarshallSyscall(Address), gengort.MarshallSyscall(IsStruct), gengort.MarshallSyscall(BufferAddress), gengort.MarshallSyscall(AdditionalParameters))
	return gengort.UnmarshallSyscall[int32](__res)
}
