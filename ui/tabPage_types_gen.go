package ui

import (
	"strings"

	"github.com/ddkwork/golibrary/std/stream"
)

// Code generated by EnumTypesGen - DO NOT EDIT.

type TabPageType uint8

const (
	CpuType TabPageType = iota
	PeViewType
	LogType
	NotesType
	BreaksType
	MemoryType
	StackType
	SehType
	ScriptType
	SymbolType
	SourceType
	ReferencesType
	ThreadType
	HandleType
	TraceType
	ArkType
)

func (t TabPageType) Valid() bool {
	return t >= CpuType && t <= ArkType
}

func TabPageTypeBy[T stream.Integer](v T) TabPageType {
	return TabPageType(v)
}

func (t TabPageType) AssertBy(name string) TabPageType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.EqualFold(name, n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t TabPageType) String() string {
	switch t {
	case CpuType:
		return "Cpu"
	case PeViewType:
		return "PeView"
	case LogType:
		return "Log"
	case NotesType:
		return "Notes"
	case BreaksType:
		return "Breaks"
	case MemoryType:
		return "Memory"
	case StackType:
		return "Stack"
	case SehType:
		return "Seh"
	case ScriptType:
		return "Script"
	case SymbolType:
		return "Symbol"
	case SourceType:
		return "Source"
	case ReferencesType:
		return "References"
	case ThreadType:
		return "Thread"
	case HandleType:
		return "Handle"
	case TraceType:
		return "Trace"
	case ArkType:
		return "Ark"
	default:
		panic("InvalidType")
	}
}

func (t TabPageType) Tooltip() string {
	switch t {
	case CpuType:
		return "cpu"
	case PeViewType:
		return "PeView"
	case LogType:
		return "log"
	case NotesType:
		return "notes"
	case BreaksType:
		return "breaks"
	case MemoryType:
		return "memory"
	case StackType:
		return "stack"
	case SehType:
		return "seh"
	case ScriptType:
		return "script"
	case SymbolType:
		return "symbol"
	case SourceType:
		return "source"
	case ReferencesType:
		return "References"
	case ThreadType:
		return "thread"
	case HandleType:
		return "handle"
	case TraceType:
		return "trace"
	case ArkType:
		return "ark"
	default:
		panic("InvalidType")
	}
}

func (t TabPageType) Names() []string {
	return []string{
		"Cpu",
		"PeView",
		"Log",
		"Notes",
		"Breaks",
		"Memory",
		"Stack",
		"Seh",
		"Script",
		"Symbol",
		"Source",
		"References",
		"Thread",
		"Handle",
		"Trace",
		"Ark",
	}
}

func (t TabPageType) EnumTypes() []TabPageType {
	return []TabPageType{
		CpuType,
		PeViewType,
		LogType,
		NotesType,
		BreaksType,
		MemoryType,
		StackType,
		SehType,
		ScriptType,
		SymbolType,
		SourceType,
		ReferencesType,
		ThreadType,
		HandleType,
		TraceType,
		ArkType,
	}
}

func (t TabPageType) SvgFileName() string {
	return t.String() + ".svg"
}
