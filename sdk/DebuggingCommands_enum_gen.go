package sdk

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type DebuggingCommandsKind byte

const (
	BcKind DebuggingCommandsKind = iota
	BdKind
	BeKind
	BlKind
	BpKind
	CpuKind
	DuKind
	DtStructKind
	EKind
	EvalKind
	EventsKind
	ExitKind
	FlushKind
	GKind
	GuKind
	IKind
	KKind
	LmKind
	LoadKind
	OutputKind
	PKind
	PauseKind
	PreactivateKind
	PreallocKind
	PrintKind
	RKind
	RdmsrKind
	SKind
	SettingsKind
	SleepKind
	TKind
	TestKind
	UnloadKind
	WrmsrKind
	XKind
	UnknownKind
	InvalidDebuggingCommandsKind
)

func ConvertInteger2DebuggingCommandsKind[T constraints.Integer](v T) DebuggingCommandsKind {
	return DebuggingCommandsKind(v)
}

func (k DebuggingCommandsKind) AssertKind(kinds string) DebuggingCommandsKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidDebuggingCommandsKind
}

func (k DebuggingCommandsKind) String() string {
	switch k {
	case BcKind:
		return "Bc"
	case BdKind:
		return "Bd"
	case BeKind:
		return "Be"
	case BlKind:
		return "Bl"
	case BpKind:
		return "Bp"
	case CpuKind:
		return "Cpu"
	case DuKind:
		return "Du"
	case DtStructKind:
		return "DtStruct"
	case EKind:
		return "E"
	case EvalKind:
		return "Eval"
	case EventsKind:
		return "Events"
	case ExitKind:
		return "Exit"
	case FlushKind:
		return "Flush"
	case GKind:
		return "G"
	case GuKind:
		return "Gu"
	case IKind:
		return "I"
	case KKind:
		return "K"
	case LmKind:
		return "Lm"
	case LoadKind:
		return "Load"
	case OutputKind:
		return "Output"
	case PKind:
		return "P"
	case PauseKind:
		return "Pause"
	case PreactivateKind:
		return "Preactivate"
	case PreallocKind:
		return "Prealloc"
	case PrintKind:
		return "Print"
	case RKind:
		return "R"
	case RdmsrKind:
		return "Rdmsr"
	case SKind:
		return "S"
	case SettingsKind:
		return "Settings"
	case SleepKind:
		return "Sleep"
	case TKind:
		return "T"
	case TestKind:
		return "Test"
	case UnloadKind:
		return "Unload"
	case WrmsrKind:
		return "Wrmsr"
	case XKind:
		return "X"
	case UnknownKind:
		return "Unknown"
	default:
		return "InvalidDebuggingCommandsKind"
	}
}

func (k DebuggingCommandsKind) Keys() []string {
	return []string{
		"Bc",
		"Bd",
		"Be",
		"Bl",
		"Bp",
		"Cpu",
		"Du",
		"DtStruct",
		"E",
		"Eval",
		"Events",
		"Exit",
		"Flush",
		"G",
		"Gu",
		"I",
		"K",
		"Lm",
		"Load",
		"Output",
		"P",
		"Pause",
		"Preactivate",
		"Prealloc",
		"Print",
		"R",
		"Rdmsr",
		"S",
		"Settings",
		"Sleep",
		"T",
		"Test",
		"Unload",
		"Wrmsr",
		"X",
		"Unknown",
	}
}

func (k DebuggingCommandsKind) Kinds() []DebuggingCommandsKind {
	return []DebuggingCommandsKind{
		BcKind,
		BdKind,
		BeKind,
		BlKind,
		BpKind,
		CpuKind,
		DuKind,
		DtStructKind,
		EKind,
		EvalKind,
		EventsKind,
		ExitKind,
		FlushKind,
		GKind,
		GuKind,
		IKind,
		KKind,
		LmKind,
		LoadKind,
		OutputKind,
		PKind,
		PauseKind,
		PreactivateKind,
		PreallocKind,
		PrintKind,
		RKind,
		RdmsrKind,
		SKind,
		SettingsKind,
		SleepKind,
		TKind,
		TestKind,
		UnloadKind,
		WrmsrKind,
		XKind,
		UnknownKind,
	}
}

func (k DebuggingCommandsKind) SvgFileName() string {
	switch k {
	case BcKind:
		return "Bc"
	case BdKind:
		return "Bd"
	case BeKind:
		return "Be"
	case BlKind:
		return "Bl"
	case BpKind:
		return "Bp"
	case CpuKind:
		return "Cpu"
	case DuKind:
		return "Du"
	case DtStructKind:
		return "DtStruct"
	case EKind:
		return "E"
	case EvalKind:
		return "Eval"
	case EventsKind:
		return "Events"
	case ExitKind:
		return "Exit"
	case FlushKind:
		return "Flush"
	case GKind:
		return "G"
	case GuKind:
		return "Gu"
	case IKind:
		return "I"
	case KKind:
		return "K"
	case LmKind:
		return "Lm"
	case LoadKind:
		return "Load"
	case OutputKind:
		return "Output"
	case PKind:
		return "P"
	case PauseKind:
		return "Pause"
	case PreactivateKind:
		return "Preactivate"
	case PreallocKind:
		return "Prealloc"
	case PrintKind:
		return "Print"
	case RKind:
		return "R"
	case RdmsrKind:
		return "Rdmsr"
	case SKind:
		return "S"
	case SettingsKind:
		return "Settings"
	case SleepKind:
		return "Sleep"
	case TKind:
		return "T"
	case TestKind:
		return "Test"
	case UnloadKind:
		return "Unload"
	case WrmsrKind:
		return "Wrmsr"
	case XKind:
		return "X"
	case UnknownKind:
		return "Unknown"
	default:
		return "InvalidDebuggingCommandsKind"
	}
}
