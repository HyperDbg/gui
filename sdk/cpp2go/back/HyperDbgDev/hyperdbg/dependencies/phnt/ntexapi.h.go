package phnt
//back\HyperDbgDev\hyperdbg\dependencies\phnt\ntexapi.h.back

const(
_NTEXAPI_H =  //col:13
EFI_VARIABLE_NON_VOLATILE = 0x00000001 //col:49
EFI_VARIABLE_BOOTSERVICE_ACCESS = 0x00000002 //col:50
EFI_VARIABLE_RUNTIME_ACCESS = 0x00000004 //col:51
EFI_VARIABLE_HARDWARE_ERROR_RECORD = 0x00000008 //col:52
EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS = 0x00000010 //col:53
EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS = 0x00000020 //col:54
EFI_VARIABLE_APPEND_WRITE = 0x00000040 //col:55
EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS = 0x00000080 //col:56
EVENT_QUERY_STATE = 0x0001 //col:296
EVENT_MODIFY_STATE = 0x0002 //col:300
EVENT_ALL_ACCESS = (EVENT_QUERY_STATE|EVENT_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) //col:304
EVENT_PAIR_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE) //col:389
MUTANT_QUERY_STATE = 0x0001 //col:454
MUTANT_ALL_ACCESS = (MUTANT_QUERY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) //col:458
SEMAPHORE_QUERY_STATE = 0x0001 //col:520
SEMAPHORE_MODIFY_STATE = 0x0002 //col:524
SEMAPHORE_ALL_ACCESS = (SEMAPHORE_QUERY_STATE|SEMAPHORE_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) //col:528
TIMER_QUERY_STATE = 0x0001 //col:585
TIMER_MODIFY_STATE = 0x0002 //col:589
TIMER_ALL_ACCESS = (TIMER_QUERY_STATE|TIMER_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) //col:593
PROFILE_CONTROL = 0x0001 //col:761
PROFILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | PROFILE_CONTROL) //col:762
KEYEDEVENT_WAIT = 0x0001 //col:829
KEYEDEVENT_WAKE = 0x0002 //col:830
KEYEDEVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | KEYEDEVENT_WAIT | KEYEDEVENT_WAKE) //col:831
WORKER_FACTORY_RELEASE_WORKER = 0x0001 //col:1055
WORKER_FACTORY_WAIT = 0x0002 //col:1056
WORKER_FACTORY_SET_INFORMATION = 0x0004 //col:1057
WORKER_FACTORY_QUERY_INFORMATION = 0x0008 //col:1058
WORKER_FACTORY_READY_WORKER = 0x0010 //col:1059
WORKER_FACTORY_SHUTDOWN = 0x0020 //col:1060
WORKER_FACTORY_ALL_ACCESS ( = STANDARD_RIGHTS_REQUIRED | WORKER_FACTORY_RELEASE_WORKER | WORKER_FACTORY_WAIT | WORKER_FACTORY_SET_INFORMATION | WORKER_FACTORY_QUERY_INFORMATION | WORKER_FACTORY_READY_WORKER | WORKER_FACTORY_SHUTDOWN ) //col:1062
MM_WORKING_SET_MAX_HARD_ENABLE = 0x1 //col:1912
MM_WORKING_SET_MAX_HARD_DISABLE = 0x2 //col:1913
MM_WORKING_SET_MIN_HARD_ENABLE = 0x4 //col:1914
MM_WORKING_SET_MIN_HARD_DISABLE = 0x8 //col:1915
_TRACEHANDLE_DEFINED =  //col:2005
PERF_MASK_INDEX = (0xe0000000) //col:2047
PERF_MASK_GROUP = (~PERF_MASK_INDEX) //col:2048
PERF_NUM_MASKS = 8 //col:2049
PERF_GET_MASK_INDEX(GM) = (((GM) & PERF_MASK_INDEX) >> 29) //col:2051
PERF_GET_MASK_GROUP(GM) = ((GM) & PERF_MASK_GROUP) //col:2052
PERFINFO_OR_GROUP_WITH_GROUPMASK(Group, pGroupMask) = (pGroupMask)->Masks[PERF_GET_MASK_INDEX(Group)] |= PERF_GET_MASK_GROUP(Group); //col:2053
PERF_PROCESS =            EVENT_TRACE_FLAG_PROCESS //col:2057
PERF_THREAD =             EVENT_TRACE_FLAG_THREAD //col:2058
PERF_PROC_THREAD =        EVENT_TRACE_FLAG_PROCESS | EVENT_TRACE_FLAG_THREAD //col:2059
PERF_LOADER =             EVENT_TRACE_FLAG_IMAGE_LOAD //col:2060
PERF_PERF_COUNTER =       EVENT_TRACE_FLAG_PROCESS_COUNTERS //col:2061
PERF_FILENAME =           EVENT_TRACE_FLAG_DISK_FILE_IO //col:2062
PERF_DISK_IO =            EVENT_TRACE_FLAG_DISK_FILE_IO | EVENT_TRACE_FLAG_DISK_IO //col:2063
PERF_DISK_IO_INIT =       EVENT_TRACE_FLAG_DISK_IO_INIT //col:2064
PERF_ALL_FAULTS =         EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS //col:2065
PERF_HARD_FAULTS =        EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS //col:2066
PERF_VAMAP =              EVENT_TRACE_FLAG_VAMAP //col:2067
PERF_NETWORK =            EVENT_TRACE_FLAG_NETWORK_TCPIP //col:2068
PERF_REGISTRY =           EVENT_TRACE_FLAG_REGISTRY //col:2069
PERF_DBGPRINT =           EVENT_TRACE_FLAG_DBGPRINT //col:2070
PERF_JOB =                EVENT_TRACE_FLAG_JOB //col:2071
PERF_ALPC =               EVENT_TRACE_FLAG_ALPC //col:2072
PERF_SPLIT_IO =           EVENT_TRACE_FLAG_SPLIT_IO //col:2073
PERF_DEBUG_EVENTS =       EVENT_TRACE_FLAG_DEBUG_EVENTS //col:2074
PERF_FILE_IO =            EVENT_TRACE_FLAG_FILE_IO //col:2075
PERF_FILE_IO_INIT =       EVENT_TRACE_FLAG_FILE_IO_INIT //col:2076
PERF_NO_SYSCONFIG =       EVENT_TRACE_FLAG_NO_SYSCONFIG //col:2077
PERF_MEMORY =             0x20000001 //col:2080
PERF_PROFILE =            0x20000002  // equivalent to EVENT_TRACE_FLAG_PROFILE //col:2081
PERF_CONTEXT_SWITCH =     0x20000004  // equivalent to EVENT_TRACE_FLAG_CSWITCH //col:2082
PERF_FOOTPRINT =          0x20000008 //col:2083
PERF_DRIVERS =            0x20000010  // equivalent to EVENT_TRACE_FLAG_DRIVER //col:2084
PERF_REFSET =             0x20000020 //col:2085
PERF_POOL =               0x20000040 //col:2086
PERF_POOLTRACE =          0x20000041 //col:2087
PERF_DPC =                0x20000080  // equivalent to EVENT_TRACE_FLAG_DPC //col:2088
PERF_COMPACT_CSWITCH =    0x20000100 //col:2089
PERF_DISPATCHER =         0x20000200  // equivalent to EVENT_TRACE_FLAG_DISPATCHER //col:2090
PERF_PMC_PROFILE =        0x20000400 //col:2091
PERF_PROFILING =          0x20000402 //col:2092
PERF_PROCESS_INSWAP =     0x20000800 //col:2093
PERF_AFFINITY =           0x20001000 //col:2094
PERF_PRIORITY =           0x20002000 //col:2095
PERF_INTERRUPT =          0x20004000  // equivalent to EVENT_TRACE_FLAG_INTERRUPT //col:2096
PERF_VIRTUAL_ALLOC =      0x20008000  // equivalent to EVENT_TRACE_FLAG_VIRTUAL_ALLOC //col:2097
PERF_SPINLOCK =           0x20010000 //col:2098
PERF_SYNC_OBJECTS =       0x20020000 //col:2099
PERF_DPC_QUEUE =          0x20040000 //col:2100
PERF_MEMINFO =            0x20080000 //col:2101
PERF_CONTMEM_GEN =        0x20100000 //col:2102
PERF_SPINLOCK_CNTRS =     0x20200000 //col:2103
PERF_SPININSTR =          0x20210000 //col:2104
PERF_SESSION =            0x20400000 //col:2105
PERF_PFSECTION =          0x20400000 //col:2106
PERF_MEMINFO_WS =         0x20800000 //col:2107
PERF_KERNEL_QUEUE =       0x21000000 //col:2108
PERF_INTERRUPT_STEER =    0x22000000 //col:2109
PERF_SHOULD_YIELD =       0x24000000 //col:2110
PERF_WS =                 0x28000000 //col:2111
PERF_ANTI_STARVATION =    0x40000001 //col:2114
PERF_PROCESS_FREEZE =     0x40000002 //col:2115
PERF_PFN_LIST =           0x40000004 //col:2116
PERF_WS_DETAIL =          0x40000008 //col:2117
PERF_WS_ENTRY =           0x40000010 //col:2118
PERF_HEAP =               0x40000020 //col:2119
PERF_SYSCALL =            0x40000040  // equivalent to EVENT_TRACE_FLAG_SYSTEMCALL //col:2120
PERF_UMS =                0x40000080 //col:2121
PERF_BACKTRACE =          0x40000100 //col:2122
PERF_VULCAN =             0x40000200 //col:2123
PERF_OBJECTS =            0x40000400 //col:2124
PERF_EVENTS =             0x40000800 //col:2125
PERF_FULLTRACE =          0x40001000 //col:2126
PERF_DFSS =               0x40002000 //col:2127
PERF_PREFETCH =           0x40004000 //col:2128
PERF_PROCESSOR_IDLE =     0x40008000 //col:2129
PERF_CPU_CONFIG =         0x40010000 //col:2130
PERF_TIMER =              0x40020000 //col:2131
PERF_CLOCK_INTERRUPT =    0x40040000 //col:2132
PERF_LOAD_BALANCER =      0x40080000 //col:2133
PERF_CLOCK_TIMER =        0x40100000 //col:2134
PERF_IDLE_SELECTION =     0x40200000 //col:2135
PERF_IPI =                0x40400000 //col:2136
PERF_IO_TIMER =           0x40800000 //col:2137
PERF_REG_HIVE =           0x41000000 //col:2138
PERF_REG_NOTIF =          0x42000000 //col:2139
PERF_PPM_EXIT_LATENCY =   0x44000000 //col:2140
PERF_WORKER_THREAD =      0x48000000 //col:2141
PERF_OPTICAL_IO =         0x80000001 //col:2144
PERF_OPTICAL_IO_INIT =    0x80000002 //col:2145
PERF_DLL_INFO =           0x80000008 //col:2146
PERF_DLL_FLUSH_WS =       0x80000010 //col:2147
PERF_OB_HANDLE =          0x80000040 //col:2148
PERF_OB_OBJECT =          0x80000080 //col:2149
PERF_WAKE_DROP =          0x80000200 //col:2150
PERF_WAKE_EVENT =         0x80000400 //col:2151
PERF_DEBUGGER =           0x80000800 //col:2152
PERF_PROC_ATTACH =        0x80001000 //col:2153
PERF_WAKE_COUNTER =       0x80002000 //col:2154
PERF_POWER =              0x80008000 //col:2155
PERF_SOFT_TRIM =          0x80010000 //col:2156
PERF_CC =                 0x80020000 //col:2157
PERF_FLT_IO_INIT =        0x80080000 //col:2158
PERF_FLT_IO =             0x80100000 //col:2159
PERF_FLT_FASTIO =         0x80200000 //col:2160
PERF_FLT_IO_FAILURE =     0x80400000 //col:2161
PERF_HV_PROFILE =         0x80800000 //col:2162
PERF_WDF_DPC =            0x81000000 //col:2163
PERF_WDF_INTERRUPT =      0x82000000 //col:2164
PERF_CACHE_FLUSH =        0x84000000 //col:2165
PERF_HIBER_RUNDOWN =      0xA0000001 //col:2168
PERF_SYSCFG_SYSTEM =      0xC0000001 //col:2171
PERF_SYSCFG_GRAPHICS =    0xC0000002 //col:2172
PERF_SYSCFG_STORAGE =     0xC0000004 //col:2173
PERF_SYSCFG_NETWORK =     0xC0000008 //col:2174
PERF_SYSCFG_SERVICES =    0xC0000010 //col:2175
PERF_SYSCFG_PNP =         0xC0000020 //col:2176
PERF_SYSCFG_OPTICAL =     0xC0000040 //col:2177
PERF_SYSCFG_ALL =         0xDFFFFFFF //col:2178
PERF_CLUSTER_OFF =        0xE0000001 //col:2181
PERF_MEMORY_CONTROL =     0xE0000002 //col:2182
MAXIMUM_NODE_COUNT = 0x40 //col:2508
MAXIMUM_NODE_COUNT = 0x10 //col:2510
CODEINTEGRITY_OPTION_ENABLED = 0x01 //col:2945
CODEINTEGRITY_OPTION_TESTSIGN = 0x02 //col:2946
CODEINTEGRITY_OPTION_UMCI_ENABLED = 0x04 //col:2947
CODEINTEGRITY_OPTION_UMCI_AUDITMODE_ENABLED = 0x08 //col:2948
CODEINTEGRITY_OPTION_UMCI_EXCLUSIONPATHS_ENABLED = 0x10 //col:2949
CODEINTEGRITY_OPTION_TEST_BUILD = 0x20 //col:2950
CODEINTEGRITY_OPTION_PREPRODUCTION_BUILD = 0x40 //col:2951
CODEINTEGRITY_OPTION_DEBUGMODE_ENABLED = 0x80 //col:2952
CODEINTEGRITY_OPTION_FLIGHT_BUILD = 0x100 //col:2953
CODEINTEGRITY_OPTION_FLIGHTING_ENABLED = 0x200 //col:2954
CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLED = 0x400 //col:2955
CODEINTEGRITY_OPTION_HVCI_KMCI_AUDITMODE_ENABLED = 0x800 //col:2956
CODEINTEGRITY_OPTION_HVCI_KMCI_STRICTMODE_ENABLED = 0x1000 //col:2957
CODEINTEGRITY_OPTION_HVCI_IUM_ENABLED = 0x2000 //col:2958
CODEINTEGRITY_OPTION_WHQL_ENFORCEMENT_ENABLED = 0x4000 //col:2959
CODEINTEGRITY_OPTION_WHQL_AUDITMODE_ENABLED = 0x8000 //col:2960
SYSTEM_STORE_INFORMATION_VERSION = 1 //col:3026
SYSTEM_STORE_STATS_INFORMATION_VERSION = 2 //col:3037
SYSTEM_STORE_CREATE_INFORMATION_VERSION = 6 //col:3142
SYSTEM_STORE_DELETE_INFORMATION_VERSION = 1 //col:3224
SYSTEM_STORE_LIST_INFORMATION_VERSION = 2 //col:3233
SYSTEM_CACHE_LIST_INFORMATION_VERSION = 2 //col:3250
SYSTEM_CACHE_CREATE_INFORMATION_VERSION = 3 //col:3260
SYSTEM_CACHE_DELETE_INFORMATION_VERSION = 1 //col:3287
SYSTEM_CACHE_STORE_CREATE_INFORMATION_VERSION = 2 //col:3296
SYSTEM_CACHE_STORE_DELETE_INFORMATION_VERSION = 1 //col:3315
SYSTEM_CACHE_STATS_INFORMATION_VERSION = 3 //col:3326
SYSTEM_STORE_REGISTRATION_INFORMATION_VERSION = 2 //col:3352
SYSTEM_STORE_RESIZE_INFORMATION_VERSION = 6 //col:3366
SYSTEM_CACHE_STORE_RESIZE_INFORMATION_VERSION = 1 //col:3378
SYSTEM_STORE_CONFIG_INFORMATION_VERSION = 4 //col:3391
SYSTEM_STORE_HIGH_MEM_PRIORITY_INFORMATION_VERSION = 1 //col:3409
SYSTEM_STORE_TRIM_INFORMATION_VERSION = 1 //col:3420
SYSTEM_STORE_COMPRESSION_INFORMATION_VERSION = 3 //col:3431
MEMORY_COMBINE_FLAGS_COMMON_PAGES_ONLY = 0x4 //col:3686
SYSDBG_LIVEDUMP_CONTROL_VERSION = 1 //col:4846
SYSDBG_LIVEDUMP_CONTROL_VERSION_WIN11 = 2 //col:4847
HARDERROR_OVERRIDE_ERRORMODE = 0x10000000 //col:4913
PROCESSOR_FEATURE_MAX = 64 //col:4936
MAX_WOW64_SHARED_ENTRIES = 16 //col:4938
NX_SUPPORT_POLICY_ALWAYSOFF = 0 //col:4940
NX_SUPPORT_POLICY_ALWAYSON = 1 //col:4941
NX_SUPPORT_POLICY_OPTIN = 2 //col:4942
NX_SUPPORT_POLICY_OPTOUT = 3 //col:4943
USER_SHARED_DATA = ((KUSER_SHARED_DATA * const)0x7ffe0000) //col:5141
ATOM_FLAG_GLOBAL = 0x2 //col:5369
FLG_STOP_ON_EXCEPTION = 0x00000001 // uk //col:5433
FLG_SHOW_LDR_SNAPS = 0x00000002 // uk //col:5434
FLG_DEBUG_INITIAL_COMMAND = 0x00000004 // k //col:5435
FLG_STOP_ON_HUNG_GUI = 0x00000008 // k //col:5436
FLG_HEAP_ENABLE_TAIL_CHECK = 0x00000010 // u //col:5438
FLG_HEAP_ENABLE_FREE_CHECK = 0x00000020 // u //col:5439
FLG_HEAP_VALIDATE_PARAMETERS = 0x00000040 // u //col:5440
FLG_HEAP_VALIDATE_ALL = 0x00000080 // u //col:5441
FLG_APPLICATION_VERIFIER = 0x00000100 // u //col:5443
FLG_MONITOR_SILENT_PROCESS_EXIT = 0x00000200 // uk //col:5444
FLG_POOL_ENABLE_TAGGING = 0x00000400 // k //col:5445
FLG_HEAP_ENABLE_TAGGING = 0x00000800 // u //col:5446
FLG_USER_STACK_TRACE_DB = 0x00001000 // u,32 //col:5448
FLG_KERNEL_STACK_TRACE_DB = 0x00002000 // k,32 //col:5449
FLG_MAINTAIN_OBJECT_TYPELIST = 0x00004000 // k //col:5450
FLG_HEAP_ENABLE_TAG_BY_DLL = 0x00008000 // u //col:5451
FLG_DISABLE_STACK_EXTENSION = 0x00010000 // u //col:5453
FLG_ENABLE_CSRDEBUG = 0x00020000 // k //col:5454
FLG_ENABLE_KDEBUG_SYMBOL_LOAD = 0x00040000 // k //col:5455
FLG_DISABLE_PAGE_KERNEL_STACKS = 0x00080000 // k //col:5456
FLG_ENABLE_SYSTEM_CRIT_BREAKS = 0x00100000 // u //col:5458
FLG_HEAP_DISABLE_COALESCING = 0x00200000 // u //col:5459
FLG_ENABLE_CLOSE_EXCEPTIONS = 0x00400000 // k //col:5460
FLG_ENABLE_EXCEPTION_LOGGING = 0x00800000 // k //col:5461
FLG_ENABLE_HANDLE_TYPE_TAGGING = 0x01000000 // k //col:5463
FLG_HEAP_PAGE_ALLOCS = 0x02000000 // u //col:5464
FLG_DEBUG_INITIAL_COMMAND_EX = 0x04000000 // k //col:5465
FLG_DISABLE_DBGPRINT = 0x08000000 // k //col:5466
FLG_CRITSEC_EVENT_CREATION = 0x10000000 // u //col:5468
FLG_STOP_ON_UNHANDLED_EXCEPTION = 0x20000000 // u,64 //col:5469
FLG_ENABLE_HANDLE_EXCEPTIONS = 0x40000000 // k //col:5470
FLG_DISABLE_PROTDLLS = 0x80000000 // u //col:5471
FLG_VALID_BITS = 0xfffffdff //col:5473
FLG_USERMODE_VALID_BITS (FLG_STOP_ON_EXCEPTION | = FLG_SHOW_LDR_SNAPS | FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS | FLG_HEAP_VALIDATE_ALL | FLG_APPLICATION_VERIFIER | FLG_HEAP_ENABLE_TAGGING | FLG_USER_STACK_TRACE_DB | FLG_HEAP_ENABLE_TAG_BY_DLL | FLG_DISABLE_STACK_EXTENSION | FLG_ENABLE_SYSTEM_CRIT_BREAKS | FLG_HEAP_DISABLE_COALESCING | FLG_DISABLE_PROTDLLS | FLG_HEAP_PAGE_ALLOCS | FLG_CRITSEC_EVENT_CREATION | FLG_LDR_TOP_DOWN) //col:5475
FLG_BOOTONLY_VALID_BITS (FLG_KERNEL_STACK_TRACE_DB | = FLG_MAINTAIN_OBJECT_TYPELIST | FLG_ENABLE_CSRDEBUG | FLG_DEBUG_INITIAL_COMMAND | FLG_DEBUG_INITIAL_COMMAND_EX | FLG_DISABLE_PAGE_KERNEL_STACKS) //col:5493
FLG_KERNELMODE_VALID_BITS (FLG_STOP_ON_EXCEPTION | = FLG_SHOW_LDR_SNAPS | FLG_STOP_ON_HUNG_GUI | FLG_POOL_ENABLE_TAGGING | FLG_ENABLE_KDEBUG_SYMBOL_LOAD | FLG_ENABLE_CLOSE_EXCEPTIONS | FLG_ENABLE_EXCEPTION_LOGGING | FLG_ENABLE_HANDLE_TYPE_TAGGING | FLG_DISABLE_DBGPRINT | FLG_ENABLE_HANDLE_EXCEPTIONS) //col:5500
)

type     FilterBootOptionOperationOpenSystemStore uint32
const(
    FilterBootOptionOperationOpenSystemStore FILTER_BOOT_OPTION_OPERATION = 1  //col:272
    FilterBootOptionOperationSetElement FILTER_BOOT_OPTION_OPERATION = 2  //col:273
    FilterBootOptionOperationDeleteElement FILTER_BOOT_OPTION_OPERATION = 3  //col:274
    FilterBootOptionOperationMax FILTER_BOOT_OPTION_OPERATION = 4  //col:275
)


type     EventBasicInformation uint32
const(
    EventBasicInformation EVENT_INFORMATION_CLASS = 1  //col:309
)


type     MutantBasicInformation // MUTANT_BASIC_INFORMATION uint32
const(
    MutantBasicInformation // MUTANT_BASIC_INFORMATION MUTANT_INFORMATION_CLASS = 1  //col:463
    MutantOwnerInformation // MUTANT_OWNER_INFORMATION MUTANT_INFORMATION_CLASS = 2  //col:464
)


type     SemaphoreBasicInformation uint32
const(
    SemaphoreBasicInformation SEMAPHORE_INFORMATION_CLASS = 1  //col:533
)


type     TimerBasicInformation // TIMER_BASIC_INFORMATION uint32
const(
    TimerBasicInformation // TIMER_BASIC_INFORMATION TIMER_INFORMATION_CLASS = 1  //col:598
)


type     TimerSetCoalescableTimer // TIMER_SET_COALESCABLE_TIMER_INFO uint32
const(
    TimerSetCoalescableTimer // TIMER_SET_COALESCABLE_TIMER_INFO TIMER_SET_INFORMATION_CLASS = 1  //col:615
    MaxTimerInfoClass TIMER_SET_INFORMATION_CLASS = 2  //col:616
)


type     WnfWellKnownStateName uint32
const(
    WnfWellKnownStateName WNF_STATE_NAME_LIFETIME = 1  //col:897
    WnfPermanentStateName WNF_STATE_NAME_LIFETIME = 2  //col:898
    WnfPersistentStateName WNF_STATE_NAME_LIFETIME = 3  //col:899
    WnfTemporaryStateName WNF_STATE_NAME_LIFETIME = 4  //col:900
)


type     WnfInfoStateNameExist uint32
const(
    WnfInfoStateNameExist WNF_STATE_NAME_INFORMATION = 1  //col:905
    WnfInfoSubscribersPresent WNF_STATE_NAME_INFORMATION = 2  //col:906
    WnfInfoIsQuiescent WNF_STATE_NAME_INFORMATION = 3  //col:907
)


type     WnfDataScopeSystem uint32
const(
    WnfDataScopeSystem WNF_DATA_SCOPE = 1  //col:912
    WnfDataScopeSession WNF_DATA_SCOPE = 2  //col:913
    WnfDataScopeUser WNF_DATA_SCOPE = 3  //col:914
    WnfDataScopeProcess WNF_DATA_SCOPE = 4  //col:915
    WnfDataScopeMachine // REDSTONE3 WNF_DATA_SCOPE = 5  //col:916
    WnfDataScopePhysicalMachine // WIN11 WNF_DATA_SCOPE = 6  //col:917
)


type     WorkerFactoryTimeout // LARGE_INTEGER uint32
const(
    WorkerFactoryTimeout // LARGE_INTEGER WORKERFACTORYINFOCLASS = 1  //col:1078
    WorkerFactoryRetryTimeout // LARGE_INTEGER WORKERFACTORYINFOCLASS = 2  //col:1079
    WorkerFactoryIdleTimeout // s: LARGE_INTEGER WORKERFACTORYINFOCLASS = 3  //col:1080
    WorkerFactoryBindingCount // s: ULONG WORKERFACTORYINFOCLASS = 4  //col:1081
    WorkerFactoryThreadMinimum // s: ULONG WORKERFACTORYINFOCLASS = 5  //col:1082
    WorkerFactoryThreadMaximum // s: ULONG WORKERFACTORYINFOCLASS = 6  //col:1083
    WorkerFactoryPaused // ULONG or BOOLEAN WORKERFACTORYINFOCLASS = 7  //col:1084
    WorkerFactoryBasicInformation // q: WORKER_FACTORY_BASIC_INFORMATION WORKERFACTORYINFOCLASS = 8  //col:1085
    WorkerFactoryAdjustThreadGoal WORKERFACTORYINFOCLASS = 9  //col:1086
    WorkerFactoryCallbackType WORKERFACTORYINFOCLASS = 10  //col:1087
    WorkerFactoryStackInformation // 10 WORKERFACTORYINFOCLASS = 11  //col:1088
    WorkerFactoryThreadBasePriority // s: ULONG WORKERFACTORYINFOCLASS = 12  //col:1089
    WorkerFactoryTimeoutWaiters // s: ULONG since THRESHOLD WORKERFACTORYINFOCLASS = 13  //col:1090
    WorkerFactoryFlags // s: ULONG WORKERFACTORYINFOCLASS = 14  //col:1091
    WorkerFactoryThreadSoftMaximum // s: ULONG WORKERFACTORYINFOCLASS = 15  //col:1092
    WorkerFactoryThreadCpuSets // since REDSTONE5 WORKERFACTORYINFOCLASS = 16  //col:1093
    MaxWorkerFactoryInfoClass WORKERFACTORYINFOCLASS = 17  //col:1094
)


type     SystemBasicInformation // q: SYSTEM_BASIC_INFORMATION uint32
const(
    SystemBasicInformation // q: SYSTEM_BASIC_INFORMATION SYSTEM_INFORMATION_CLASS = 1  //col:1306
    SystemProcessorInformation // q: SYSTEM_PROCESSOR_INFORMATION SYSTEM_INFORMATION_CLASS = 2  //col:1307
    SystemPerformanceInformation // q: SYSTEM_PERFORMANCE_INFORMATION SYSTEM_INFORMATION_CLASS = 3  //col:1308
    SystemTimeOfDayInformation // q: SYSTEM_TIMEOFDAY_INFORMATION SYSTEM_INFORMATION_CLASS = 4  //col:1309
    SystemPathInformation // not implemented SYSTEM_INFORMATION_CLASS = 5  //col:1310
    SystemProcessInformation // q: SYSTEM_PROCESS_INFORMATION SYSTEM_INFORMATION_CLASS = 6  //col:1311
    SystemCallCountInformation // q: SYSTEM_CALL_COUNT_INFORMATION SYSTEM_INFORMATION_CLASS = 7  //col:1312
    SystemDeviceInformation // q: SYSTEM_DEVICE_INFORMATION SYSTEM_INFORMATION_CLASS = 8  //col:1313
    SystemProcessorPerformanceInformation // q: SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 9  //col:1314
    SystemFlagsInformation // q: SYSTEM_FLAGS_INFORMATION SYSTEM_INFORMATION_CLASS = 10  //col:1315
    SystemCallTimeInformation // not implemented // SYSTEM_CALL_TIME_INFORMATION // 10 SYSTEM_INFORMATION_CLASS = 11  //col:1316
    SystemModuleInformation // q: RTL_PROCESS_MODULES SYSTEM_INFORMATION_CLASS = 12  //col:1317
    SystemLocksInformation // q: RTL_PROCESS_LOCKS SYSTEM_INFORMATION_CLASS = 13  //col:1318
    SystemStackTraceInformation // q: RTL_PROCESS_BACKTRACES SYSTEM_INFORMATION_CLASS = 14  //col:1319
    SystemPagedPoolInformation // not implemented SYSTEM_INFORMATION_CLASS = 15  //col:1320
    SystemNonPagedPoolInformation // not implemented SYSTEM_INFORMATION_CLASS = 16  //col:1321
    SystemHandleInformation // q: SYSTEM_HANDLE_INFORMATION SYSTEM_INFORMATION_CLASS = 17  //col:1322
    SystemObjectInformation // q: SYSTEM_OBJECTTYPE_INFORMATION mixed with SYSTEM_OBJECT_INFORMATION SYSTEM_INFORMATION_CLASS = 18  //col:1323
    SystemPageFileInformation // q: SYSTEM_PAGEFILE_INFORMATION SYSTEM_INFORMATION_CLASS = 19  //col:1324
    SystemVdmInstemulInformation // q: SYSTEM_VDM_INSTEMUL_INFO SYSTEM_INFORMATION_CLASS = 20  //col:1325
    SystemVdmBopInformation // not implemented // 20 SYSTEM_INFORMATION_CLASS = 21  //col:1326
    SystemFileCacheInformation // q: SYSTEM_FILECACHE_INFORMATION; s (requires SeIncreaseQuotaPrivilege) (info for WorkingSetTypeSystemCache) SYSTEM_INFORMATION_CLASS = 22  //col:1327
    SystemPoolTagInformation // q: SYSTEM_POOLTAG_INFORMATION SYSTEM_INFORMATION_CLASS = 23  //col:1328
    SystemInterruptInformation // q: SYSTEM_INTERRUPT_INFORMATION (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 24  //col:1329
    SystemDpcBehaviorInformation // q: SYSTEM_DPC_BEHAVIOR_INFORMATION; s: SYSTEM_DPC_BEHAVIOR_INFORMATION (requires SeLoadDriverPrivilege) SYSTEM_INFORMATION_CLASS = 25  //col:1330
    SystemFullMemoryInformation // not implemented // SYSTEM_MEMORY_USAGE_INFORMATION SYSTEM_INFORMATION_CLASS = 26  //col:1331
    SystemLoadGdiDriverInformation // s (kernel-mode only) SYSTEM_INFORMATION_CLASS = 27  //col:1332
    SystemUnloadGdiDriverInformation // s (kernel-mode only) SYSTEM_INFORMATION_CLASS = 28  //col:1333
    SystemTimeAdjustmentInformation // q: SYSTEM_QUERY_TIME_ADJUST_INFORMATION; s: SYSTEM_SET_TIME_ADJUST_INFORMATION (requires SeSystemtimePrivilege) SYSTEM_INFORMATION_CLASS = 29  //col:1334
    SystemSummaryMemoryInformation // not implemented // SYSTEM_MEMORY_USAGE_INFORMATION SYSTEM_INFORMATION_CLASS = 30  //col:1335
    SystemMirrorMemoryInformation // s (requires license value "Kernel-MemoryMirroringSupported") (requires SeShutdownPrivilege) // 30 SYSTEM_INFORMATION_CLASS = 31  //col:1336
    SystemPerformanceTraceInformation // q; s: (type depends on EVENT_TRACE_INFORMATION_CLASS) SYSTEM_INFORMATION_CLASS = 32  //col:1337
    SystemObsolete0 // not implemented SYSTEM_INFORMATION_CLASS = 33  //col:1338
    SystemExceptionInformation // q: SYSTEM_EXCEPTION_INFORMATION SYSTEM_INFORMATION_CLASS = 34  //col:1339
    SystemCrashDumpStateInformation // s: SYSTEM_CRASH_DUMP_STATE_INFORMATION (requires SeDebugPrivilege) SYSTEM_INFORMATION_CLASS = 35  //col:1340
    SystemKernelDebuggerInformation // q: SYSTEM_KERNEL_DEBUGGER_INFORMATION SYSTEM_INFORMATION_CLASS = 36  //col:1341
    SystemContextSwitchInformation // q: SYSTEM_CONTEXT_SWITCH_INFORMATION SYSTEM_INFORMATION_CLASS = 37  //col:1342
    SystemRegistryQuotaInformation // q: SYSTEM_REGISTRY_QUOTA_INFORMATION; s (requires SeIncreaseQuotaPrivilege) SYSTEM_INFORMATION_CLASS = 38  //col:1343
    SystemExtendServiceTableInformation // s (requires SeLoadDriverPrivilege) // loads win32k only SYSTEM_INFORMATION_CLASS = 39  //col:1344
    SystemPrioritySeperation // s (requires SeTcbPrivilege) SYSTEM_INFORMATION_CLASS = 40  //col:1345
    SystemVerifierAddDriverInformation // s (requires SeDebugPrivilege) // 40 SYSTEM_INFORMATION_CLASS = 41  //col:1346
    SystemVerifierRemoveDriverInformation // s (requires SeDebugPrivilege) SYSTEM_INFORMATION_CLASS = 42  //col:1347
    SystemProcessorIdleInformation // q: SYSTEM_PROCESSOR_IDLE_INFORMATION (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 43  //col:1348
    SystemLegacyDriverInformation // q: SYSTEM_LEGACY_DRIVER_INFORMATION SYSTEM_INFORMATION_CLASS = 44  //col:1349
    SystemCurrentTimeZoneInformation // q; s: RTL_TIME_ZONE_INFORMATION SYSTEM_INFORMATION_CLASS = 45  //col:1350
    SystemLookasideInformation // q: SYSTEM_LOOKASIDE_INFORMATION SYSTEM_INFORMATION_CLASS = 46  //col:1351
    SystemTimeSlipNotification // s: HANDLE (NtCreateEvent) (requires SeSystemtimePrivilege) SYSTEM_INFORMATION_CLASS = 47  //col:1352
    SystemSessionCreate // not implemented SYSTEM_INFORMATION_CLASS = 48  //col:1353
    SystemSessionDetach // not implemented SYSTEM_INFORMATION_CLASS = 49  //col:1354
    SystemSessionInformation // not implemented (SYSTEM_SESSION_INFORMATION) SYSTEM_INFORMATION_CLASS = 50  //col:1355
    SystemRangeStartInformation // q: SYSTEM_RANGE_START_INFORMATION // 50 SYSTEM_INFORMATION_CLASS = 51  //col:1356
    SystemVerifierInformation // q: SYSTEM_VERIFIER_INFORMATION; s (requires SeDebugPrivilege) SYSTEM_INFORMATION_CLASS = 52  //col:1357
    SystemVerifierThunkExtend // s (kernel-mode only) SYSTEM_INFORMATION_CLASS = 53  //col:1358
    SystemSessionProcessInformation // q: SYSTEM_SESSION_PROCESS_INFORMATION SYSTEM_INFORMATION_CLASS = 54  //col:1359
    SystemLoadGdiDriverInSystemSpace // s: SYSTEM_GDI_DRIVER_INFORMATION (kernel-mode only) (same as SystemLoadGdiDriverInformation) SYSTEM_INFORMATION_CLASS = 55  //col:1360
    SystemNumaProcessorMap // q: SYSTEM_NUMA_INFORMATION SYSTEM_INFORMATION_CLASS = 56  //col:1361
    SystemPrefetcherInformation // q; s: PREFETCHER_INFORMATION // PfSnQueryPrefetcherInformation SYSTEM_INFORMATION_CLASS = 57  //col:1362
    SystemExtendedProcessInformation // q: SYSTEM_PROCESS_INFORMATION SYSTEM_INFORMATION_CLASS = 58  //col:1363
    SystemRecommendedSharedDataAlignment // q: ULONG // KeGetRecommendedSharedDataAlignment SYSTEM_INFORMATION_CLASS = 59  //col:1364
    SystemComPlusPackage // q; s: ULONG SYSTEM_INFORMATION_CLASS = 60  //col:1365
    SystemNumaAvailableMemory // q: SYSTEM_NUMA_INFORMATION // 60 SYSTEM_INFORMATION_CLASS = 61  //col:1366
    SystemProcessorPowerInformation // q: SYSTEM_PROCESSOR_POWER_INFORMATION (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 62  //col:1367
    SystemEmulationBasicInformation // q: SYSTEM_BASIC_INFORMATION SYSTEM_INFORMATION_CLASS = 63  //col:1368
    SystemEmulationProcessorInformation // q: SYSTEM_PROCESSOR_INFORMATION SYSTEM_INFORMATION_CLASS = 64  //col:1369
    SystemExtendedHandleInformation // q: SYSTEM_HANDLE_INFORMATION_EX SYSTEM_INFORMATION_CLASS = 65  //col:1370
    SystemLostDelayedWriteInformation // q: ULONG SYSTEM_INFORMATION_CLASS = 66  //col:1371
    SystemBigPoolInformation // q: SYSTEM_BIGPOOL_INFORMATION SYSTEM_INFORMATION_CLASS = 67  //col:1372
    SystemSessionPoolTagInformation // q: SYSTEM_SESSION_POOLTAG_INFORMATION SYSTEM_INFORMATION_CLASS = 68  //col:1373
    SystemSessionMappedViewInformation // q: SYSTEM_SESSION_MAPPED_VIEW_INFORMATION SYSTEM_INFORMATION_CLASS = 69  //col:1374
    SystemHotpatchInformation // q; s: SYSTEM_HOTPATCH_CODE_INFORMATION SYSTEM_INFORMATION_CLASS = 70  //col:1375
    SystemObjectSecurityMode // q: ULONG // 70 SYSTEM_INFORMATION_CLASS = 71  //col:1376
    SystemWatchdogTimerHandler // s: SYSTEM_WATCHDOG_HANDLER_INFORMATION // (kernel-mode only) SYSTEM_INFORMATION_CLASS = 72  //col:1377
    SystemWatchdogTimerInformation // q: SYSTEM_WATCHDOG_TIMER_INFORMATION // (kernel-mode only) SYSTEM_INFORMATION_CLASS = 73  //col:1378
    SystemLogicalProcessorInformation // q: SYSTEM_LOGICAL_PROCESSOR_INFORMATION (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 74  //col:1379
    SystemWow64SharedInformationObsolete // not implemented SYSTEM_INFORMATION_CLASS = 75  //col:1380
    SystemRegisterFirmwareTableInformationHandler // s: SYSTEM_FIRMWARE_TABLE_HANDLER // (kernel-mode only) SYSTEM_INFORMATION_CLASS = 76  //col:1381
    SystemFirmwareTableInformation // SYSTEM_FIRMWARE_TABLE_INFORMATION SYSTEM_INFORMATION_CLASS = 77  //col:1382
    SystemModuleInformationEx // q: RTL_PROCESS_MODULE_INFORMATION_EX SYSTEM_INFORMATION_CLASS = 78  //col:1383
    SystemVerifierTriageInformation // not implemented SYSTEM_INFORMATION_CLASS = 79  //col:1384
    SystemSuperfetchInformation // q; s: SUPERFETCH_INFORMATION // PfQuerySuperfetchInformation SYSTEM_INFORMATION_CLASS = 80  //col:1385
    SystemMemoryListInformation // q: SYSTEM_MEMORY_LIST_INFORMATION; s: SYSTEM_MEMORY_LIST_COMMAND (requires SeProfileSingleProcessPrivilege) // 80 SYSTEM_INFORMATION_CLASS = 81  //col:1386
    SystemFileCacheInformationEx // q: SYSTEM_FILECACHE_INFORMATION; s (requires SeIncreaseQuotaPrivilege) (same as SystemFileCacheInformation) SYSTEM_INFORMATION_CLASS = 82  //col:1387
    SystemThreadPriorityClientIdInformation // s: SYSTEM_THREAD_CID_PRIORITY_INFORMATION (requires SeIncreaseBasePriorityPrivilege) SYSTEM_INFORMATION_CLASS = 83  //col:1388
    SystemProcessorIdleCycleTimeInformation // q: SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION[] (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 84  //col:1389
    SystemVerifierCancellationInformation // SYSTEM_VERIFIER_CANCELLATION_INFORMATION // name:wow64:whNT32QuerySystemVerifierCancellationInformation SYSTEM_INFORMATION_CLASS = 85  //col:1390
    SystemProcessorPowerInformationEx // not implemented SYSTEM_INFORMATION_CLASS = 86  //col:1391
    SystemRefTraceInformation // q; s: SYSTEM_REF_TRACE_INFORMATION // ObQueryRefTraceInformation SYSTEM_INFORMATION_CLASS = 87  //col:1392
    SystemSpecialPoolInformation // q; s: SYSTEM_SPECIAL_POOL_INFORMATION (requires SeDebugPrivilege) // MmSpecialPoolTag then MmSpecialPoolCatchOverruns ! SYSTEM_INFORMATION_CLASS =  0  //col:1393
    SystemProcessIdInformation // q: SYSTEM_PROCESS_ID_INFORMATION SYSTEM_INFORMATION_CLASS = 89  //col:1394
    SystemErrorPortInformation // s (requires SeTcbPrivilege) SYSTEM_INFORMATION_CLASS = 90  //col:1395
    SystemBootEnvironmentInformation // q: SYSTEM_BOOT_ENVIRONMENT_INFORMATION // 90 SYSTEM_INFORMATION_CLASS = 91  //col:1396
    SystemHypervisorInformation // q: SYSTEM_HYPERVISOR_QUERY_INFORMATION SYSTEM_INFORMATION_CLASS = 92  //col:1397
    SystemVerifierInformationEx // q; s: SYSTEM_VERIFIER_INFORMATION_EX SYSTEM_INFORMATION_CLASS = 93  //col:1398
    SystemTimeZoneInformation // q; s: RTL_TIME_ZONE_INFORMATION (requires SeTimeZonePrivilege) SYSTEM_INFORMATION_CLASS = 94  //col:1399
    SystemImageFileExecutionOptionsInformation // s: SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION (requires SeTcbPrivilege) SYSTEM_INFORMATION_CLASS = 95  //col:1400
    SystemCoverageInformation // q: COVERAGE_MODULES s: COVERAGE_MODULE_REQUEST // ExpCovQueryInformation (requires SeDebugPrivilege) SYSTEM_INFORMATION_CLASS = 96  //col:1401
    SystemPrefetchPatchInformation // SYSTEM_PREFETCH_PATCH_INFORMATION SYSTEM_INFORMATION_CLASS = 97  //col:1402
    SystemVerifierFaultsInformation // s: SYSTEM_VERIFIER_FAULTS_INFORMATION (requires SeDebugPrivilege) SYSTEM_INFORMATION_CLASS = 98  //col:1403
    SystemSystemPartitionInformation // q: SYSTEM_SYSTEM_PARTITION_INFORMATION SYSTEM_INFORMATION_CLASS = 99  //col:1404
    SystemSystemDiskInformation // q: SYSTEM_SYSTEM_DISK_INFORMATION SYSTEM_INFORMATION_CLASS = 100  //col:1405
    SystemProcessorPerformanceDistribution // q: SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION (EX in: USHORT ProcessorGroup) // 100 SYSTEM_INFORMATION_CLASS = 101  //col:1406
    SystemNumaProximityNodeInformation // q; s: SYSTEM_NUMA_PROXIMITY_MAP SYSTEM_INFORMATION_CLASS = 102  //col:1407
    SystemDynamicTimeZoneInformation // q; s: RTL_DYNAMIC_TIME_ZONE_INFORMATION (requires SeTimeZonePrivilege) SYSTEM_INFORMATION_CLASS = 103  //col:1408
    SystemCodeIntegrityInformation // q: SYSTEM_CODEINTEGRITY_INFORMATION // SeCodeIntegrityQueryInformation SYSTEM_INFORMATION_CLASS = 104  //col:1409
    SystemProcessorMicrocodeUpdateInformation // s: SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION SYSTEM_INFORMATION_CLASS = 105  //col:1410
    SystemProcessorBrandString // q: CHAR[] // HaliQuerySystemInformation -> HalpGetProcessorBrandString info class 23 SYSTEM_INFORMATION_CLASS = 106  //col:1411
    SystemVirtualAddressInformation // q: SYSTEM_VA_LIST_INFORMATION[]; s: SYSTEM_VA_LIST_INFORMATION[] (requires SeIncreaseQuotaPrivilege) // MmQuerySystemVaInformation SYSTEM_INFORMATION_CLASS = 107  //col:1412
    SystemLogicalProcessorAndGroupInformation // q: SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX (EX in: LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType) // since WIN7 // KeQueryLogicalProcessorRelationship SYSTEM_INFORMATION_CLASS = 108  //col:1413
    SystemProcessorCycleTimeInformation // q: SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION[] (EX in: USHORT ProcessorGroup) SYSTEM_INFORMATION_CLASS = 109  //col:1414
    SystemStoreInformation // q; s: SYSTEM_STORE_INFORMATION (requires SeProfileSingleProcessPrivilege) // SmQueryStoreInformation SYSTEM_INFORMATION_CLASS = 110  //col:1415
    SystemRegistryAppendString // s: SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS // 110 SYSTEM_INFORMATION_CLASS = 111  //col:1416
    SystemAitSamplingValue // s: ULONG (requires SeProfileSingleProcessPrivilege) SYSTEM_INFORMATION_CLASS = 112  //col:1417
    SystemVhdBootInformation // q: SYSTEM_VHD_BOOT_INFORMATION SYSTEM_INFORMATION_CLASS = 113  //col:1418
    SystemCpuQuotaInformation // q; s: PS_CPU_QUOTA_QUERY_INFORMATION SYSTEM_INFORMATION_CLASS = 114  //col:1419
    SystemNativeBasicInformation // q: SYSTEM_BASIC_INFORMATION SYSTEM_INFORMATION_CLASS = 115  //col:1420
    SystemErrorPortTimeouts // SYSTEM_ERROR_PORT_TIMEOUTS SYSTEM_INFORMATION_CLASS = 116  //col:1421
    SystemLowPriorityIoInformation // q: SYSTEM_LOW_PRIORITY_IO_INFORMATION SYSTEM_INFORMATION_CLASS = 117  //col:1422
    SystemTpmBootEntropyInformation // q: TPM_BOOT_ENTROPY_NT_RESULT // ExQueryTpmBootEntropyInformation SYSTEM_INFORMATION_CLASS = 118  //col:1423
    SystemVerifierCountersInformation // q: SYSTEM_VERIFIER_COUNTERS_INFORMATION SYSTEM_INFORMATION_CLASS = 119  //col:1424
    SystemPagedPoolInformationEx // q: SYSTEM_FILECACHE_INFORMATION; s (requires SeIncreaseQuotaPrivilege) (info for WorkingSetTypePagedPool) SYSTEM_INFORMATION_CLASS = 120  //col:1425
    SystemSystemPtesInformationEx // q: SYSTEM_FILECACHE_INFORMATION; s (requires SeIncreaseQuotaPrivilege) (info for WorkingSetTypeSystemPtes) // 120 SYSTEM_INFORMATION_CLASS = 121  //col:1426
    SystemNodeDistanceInformation // q: USHORT[4*NumaNodes] // (EX in: USHORT NodeNumber) SYSTEM_INFORMATION_CLASS = 122  //col:1427
    SystemAcpiAuditInformation // q: SYSTEM_ACPI_AUDIT_INFORMATION // HaliQuerySystemInformation -> HalpAuditQueryResults info class 26 SYSTEM_INFORMATION_CLASS = 123  //col:1428
    SystemBasicPerformanceInformation // q: SYSTEM_BASIC_PERFORMANCE_INFORMATION // name:wow64:whNtQuerySystemInformation_SystemBasicPerformanceInformation SYSTEM_INFORMATION_CLASS = 124  //col:1429
    SystemQueryPerformanceCounterInformation // q: SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION // since WIN7 SP1 SYSTEM_INFORMATION_CLASS = 125  //col:1430
    SystemSessionBigPoolInformation // q: SYSTEM_SESSION_POOLTAG_INFORMATION // since WIN8 SYSTEM_INFORMATION_CLASS = 126  //col:1431
    SystemBootGraphicsInformation // q; s: SYSTEM_BOOT_GRAPHICS_INFORMATION (kernel-mode only) SYSTEM_INFORMATION_CLASS = 127  //col:1432
    SystemScrubPhysicalMemoryInformation // q; s: MEMORY_SCRUB_INFORMATION SYSTEM_INFORMATION_CLASS = 128  //col:1433
    SystemBadPageInformation SYSTEM_INFORMATION_CLASS = 129  //col:1434
    SystemProcessorProfileControlArea // q; s: SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA SYSTEM_INFORMATION_CLASS = 130  //col:1435
    SystemCombinePhysicalMemoryInformation // s: MEMORY_COMBINE_INFORMATION MEMORY_COMBINE_INFORMATION_EX MEMORY_COMBINE_INFORMATION_EX2 // 130 SYSTEM_INFORMATION_CLASS = 131  //col:1436
    SystemEntropyInterruptTimingInformation // q; s: SYSTEM_ENTROPY_TIMING_INFORMATION SYSTEM_INFORMATION_CLASS = 132  //col:1437
    SystemConsoleInformation // q: SYSTEM_CONSOLE_INFORMATION SYSTEM_INFORMATION_CLASS = 133  //col:1438
    SystemPlatformBinaryInformation // q: SYSTEM_PLATFORM_BINARY_INFORMATION (requires SeTcbPrivilege) SYSTEM_INFORMATION_CLASS = 134  //col:1439
    SystemPolicyInformation // q: SYSTEM_POLICY_INFORMATION SYSTEM_INFORMATION_CLASS = 135  //col:1440
    SystemHypervisorProcessorCountInformation // q: SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION SYSTEM_INFORMATION_CLASS = 136  //col:1441
    SystemDeviceDataInformation // q: SYSTEM_DEVICE_DATA_INFORMATION SYSTEM_INFORMATION_CLASS = 137  //col:1442
    SystemDeviceDataEnumerationInformation // q: SYSTEM_DEVICE_DATA_INFORMATION SYSTEM_INFORMATION_CLASS = 138  //col:1443
    SystemMemoryTopologyInformation // q: SYSTEM_MEMORY_TOPOLOGY_INFORMATION SYSTEM_INFORMATION_CLASS = 139  //col:1444
    SystemMemoryChannelInformation // q: SYSTEM_MEMORY_CHANNEL_INFORMATION SYSTEM_INFORMATION_CLASS = 140  //col:1445
    SystemBootLogoInformation // q: SYSTEM_BOOT_LOGO_INFORMATION // 140 SYSTEM_INFORMATION_CLASS = 141  //col:1446
    SystemProcessorPerformanceInformationEx // q: SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX // (EX in: USHORT ProcessorGroup) // since WINBLUE SYSTEM_INFORMATION_CLASS = 142  //col:1447
    SystemCriticalProcessErrorLogInformation SYSTEM_INFORMATION_CLASS = 143  //col:1448
    SystemSecureBootPolicyInformation // q: SYSTEM_SECUREBOOT_POLICY_INFORMATION SYSTEM_INFORMATION_CLASS = 144  //col:1449
    SystemPageFileInformationEx // q: SYSTEM_PAGEFILE_INFORMATION_EX SYSTEM_INFORMATION_CLASS = 145  //col:1450
    SystemSecureBootInformation // q: SYSTEM_SECUREBOOT_INFORMATION SYSTEM_INFORMATION_CLASS = 146  //col:1451
    SystemEntropyInterruptTimingRawInformation SYSTEM_INFORMATION_CLASS = 147  //col:1452
    SystemPortableWorkspaceEfiLauncherInformation // q: SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION SYSTEM_INFORMATION_CLASS = 148  //col:1453
    SystemFullProcessInformation // q: SYSTEM_PROCESS_INFORMATION with SYSTEM_PROCESS_INFORMATION_EXTENSION (requires admin) SYSTEM_INFORMATION_CLASS = 149  //col:1454
    SystemKernelDebuggerInformationEx // q: SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX SYSTEM_INFORMATION_CLASS = 150  //col:1455
    SystemBootMetadataInformation // 150 SYSTEM_INFORMATION_CLASS = 151  //col:1456
    SystemSoftRebootInformation // q: ULONG SYSTEM_INFORMATION_CLASS = 152  //col:1457
    SystemElamCertificateInformation // s: SYSTEM_ELAM_CERTIFICATE_INFORMATION SYSTEM_INFORMATION_CLASS = 153  //col:1458
    SystemOfflineDumpConfigInformation // q: OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 SYSTEM_INFORMATION_CLASS = 154  //col:1459
    SystemProcessorFeaturesInformation // q: SYSTEM_PROCESSOR_FEATURES_INFORMATION SYSTEM_INFORMATION_CLASS = 155  //col:1460
    SystemRegistryReconciliationInformation // s: NULL (requires admin) (flushes registry hives) SYSTEM_INFORMATION_CLASS = 156  //col:1461
    SystemEdidInformation // q: SYSTEM_EDID_INFORMATION SYSTEM_INFORMATION_CLASS = 157  //col:1462
    SystemManufacturingInformation // q: SYSTEM_MANUFACTURING_INFORMATION // since THRESHOLD SYSTEM_INFORMATION_CLASS = 158  //col:1463
    SystemEnergyEstimationConfigInformation // q: SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION SYSTEM_INFORMATION_CLASS = 159  //col:1464
    SystemHypervisorDetailInformation // q: SYSTEM_HYPERVISOR_DETAIL_INFORMATION SYSTEM_INFORMATION_CLASS = 160  //col:1465
    SystemProcessorCycleStatsInformation // q: SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION (EX in: USHORT ProcessorGroup) // 160 SYSTEM_INFORMATION_CLASS = 161  //col:1466
    SystemVmGenerationCountInformation SYSTEM_INFORMATION_CLASS = 162  //col:1467
    SystemTrustedPlatformModuleInformation // q: SYSTEM_TPM_INFORMATION SYSTEM_INFORMATION_CLASS = 163  //col:1468
    SystemKernelDebuggerFlags // SYSTEM_KERNEL_DEBUGGER_FLAGS SYSTEM_INFORMATION_CLASS = 164  //col:1469
    SystemCodeIntegrityPolicyInformation // q: SYSTEM_CODEINTEGRITYPOLICY_INFORMATION SYSTEM_INFORMATION_CLASS = 165  //col:1470
    SystemIsolatedUserModeInformation // q: SYSTEM_ISOLATED_USER_MODE_INFORMATION SYSTEM_INFORMATION_CLASS = 166  //col:1471
    SystemHardwareSecurityTestInterfaceResultsInformation SYSTEM_INFORMATION_CLASS = 167  //col:1472
    SystemSingleModuleInformation // q: SYSTEM_SINGLE_MODULE_INFORMATION SYSTEM_INFORMATION_CLASS = 168  //col:1473
    SystemAllowedCpuSetsInformation SYSTEM_INFORMATION_CLASS = 169  //col:1474
    SystemVsmProtectionInformation // q: SYSTEM_VSM_PROTECTION_INFORMATION (previously SystemDmaProtectionInformation) SYSTEM_INFORMATION_CLASS = 170  //col:1475
    SystemInterruptCpuSetsInformation // q: SYSTEM_INTERRUPT_CPU_SET_INFORMATION // 170 SYSTEM_INFORMATION_CLASS = 171  //col:1476
    SystemSecureBootPolicyFullInformation // q: SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION SYSTEM_INFORMATION_CLASS = 172  //col:1477
    SystemCodeIntegrityPolicyFullInformation SYSTEM_INFORMATION_CLASS = 173  //col:1478
    SystemAffinitizedInterruptProcessorInformation // (requires SeIncreaseBasePriorityPrivilege) SYSTEM_INFORMATION_CLASS = 174  //col:1479
    SystemRootSiloInformation // q: SYSTEM_ROOT_SILO_INFORMATION SYSTEM_INFORMATION_CLASS = 175  //col:1480
    SystemCpuSetInformation // q: SYSTEM_CPU_SET_INFORMATION // since THRESHOLD2 SYSTEM_INFORMATION_CLASS = 176  //col:1481
    SystemCpuSetTagInformation // q: SYSTEM_CPU_SET_TAG_INFORMATION SYSTEM_INFORMATION_CLASS = 177  //col:1482
    SystemWin32WerStartCallout SYSTEM_INFORMATION_CLASS = 178  //col:1483
    SystemSecureKernelProfileInformation // q: SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION SYSTEM_INFORMATION_CLASS = 179  //col:1484
    SystemCodeIntegrityPlatformManifestInformation // q: SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION // since REDSTONE SYSTEM_INFORMATION_CLASS = 180  //col:1485
    SystemInterruptSteeringInformation // SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT // 180 SYSTEM_INFORMATION_CLASS = 181  //col:1486
    SystemSupportedProcessorArchitectures // p: in opt: HANDLE out: SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION[] // NtQuerySystemInformationEx SYSTEM_INFORMATION_CLASS = 182  //col:1487
    SystemMemoryUsageInformation // q: SYSTEM_MEMORY_USAGE_INFORMATION SYSTEM_INFORMATION_CLASS = 183  //col:1488
    SystemCodeIntegrityCertificateInformation // q: SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION SYSTEM_INFORMATION_CLASS = 184  //col:1489
    SystemPhysicalMemoryInformation // q: SYSTEM_PHYSICAL_MEMORY_INFORMATION // since REDSTONE2 SYSTEM_INFORMATION_CLASS = 185  //col:1490
    SystemControlFlowTransition SYSTEM_INFORMATION_CLASS = 186  //col:1491
    SystemKernelDebuggingAllowed // s: ULONG SYSTEM_INFORMATION_CLASS = 187  //col:1492
    SystemActivityModerationExeState // SYSTEM_ACTIVITY_MODERATION_EXE_STATE SYSTEM_INFORMATION_CLASS = 188  //col:1493
    SystemActivityModerationUserSettings // SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS SYSTEM_INFORMATION_CLASS = 189  //col:1494
    SystemCodeIntegrityPoliciesFullInformation SYSTEM_INFORMATION_CLASS = 190  //col:1495
    SystemCodeIntegrityUnlockInformation // SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION // 190 SYSTEM_INFORMATION_CLASS = 191  //col:1496
    SystemIntegrityQuotaInformation SYSTEM_INFORMATION_CLASS = 192  //col:1497
    SystemFlushInformation // q: SYSTEM_FLUSH_INFORMATION SYSTEM_INFORMATION_CLASS = 193  //col:1498
    SystemProcessorIdleMaskInformation // q: ULONG_PTR[ActiveGroupCount] // since REDSTONE3 SYSTEM_INFORMATION_CLASS = 194  //col:1499
    SystemSecureDumpEncryptionInformation SYSTEM_INFORMATION_CLASS = 195  //col:1500
    SystemWriteConstraintInformation // SYSTEM_WRITE_CONSTRAINT_INFORMATION SYSTEM_INFORMATION_CLASS = 196  //col:1501
    SystemKernelVaShadowInformation // SYSTEM_KERNEL_VA_SHADOW_INFORMATION SYSTEM_INFORMATION_CLASS = 197  //col:1502
    SystemHypervisorSharedPageInformation // SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION // since REDSTONE4 SYSTEM_INFORMATION_CLASS = 198  //col:1503
    SystemFirmwareBootPerformanceInformation SYSTEM_INFORMATION_CLASS = 199  //col:1504
    SystemCodeIntegrityVerificationInformation // SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION SYSTEM_INFORMATION_CLASS = 200  //col:1505
    SystemFirmwarePartitionInformation // SYSTEM_FIRMWARE_PARTITION_INFORMATION // 200 SYSTEM_INFORMATION_CLASS = 201  //col:1506
    SystemSpeculationControlInformation // SYSTEM_SPECULATION_CONTROL_INFORMATION // (CVE-2017-5715) REDSTONE3 and above. SYSTEM_INFORMATION_CLASS = 202  //col:1507
    SystemDmaGuardPolicyInformation // SYSTEM_DMA_GUARD_POLICY_INFORMATION SYSTEM_INFORMATION_CLASS = 203  //col:1508
    SystemEnclaveLaunchControlInformation // SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION SYSTEM_INFORMATION_CLASS = 204  //col:1509
    SystemWorkloadAllowedCpuSetsInformation // SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION // since REDSTONE5 SYSTEM_INFORMATION_CLASS = 205  //col:1510
    SystemCodeIntegrityUnlockModeInformation SYSTEM_INFORMATION_CLASS = 206  //col:1511
    SystemLeapSecondInformation // SYSTEM_LEAP_SECOND_INFORMATION SYSTEM_INFORMATION_CLASS = 207  //col:1512
    SystemFlags2Information // q: SYSTEM_FLAGS_INFORMATION SYSTEM_INFORMATION_CLASS = 208  //col:1513
    SystemSecurityModelInformation // SYSTEM_SECURITY_MODEL_INFORMATION // since 19H1 SYSTEM_INFORMATION_CLASS = 209  //col:1514
    SystemCodeIntegritySyntheticCacheInformation SYSTEM_INFORMATION_CLASS = 210  //col:1515
    SystemFeatureConfigurationInformation // SYSTEM_FEATURE_CONFIGURATION_INFORMATION // since 20H1 // 210 SYSTEM_INFORMATION_CLASS = 211  //col:1516
    SystemFeatureConfigurationSectionInformation // SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION SYSTEM_INFORMATION_CLASS = 212  //col:1517
    SystemFeatureUsageSubscriptionInformation // SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS SYSTEM_INFORMATION_CLASS = 213  //col:1518
    SystemSecureSpeculationControlInformation // SECURE_SPECULATION_CONTROL_INFORMATION SYSTEM_INFORMATION_CLASS = 214  //col:1519
    SystemSpacesBootInformation // since 20H2 SYSTEM_INFORMATION_CLASS = 215  //col:1520
    SystemFwRamdiskInformation // SYSTEM_FIRMWARE_RAMDISK_INFORMATION SYSTEM_INFORMATION_CLASS = 216  //col:1521
    SystemWheaIpmiHardwareInformation SYSTEM_INFORMATION_CLASS = 217  //col:1522
    SystemDifSetRuleClassInformation SYSTEM_INFORMATION_CLASS = 218  //col:1523
    SystemDifClearRuleClassInformation SYSTEM_INFORMATION_CLASS = 219  //col:1524
    SystemDifApplyPluginVerificationOnDriver SYSTEM_INFORMATION_CLASS = 220  //col:1525
    SystemDifRemovePluginVerificationOnDriver // 220 SYSTEM_INFORMATION_CLASS = 221  //col:1526
    SystemShadowStackInformation // SYSTEM_SHADOW_STACK_INFORMATION SYSTEM_INFORMATION_CLASS = 222  //col:1527
    SystemBuildVersionInformation // SYSTEM_BUILD_VERSION_INFORMATION SYSTEM_INFORMATION_CLASS = 223  //col:1528
    SystemPoolLimitInformation // SYSTEM_POOL_LIMIT_INFORMATION SYSTEM_INFORMATION_CLASS = 224  //col:1529
    SystemCodeIntegrityAddDynamicStore SYSTEM_INFORMATION_CLASS = 225  //col:1530
    SystemCodeIntegrityClearDynamicStores SYSTEM_INFORMATION_CLASS = 226  //col:1531
    SystemDifPoolTrackingInformation SYSTEM_INFORMATION_CLASS = 227  //col:1532
    SystemPoolZeroingInformation // SYSTEM_POOL_ZEROING_INFORMATION SYSTEM_INFORMATION_CLASS = 228  //col:1533
    SystemDpcWatchdogInformation SYSTEM_INFORMATION_CLASS = 229  //col:1534
    SystemDpcWatchdogInformation2 SYSTEM_INFORMATION_CLASS = 230  //col:1535
    SystemSupportedProcessorArchitectures2 // q: in opt: HANDLE out: SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION[] // NtQuerySystemInformationEx  // 230 SYSTEM_INFORMATION_CLASS = 231  //col:1536
    SystemSingleProcessorRelationshipInformation // q: SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX // (EX in: PROCESSOR_NUMBER Processor) SYSTEM_INFORMATION_CLASS = 232  //col:1537
    SystemXfgCheckFailureInformation SYSTEM_INFORMATION_CLASS = 233  //col:1538
    SystemIommuStateInformation // SYSTEM_IOMMU_STATE_INFORMATION // since 22H1 SYSTEM_INFORMATION_CLASS = 234  //col:1539
    SystemHypervisorMinrootInformation // SYSTEM_HYPERVISOR_MINROOT_INFORMATION SYSTEM_INFORMATION_CLASS = 235  //col:1540
    SystemHypervisorBootPagesInformation // SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION SYSTEM_INFORMATION_CLASS = 236  //col:1541
    SystemPointerAuthInformation // SYSTEM_POINTER_AUTH_INFORMATION SYSTEM_INFORMATION_CLASS = 237  //col:1542
    SystemSecureKernelDebuggerInformation SYSTEM_INFORMATION_CLASS = 238  //col:1543
    SystemOriginalImageFeatureInformation SYSTEM_INFORMATION_CLASS = 239  //col:1544
    MaxSystemInfoClass SYSTEM_INFORMATION_CLASS = 240  //col:1545
)


type     EventTraceKernelVersionInformation // EVENT_TRACE_VERSION_INFORMATION uint32
const(
    EventTraceKernelVersionInformation // EVENT_TRACE_VERSION_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 1  //col:2011
    EventTraceGroupMaskInformation // EVENT_TRACE_GROUPMASK_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 2  //col:2012
    EventTracePerformanceInformation // EVENT_TRACE_PERFORMANCE_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 3  //col:2013
    EventTraceTimeProfileInformation // EVENT_TRACE_TIME_PROFILE_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 4  //col:2014
    EventTraceSessionSecurityInformation // EVENT_TRACE_SESSION_SECURITY_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 5  //col:2015
    EventTraceSpinlockInformation // EVENT_TRACE_SPINLOCK_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 6  //col:2016
    EventTraceStackTracingInformation // EVENT_TRACE_SYSTEM_EVENT_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 7  //col:2017
    EventTraceExecutiveResourceInformation // EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 8  //col:2018
    EventTraceHeapTracingInformation // EVENT_TRACE_HEAP_TRACING_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 9  //col:2019
    EventTraceHeapSummaryTracingInformation // EVENT_TRACE_HEAP_TRACING_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 10  //col:2020
    EventTracePoolTagFilterInformation // EVENT_TRACE_TAG_FILTER_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 11  //col:2021
    EventTracePebsTracingInformation // EVENT_TRACE_SYSTEM_EVENT_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 12  //col:2022
    EventTraceProfileConfigInformation // EVENT_TRACE_PROFILE_COUNTER_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 13  //col:2023
    EventTraceProfileSourceListInformation // EVENT_TRACE_PROFILE_LIST_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 14  //col:2024
    EventTraceProfileEventListInformation // EVENT_TRACE_SYSTEM_EVENT_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 15  //col:2025
    EventTraceProfileCounterListInformation // EVENT_TRACE_PROFILE_COUNTER_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 16  //col:2026
    EventTraceStackCachingInformation // EVENT_TRACE_STACK_CACHING_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 17  //col:2027
    EventTraceObjectTypeFilterInformation // EVENT_TRACE_TAG_FILTER_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 18  //col:2028
    EventTraceSoftRestartInformation // EVENT_TRACE_SOFT_RESTART_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 19  //col:2029
    EventTraceLastBranchConfigurationInformation // REDSTONE3 EVENT_TRACE_INFORMATION_CLASS = 20  //col:2030
    EventTraceLastBranchEventListInformation EVENT_TRACE_INFORMATION_CLASS = 21  //col:2031
    EventTraceProfileSourceAddInformation // EVENT_TRACE_PROFILE_ADD_INFORMATION // REDSTONE4 EVENT_TRACE_INFORMATION_CLASS = 22  //col:2032
    EventTraceProfileSourceRemoveInformation // EVENT_TRACE_PROFILE_REMOVE_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 23  //col:2033
    EventTraceProcessorTraceConfigurationInformation EVENT_TRACE_INFORMATION_CLASS = 24  //col:2034
    EventTraceProcessorTraceEventListInformation EVENT_TRACE_INFORMATION_CLASS = 25  //col:2035
    EventTraceCoverageSamplerInformation // EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION EVENT_TRACE_INFORMATION_CLASS = 26  //col:2036
    EventTraceUnifiedStackCachingInformation // sicne 21H1 EVENT_TRACE_INFORMATION_CLASS = 27  //col:2037
    MaxEventTraceInfoClass EVENT_TRACE_INFORMATION_CLASS = 28  //col:2038
)


type     SystemCrashDumpDisable uint32
const(
    SystemCrashDumpDisable SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS = 1  //col:2337
    SystemCrashDumpReconfigure SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS = 2  //col:2338
    SystemCrashDumpInitializationComplete SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS = 3  //col:2339
)


type     WdActionSetTimeoutValue uint32
const(
    WdActionSetTimeoutValue WATCHDOG_HANDLER_ACTION  = 1  //col:2634
    WdActionQueryTimeoutValue WATCHDOG_HANDLER_ACTION  = 2  //col:2635
    WdActionResetTimer WATCHDOG_HANDLER_ACTION  = 3  //col:2636
    WdActionStopTimer WATCHDOG_HANDLER_ACTION  = 4  //col:2637
    WdActionStartTimer WATCHDOG_HANDLER_ACTION  = 5  //col:2638
    WdActionSetTriggerAction WATCHDOG_HANDLER_ACTION  = 6  //col:2639
    WdActionQueryTriggerAction WATCHDOG_HANDLER_ACTION  = 7  //col:2640
    WdActionQueryState WATCHDOG_HANDLER_ACTION  = 8  //col:2641
)


type     WdInfoTimeoutValue = 0 uint32
const(
    WdInfoTimeoutValue  WATCHDOG_INFORMATION_CLASS =  0  //col:2655
    WdInfoResetTimer  WATCHDOG_INFORMATION_CLASS =  1  //col:2656
    WdInfoStopTimer  WATCHDOG_INFORMATION_CLASS =  2  //col:2657
    WdInfoStartTimer  WATCHDOG_INFORMATION_CLASS =  3  //col:2658
    WdInfoTriggerAction  WATCHDOG_INFORMATION_CLASS =  4  //col:2659
    WdInfoState  WATCHDOG_INFORMATION_CLASS =  5  //col:2660
    WdInfoTriggerReset  WATCHDOG_INFORMATION_CLASS =  6  //col:2661
    WdInfoNop  WATCHDOG_INFORMATION_CLASS =  7  //col:2662
    WdInfoGeneratedLastReset  WATCHDOG_INFORMATION_CLASS =  8  //col:2663
    WdInfoInvalid  WATCHDOG_INFORMATION_CLASS =  9  //col:2664
)


type     SystemFirmwareTableEnumerate uint32
const(
    SystemFirmwareTableEnumerate SYSTEM_FIRMWARE_TABLE_ACTION = 1  //col:2678
    SystemFirmwareTableGet SYSTEM_FIRMWARE_TABLE_ACTION = 2  //col:2679
    SystemFirmwareTableMax SYSTEM_FIRMWARE_TABLE_ACTION = 3  //col:2680
)


type     MemoryCaptureAccessedBits uint32
const(
    MemoryCaptureAccessedBits SYSTEM_MEMORY_LIST_COMMAND = 1  //col:2726
    MemoryCaptureAndResetAccessedBits SYSTEM_MEMORY_LIST_COMMAND = 2  //col:2727
    MemoryEmptyWorkingSets SYSTEM_MEMORY_LIST_COMMAND = 3  //col:2728
    MemoryFlushModifiedList SYSTEM_MEMORY_LIST_COMMAND = 4  //col:2729
    MemoryPurgeStandbyList SYSTEM_MEMORY_LIST_COMMAND = 5  //col:2730
    MemoryPurgeLowPriorityStandbyList SYSTEM_MEMORY_LIST_COMMAND = 6  //col:2731
    MemoryCommandMax SYSTEM_MEMORY_LIST_COMMAND = 7  //col:2732
)


type     CoverageAllModules = 0 uint32
const(
    CoverageAllModules  COVERAGE_REQUEST_CODES =  0  //col:2832
    CoverageSearchByHash  COVERAGE_REQUEST_CODES =  1  //col:2833
    CoverageSearchByName  COVERAGE_REQUEST_CODES =  2  //col:2834
)


type     SystemVaTypeAll uint32
const(
    SystemVaTypeAll SYSTEM_VA_TYPE = 1  //col:2978
    SystemVaTypeNonPagedPool SYSTEM_VA_TYPE = 2  //col:2979
    SystemVaTypePagedPool SYSTEM_VA_TYPE = 3  //col:2980
    SystemVaTypeSystemCache SYSTEM_VA_TYPE = 4  //col:2981
    SystemVaTypeSystemPtes SYSTEM_VA_TYPE = 5  //col:2982
    SystemVaTypeSessionSpace SYSTEM_VA_TYPE = 6  //col:2983
    SystemVaTypeMax SYSTEM_VA_TYPE = 7  //col:2984
)


type     StorePageRequest = 1 uint32
const(
    StorePageRequest  STORE_INFORMATION_CLASS =  1  //col:2999
    StoreStatsRequest  STORE_INFORMATION_CLASS =  2 // q: SM_STATS_REQUEST // SmProcessStatsRequest  //col:3000
    StoreCreateRequest  STORE_INFORMATION_CLASS =  3 // s: SM_CREATE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3001
    StoreDeleteRequest  STORE_INFORMATION_CLASS =  4 // s: SM_DELETE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3002
    StoreListRequest  STORE_INFORMATION_CLASS =  5 // q: SM_STORE_LIST_REQUEST / SM_STORE_LIST_REQUEST_EX // SmProcessListRequest  //col:3003
    Available1  STORE_INFORMATION_CLASS =  6  //col:3004
    StoreEmptyRequest  STORE_INFORMATION_CLASS =  7  //col:3005
    CacheListRequest  STORE_INFORMATION_CLASS =  8 // q: SMC_CACHE_LIST_REQUEST // SmcProcessListRequest  //col:3006
    CacheCreateRequest  STORE_INFORMATION_CLASS =  9 // s: SMC_CACHE_CREATE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3007
    CacheDeleteRequest  STORE_INFORMATION_CLASS =  10 // s: SMC_CACHE_DELETE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3008
    CacheStoreCreateRequest  STORE_INFORMATION_CLASS =  11 // s: SMC_STORE_CREATE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3009
    CacheStoreDeleteRequest  STORE_INFORMATION_CLASS =  12 // s: SMC_STORE_DELETE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3010
    CacheStatsRequest  STORE_INFORMATION_CLASS =  13 // q: SMC_CACHE_STATS_REQUEST // SmcProcessStatsRequest  //col:3011
    Available2  STORE_INFORMATION_CLASS =  14  //col:3012
    RegistrationRequest  STORE_INFORMATION_CLASS =  15 // q: SM_REGISTRATION_REQUEST (requires SeProfileSingleProcessPrivilege) // SmProcessRegistrationRequest  //col:3013
    GlobalCacheStatsRequest  STORE_INFORMATION_CLASS =  16  //col:3014
    StoreResizeRequest  STORE_INFORMATION_CLASS =  17 // s: SM_STORE_RESIZE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3015
    CacheStoreResizeRequest  STORE_INFORMATION_CLASS =  18 // s: SMC_STORE_RESIZE_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3016
    SmConfigRequest  STORE_INFORMATION_CLASS =  19 // s: SM_CONFIG_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3017
    StoreHighMemoryPriorityRequest  STORE_INFORMATION_CLASS =  20 // s: SM_STORE_HIGH_MEM_PRIORITY_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3018
    SystemStoreTrimRequest  STORE_INFORMATION_CLASS =  21 // s: SM_SYSTEM_STORE_TRIM_REQUEST (requires SeProfileSingleProcessPrivilege)  //col:3019
    MemCompressionInfoRequest  STORE_INFORMATION_CLASS =  22  // q: SM_MEM_COMPRESSION_INFO_REQUEST // SmProcessCompressionInfoRequest  //col:3020
    ProcessStoreInfoRequest  STORE_INFORMATION_CLASS =  23 // SmProcessProcessStoreInfoRequest  //col:3021
    StoreInformationMax STORE_INFORMATION_CLASS = 24  //col:3022
)


type     StStatsLevelBasic = 0 uint32
const(
    StStatsLevelBasic  ST_STATS_LEVEL =  0  //col:3041
    StStatsLevelIoStats  ST_STATS_LEVEL =  1  //col:3042
    StStatsLevelRegionSpace  ST_STATS_LEVEL =  2 // requires SeProfileSingleProcessPrivilege  //col:3043
    StStatsLevelSpaceBitmap  ST_STATS_LEVEL =  3 // requires SeProfileSingleProcessPrivilege  //col:3044
    StStatsLevelMax  ST_STATS_LEVEL =  4  //col:3045
)


type     StoreTypeInMemory=0 uint32
const(
    StoreTypeInMemory SM_STORE_TYPE = 0  //col:3146
    StoreTypeFile SM_STORE_TYPE = 1  //col:3147
    StoreTypeMax SM_STORE_TYPE = 2  //col:3148
)


type     SmStoreManagerTypePhysical=0 uint32
const(
    SmStoreManagerTypePhysical SM_STORE_MANAGER_TYPE = 0  //col:3300
    SmStoreManagerTypeVirtual SM_STORE_MANAGER_TYPE = 1  //col:3301
    SmStoreManagerTypeMax SM_STORE_MANAGER_TYPE = 2  //col:3302
)


type     SmConfigDirtyPageCompression = 0 uint32
const(
    SmConfigDirtyPageCompression  SM_CONFIG_TYPE =  0  //col:3395
    SmConfigAsyncInswap  SM_CONFIG_TYPE =  1  //col:3396
    SmConfigPrefetchSeekThreshold  SM_CONFIG_TYPE =  2  //col:3397
    SmConfigTypeMax  SM_CONFIG_TYPE =  3  //col:3398
)


type     TpmBootEntropyStructureUninitialized uint32
const(
    TpmBootEntropyStructureUninitialized TPM_BOOT_ENTROPY_RESULT_CODE = 1  //col:3507
    TpmBootEntropyDisabledByPolicy TPM_BOOT_ENTROPY_RESULT_CODE = 2  //col:3508
    TpmBootEntropyNoTpmFound TPM_BOOT_ENTROPY_RESULT_CODE = 3  //col:3509
    TpmBootEntropyTpmError TPM_BOOT_ENTROPY_RESULT_CODE = 4  //col:3510
    TpmBootEntropySuccess TPM_BOOT_ENTROPY_RESULT_CODE = 5  //col:3511
)


type     SystemPixelFormatUnknown uint32
const(
    SystemPixelFormatUnknown SYSTEM_PIXEL_FORMAT = 1  //col:3602
    SystemPixelFormatR8G8B8 SYSTEM_PIXEL_FORMAT = 2  //col:3603
    SystemPixelFormatR8G8B8X8 SYSTEM_PIXEL_FORMAT = 3  //col:3604
    SystemPixelFormatB8G8R8 SYSTEM_PIXEL_FORMAT = 4  //col:3605
    SystemPixelFormatB8G8R8X8 SYSTEM_PIXEL_FORMAT = 5  //col:3606
)


type     SystemProcessClassificationNormal uint32
const(
    SystemProcessClassificationNormal SYSTEM_PROCESS_CLASSIFICATION = 1  //col:3952
    SystemProcessClassificationSystem SYSTEM_PROCESS_CLASSIFICATION = 2  //col:3953
    SystemProcessClassificationSecureSystem SYSTEM_PROCESS_CLASSIFICATION = 3  //col:3954
    SystemProcessClassificationMemCompression SYSTEM_PROCESS_CLASSIFICATION = 4  //col:3955
    SystemProcessClassificationRegistry // REDSTONE4 SYSTEM_PROCESS_CLASSIFICATION = 5  //col:3956
    SystemProcessClassificationMaximum SYSTEM_PROCESS_CLASSIFICATION = 6  //col:3957
)


type     SystemActivityModerationStateSystemManaged uint32
const(
    SystemActivityModerationStateSystemManaged SYSTEM_ACTIVITY_MODERATION_STATE = 1  //col:4258
    SystemActivityModerationStateUserManagedAllowThrottling SYSTEM_ACTIVITY_MODERATION_STATE = 2  //col:4259
    SystemActivityModerationStateUserManagedDisableThrottling SYSTEM_ACTIVITY_MODERATION_STATE = 3  //col:4260
    MaxSystemActivityModerationState SYSTEM_ACTIVITY_MODERATION_STATE = 4  //col:4261
)


type     SystemActivityModerationAppTypeClassic uint32
const(
    SystemActivityModerationAppTypeClassic SYSTEM_ACTIVITY_MODERATION_APP_TYPE = 1  //col:4273
    SystemActivityModerationAppTypePackaged SYSTEM_ACTIVITY_MODERATION_APP_TYPE = 2  //col:4274
    MaxSystemActivityModerationAppType SYSTEM_ACTIVITY_MODERATION_APP_TYPE = 3  //col:4275
)


type     IommuStateBlock uint32
const(
    IommuStateBlock SYSTEM_IOMMU_STATE = 1  //col:4594
    IommuStateUnblock SYSTEM_IOMMU_STATE = 2  //col:4595
)


type     SysDbgQueryModuleInformation uint32
const(
    SysDbgQueryModuleInformation SYSDBG_COMMAND = 1  //col:4694
    SysDbgQueryTraceInformation SYSDBG_COMMAND = 2  //col:4695
    SysDbgSetTracepoint SYSDBG_COMMAND = 3  //col:4696
    SysDbgSetSpecialCall // PVOID SYSDBG_COMMAND = 4  //col:4697
    SysDbgClearSpecialCalls // void SYSDBG_COMMAND = 5  //col:4698
    SysDbgQuerySpecialCalls SYSDBG_COMMAND = 6  //col:4699
    SysDbgBreakPoint SYSDBG_COMMAND = 7  //col:4700
    SysDbgQueryVersion // DBGKD_GET_VERSION64 SYSDBG_COMMAND = 8  //col:4701
    SysDbgReadVirtual // SYSDBG_VIRTUAL SYSDBG_COMMAND = 9  //col:4702
    SysDbgWriteVirtual // SYSDBG_VIRTUAL SYSDBG_COMMAND = 10  //col:4703
    SysDbgReadPhysical // SYSDBG_PHYSICAL // 10 SYSDBG_COMMAND = 11  //col:4704
    SysDbgWritePhysical // SYSDBG_PHYSICAL SYSDBG_COMMAND = 12  //col:4705
    SysDbgReadControlSpace // SYSDBG_CONTROL_SPACE SYSDBG_COMMAND = 13  //col:4706
    SysDbgWriteControlSpace // SYSDBG_CONTROL_SPACE SYSDBG_COMMAND = 14  //col:4707
    SysDbgReadIoSpace // SYSDBG_IO_SPACE SYSDBG_COMMAND = 15  //col:4708
    SysDbgWriteIoSpace // SYSDBG_IO_SPACE SYSDBG_COMMAND = 16  //col:4709
    SysDbgReadMsr // SYSDBG_MSR SYSDBG_COMMAND = 17  //col:4710
    SysDbgWriteMsr // SYSDBG_MSR SYSDBG_COMMAND = 18  //col:4711
    SysDbgReadBusData // SYSDBG_BUS_DATA SYSDBG_COMMAND = 19  //col:4712
    SysDbgWriteBusData // SYSDBG_BUS_DATA SYSDBG_COMMAND = 20  //col:4713
    SysDbgCheckLowMemory // 20 SYSDBG_COMMAND = 21  //col:4714
    SysDbgEnableKernelDebugger SYSDBG_COMMAND = 22  //col:4715
    SysDbgDisableKernelDebugger SYSDBG_COMMAND = 23  //col:4716
    SysDbgGetAutoKdEnable SYSDBG_COMMAND = 24  //col:4717
    SysDbgSetAutoKdEnable SYSDBG_COMMAND = 25  //col:4718
    SysDbgGetPrintBufferSize SYSDBG_COMMAND = 26  //col:4719
    SysDbgSetPrintBufferSize SYSDBG_COMMAND = 27  //col:4720
    SysDbgGetKdUmExceptionEnable SYSDBG_COMMAND = 28  //col:4721
    SysDbgSetKdUmExceptionEnable SYSDBG_COMMAND = 29  //col:4722
    SysDbgGetTriageDump // SYSDBG_TRIAGE_DUMP SYSDBG_COMMAND = 30  //col:4723
    SysDbgGetKdBlockEnable // 30 SYSDBG_COMMAND = 31  //col:4724
    SysDbgSetKdBlockEnable SYSDBG_COMMAND = 32  //col:4725
    SysDbgRegisterForUmBreakInfo SYSDBG_COMMAND = 33  //col:4726
    SysDbgGetUmBreakPid SYSDBG_COMMAND = 34  //col:4727
    SysDbgClearUmBreakPid SYSDBG_COMMAND = 35  //col:4728
    SysDbgGetUmAttachPid SYSDBG_COMMAND = 36  //col:4729
    SysDbgClearUmAttachPid SYSDBG_COMMAND = 37  //col:4730
    SysDbgGetLiveKernelDump // SYSDBG_LIVEDUMP_CONTROL SYSDBG_COMMAND = 38  //col:4731
    SysDbgKdPullRemoteFile // SYSDBG_KD_PULL_REMOTE_FILE SYSDBG_COMMAND = 39  //col:4732
    SysDbgMaxInfoClass SYSDBG_COMMAND = 40  //col:4733
)


type     OptionAbortRetryIgnore uint32
const(
    OptionAbortRetryIgnore HARDERROR_RESPONSE_OPTION = 1  //col:4887
    OptionOk HARDERROR_RESPONSE_OPTION = 2  //col:4888
    OptionOkCancel HARDERROR_RESPONSE_OPTION = 3  //col:4889
    OptionRetryCancel HARDERROR_RESPONSE_OPTION = 4  //col:4890
    OptionYesNo HARDERROR_RESPONSE_OPTION = 5  //col:4891
    OptionYesNoCancel HARDERROR_RESPONSE_OPTION = 6  //col:4892
    OptionShutdownSystem HARDERROR_RESPONSE_OPTION = 7  //col:4893
    OptionOkNoWait HARDERROR_RESPONSE_OPTION = 8  //col:4894
    OptionCancelTryContinue HARDERROR_RESPONSE_OPTION = 9  //col:4895
)


type     ResponseReturnToCaller uint32
const(
    ResponseReturnToCaller HARDERROR_RESPONSE = 1  //col:4900
    ResponseNotHandled HARDERROR_RESPONSE = 2  //col:4901
    ResponseAbort HARDERROR_RESPONSE = 3  //col:4902
    ResponseCancel HARDERROR_RESPONSE = 4  //col:4903
    ResponseIgnore HARDERROR_RESPONSE = 5  //col:4904
    ResponseNo HARDERROR_RESPONSE = 6  //col:4905
    ResponseOk HARDERROR_RESPONSE = 7  //col:4906
    ResponseRetry HARDERROR_RESPONSE = 8  //col:4907
    ResponseYes HARDERROR_RESPONSE = 9  //col:4908
    ResponseTryAgain HARDERROR_RESPONSE = 10  //col:4909
    ResponseContinue HARDERROR_RESPONSE = 11  //col:4910
)


type     StandardDesign uint32
const(
    StandardDesign ALTERNATIVE_ARCHITECTURE_TYPE = 1  //col:4931
    NEC98x86 ALTERNATIVE_ARCHITECTURE_TYPE = 2  //col:4932
    EndAlternatives ALTERNATIVE_ARCHITECTURE_TYPE = 3  //col:4933
)


type     AtomBasicInformation uint32
const(
    AtomBasicInformation ATOM_INFORMATION_CLASS = 1  //col:5402
    AtomTableInformation ATOM_INFORMATION_CLASS = 2  //col:5403
)


type     ShutdownNoReboot uint32
const(
    ShutdownNoReboot SHUTDOWN_ACTION = 1  //col:5535
    ShutdownReboot SHUTDOWN_ACTION = 2  //col:5536
    ShutdownPowerOff SHUTDOWN_ACTION = 3  //col:5537
    ShutdownRebootForRecovery // since WIN11 SHUTDOWN_ACTION = 4  //col:5538
)



type (
Ntexapi interface{
 * Attribution 4.0 International ()(ok bool)//col:102
#if ()(ok bool)//col:276
#if ()(ok bool)//col:310
NtCreateEvent()(ok bool)//col:465
NtCreateMutant()(ok bool)//col:534
NtCreateSemaphore()(ok bool)//col:599
typedef VOID ()(ok bool)//col:617
#if ()(ok bool)//col:631
NtCreateTimer()(ok bool)//col:722
#if ()(ok bool)//col:891
#if ()(ok bool)//col:1095
#if ()(ok bool)//col:1198
NtWaitForWorkViaWorkerFactory()(ok bool)//col:1546
#define PERF_MASK_INDEX ()(ok bool)//col:2189
typedef NTSTATUS ()(ok bool)//col:2651
#if ()(ok bool)//col:2681
#if ()(ok bool)//col:2707
    VOID ()(ok bool)//col:3711
#if !defined()(ok bool)//col:4225
#if ()(ok bool)//col:4734
NtSystemDebugControl()(ok bool)//col:4896
NtRaiseHardError()(ok bool)//col:4934
C_ASSERT()(ok bool)//col:5170
FORCEINLINE ULONG NtGetTickCount()(ok bool)//col:5197
FORCEINLINE ULONGLONG NtGetTickCount64()(ok bool)//col:5204
FORCEINLINE ULONG NtGetTickCount()(ok bool)//col:5209
NtQueryDefaultLocale()(ok bool)//col:5404
NtQueryInformationAtom()(ok bool)//col:5539
}
)

func NewNtexapi() { return & ntexapi{} }

func (n *ntexapi) * Attribution 4.0 International ()(ok bool){//col:102
/* * Attribution 4.0 International (CC BY 4.0) license. 
 * 
 * You must give appropriate credit, provide a link to the license, and 
 * indicate if changes were made. You may do so in any reasonable manner, but 
 * not in any way that suggests the licensor endorses you or your use.
#ifndef _NTEXAPI_H
#define _NTEXAPI_H
#include <ntkeapi.h>
#if (PHNT_MODE != PHNT_MODE_KERNEL)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDelayExecution(
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER DelayInterval
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySystemEnvironmentValue(
    _In_ PUNICODE_STRING VariableName,
    _Out_writes_bytes_(ValueLength) PWSTR VariableValue,
    _In_ USHORT ValueLength,
    _Out_opt_ PUSHORT ReturnLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetSystemEnvironmentValue(
    _In_ PUNICODE_STRING VariableName,
    _In_ PUNICODE_STRING VariableValue
    );
#define EFI_VARIABLE_NON_VOLATILE 0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS 0x00000004
#define EFI_VARIABLE_HARDWARE_ERROR_RECORD 0x00000008
#define EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS 0x00000010
#define EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS 0x00000020
#define EFI_VARIABLE_APPEND_WRITE 0x00000040
#define EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS 0x00000080
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySystemEnvironmentValueEx(
    _In_ PUNICODE_STRING VariableName,
    _In_ LPGUID VendorGuid,
    _Out_writes_bytes_opt_(*ValueLength) PVOID Value,
    _Inout_ PULONG ValueLength,
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetSystemEnvironmentValueEx(
    _In_ PUNICODE_STRING VariableName,
    _In_ LPGUID VendorGuid,
    _In_reads_bytes_opt_(ValueLength) PVOID Value,
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtEnumerateSystemEnvironmentValuesEx(
    _In_ ULONG InformationClass,
    _Out_ PVOID Buffer,
    _Inout_ PULONG BufferLength
    );
typedef struct _BOOT_ENTRY
{
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG Attributes;
    ULONG FriendlyNameOffset;
    ULONG BootFilePathOffset;
    ULONG OsOptionsLength;
    UCHAR OsOptions[1];
} BOOT_ENTRY, *PBOOT_ENTRY;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:276
/*#if (PHNT_VERSION >= PHNT_WINXP)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAddBootEntry(
    _In_ PBOOT_ENTRY BootEntry,
    _Out_opt_ PULONG Id
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteBootEntry(
    _In_ ULONG Id
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtModifyBootEntry(
    _In_ PBOOT_ENTRY BootEntry
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtEnumerateBootEntries(
    _Out_writes_bytes_opt_(*BufferLength) PVOID Buffer,
    _Inout_ PULONG BufferLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryBootEntryOrder(
    _Out_writes_opt_(*Count) PULONG Ids,
    _Inout_ PULONG Count
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetBootEntryOrder(
    _In_reads_(Count) PULONG Ids,
    _In_ ULONG Count
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryBootOptions(
    _Out_writes_bytes_opt_(*BootOptionsLength) PBOOT_OPTIONS BootOptions,
    _Inout_ PULONG BootOptionsLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetBootOptions(
    _In_ PBOOT_OPTIONS BootOptions,
    _In_ ULONG FieldsToChange
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtTranslateFilePath(
    _In_ PFILE_PATH InputFilePath,
    _In_ ULONG OutputType,
    _Out_writes_bytes_opt_(*OutputFilePathLength) PFILE_PATH OutputFilePath,
    _Inout_opt_ PULONG OutputFilePathLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAddDriverEntry(
    _In_ PEFI_DRIVER_ENTRY DriverEntry,
    _Out_opt_ PULONG Id
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteDriverEntry(
    _In_ ULONG Id
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtModifyDriverEntry(
    _In_ PEFI_DRIVER_ENTRY DriverEntry
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtEnumerateDriverEntries(
    _Out_writes_bytes_opt_(*BufferLength) PVOID Buffer,
    _Inout_ PULONG BufferLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryDriverEntryOrder(
    _Out_writes_opt_(*Count) PULONG Ids,
    _Inout_ PULONG Count
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetDriverEntryOrder(
    _In_reads_(Count) PULONG Ids,
    _In_ ULONG Count
    );
#endif
typedef enum _FILTER_BOOT_OPTION_OPERATION
{
    FilterBootOptionOperationOpenSystemStore,
    FilterBootOptionOperationSetElement,
    FilterBootOptionOperationDeleteElement,
    FilterBootOptionOperationMax
} FILTER_BOOT_OPTION_OPERATION;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:310
/*#if (PHNT_VERSION >= PHNT_WIN8)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFilterBootOption(
    _In_ FILTER_BOOT_OPTION_OPERATION FilterOperation,
    _In_ ULONG ObjectType,
    _In_ ULONG ElementType,
    _In_reads_bytes_opt_(DataSize) PVOID Data,
    _In_ ULONG DataSize
    );
#endif
#ifndef EVENT_QUERY_STATE
#define EVENT_QUERY_STATE 0x0001
#endif
#ifndef EVENT_MODIFY_STATE
#define EVENT_MODIFY_STATE 0x0002
#endif
#ifndef EVENT_ALL_ACCESS
#define EVENT_ALL_ACCESS (EVENT_QUERY_STATE|EVENT_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE)
#endif
typedef enum _EVENT_INFORMATION_CLASS
{
    EventBasicInformation
} EVENT_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)NtCreateEvent()(ok bool){//col:465
/*NtCreateEvent(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ EVENT_TYPE EventType,
    _In_ BOOLEAN InitialState
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenEvent(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PLONG PreviousState
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetEventBoostPriority(
    _In_ HANDLE EventHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtClearEvent(
    _In_ HANDLE EventHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtResetEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PLONG PreviousState
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtPulseEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PLONG PreviousState
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryEvent(
    _In_ HANDLE EventHandle,
    _In_ EVENT_INFORMATION_CLASS EventInformationClass,
    _Out_writes_bytes_(EventInformationLength) PVOID EventInformation,
    _In_ ULONG EventInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#define EVENT_PAIR_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateEventPair(
    _Out_ PHANDLE EventPairHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenEventPair(
    _Out_ PHANDLE EventPairHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetLowEventPair(
    _In_ HANDLE EventPairHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetHighEventPair(
    _In_ HANDLE EventPairHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWaitLowEventPair(
    _In_ HANDLE EventPairHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWaitHighEventPair(
    _In_ HANDLE EventPairHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetLowWaitHighEventPair(
    _In_ HANDLE EventPairHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetHighWaitLowEventPair(
    _In_ HANDLE EventPairHandle
    );
#ifndef MUTANT_QUERY_STATE
#define MUTANT_QUERY_STATE 0x0001
#endif
#ifndef MUTANT_ALL_ACCESS
#define MUTANT_ALL_ACCESS (MUTANT_QUERY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE)
#endif
typedef enum _MUTANT_INFORMATION_CLASS
{
} MUTANT_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)NtCreateMutant()(ok bool){//col:534
/*NtCreateMutant(
    _Out_ PHANDLE MutantHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ BOOLEAN InitialOwner
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenMutant(
    _Out_ PHANDLE MutantHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReleaseMutant(
    _In_ HANDLE MutantHandle,
    _Out_opt_ PLONG PreviousCount
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryMutant(
    _In_ HANDLE MutantHandle,
    _In_ MUTANT_INFORMATION_CLASS MutantInformationClass,
    _Out_writes_bytes_(MutantInformationLength) PVOID MutantInformation,
    _In_ ULONG MutantInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#ifndef SEMAPHORE_QUERY_STATE
#define SEMAPHORE_QUERY_STATE 0x0001
#endif
#ifndef SEMAPHORE_MODIFY_STATE
#define SEMAPHORE_MODIFY_STATE 0x0002
#endif
#ifndef SEMAPHORE_ALL_ACCESS
#define SEMAPHORE_ALL_ACCESS (SEMAPHORE_QUERY_STATE|SEMAPHORE_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE)
#endif
typedef enum _SEMAPHORE_INFORMATION_CLASS
{
    SemaphoreBasicInformation
} SEMAPHORE_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)NtCreateSemaphore()(ok bool){//col:599
/*NtCreateSemaphore(
    _Out_ PHANDLE SemaphoreHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ LONG InitialCount,
    _In_ LONG MaximumCount
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenSemaphore(
    _Out_ PHANDLE SemaphoreHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReleaseSemaphore(
    _In_ HANDLE SemaphoreHandle,
    _In_ LONG ReleaseCount,
    _Out_opt_ PLONG PreviousCount
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySemaphore(
    _In_ HANDLE SemaphoreHandle,
    _In_ SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
    _Out_writes_bytes_(SemaphoreInformationLength) PVOID SemaphoreInformation,
    _In_ ULONG SemaphoreInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#ifndef TIMER_QUERY_STATE
#define TIMER_QUERY_STATE 0x0001
#endif
#ifndef TIMER_MODIFY_STATE
#define TIMER_MODIFY_STATE 0x0002
#endif
#ifndef TIMER_ALL_ACCESS
#define TIMER_ALL_ACCESS (TIMER_QUERY_STATE|TIMER_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE)
#endif
typedef enum _TIMER_INFORMATION_CLASS
{
} TIMER_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)typedef VOID ()(ok bool){//col:617
/*typedef VOID (NTAPI *PTIMER_APC_ROUTINE)(
    _In_ PVOID TimerContext,
    _In_ ULONG TimerLowValue,
    _In_ LONG TimerHighValue
    );
typedef enum _TIMER_SET_INFORMATION_CLASS
{
    MaxTimerInfoClass
} TIMER_SET_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:631
/*#if (PHNT_VERSION >= PHNT_WIN7)
struct _COUNTED_REASON_CONTEXT;
typedef struct _TIMER_SET_COALESCABLE_TIMER_INFO
{
    _In_ LARGE_INTEGER DueTime;
    _In_opt_ PTIMER_APC_ROUTINE TimerApcRoutine;
    _In_opt_ PVOID TimerContext;
    _In_opt_ struct _COUNTED_REASON_CONTEXT *WakeContext;
    _In_opt_ ULONG Period;
    _In_ ULONG TolerableDelay;
    _Out_opt_ PBOOLEAN PreviousState;
} TIMER_SET_COALESCABLE_TIMER_INFO, *PTIMER_SET_COALESCABLE_TIMER_INFO;*/
return true
}

func (n *ntexapi)NtCreateTimer()(ok bool){//col:722
/*NtCreateTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ TIMER_TYPE TimerType
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetTimer(
    _In_ HANDLE TimerHandle,
    _In_ PLARGE_INTEGER DueTime,
    _In_opt_ PTIMER_APC_ROUTINE TimerApcRoutine,
    _In_opt_ PVOID TimerContext,
    _In_ BOOLEAN ResumeTimer,
    _In_opt_ LONG Period,
    _Out_opt_ PBOOLEAN PreviousState
    );
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetTimerEx(
    _In_ HANDLE TimerHandle,
    _In_ TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,
    _Inout_updates_bytes_opt_(TimerSetInformationLength) PVOID TimerSetInformation,
    _In_ ULONG TimerSetInformationLength
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelTimer(
    _In_ HANDLE TimerHandle,
    _Out_opt_ PBOOLEAN CurrentState
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryTimer(
    _In_ HANDLE TimerHandle,
    _In_ TIMER_INFORMATION_CLASS TimerInformationClass,
    _Out_writes_bytes_(TimerInformationLength) PVOID TimerInformation,
    _In_ ULONG TimerInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#if (PHNT_VERSION >= PHNT_WIN8)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateIRTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetIRTimer(
    _In_ HANDLE TimerHandle,
    _In_opt_ PLARGE_INTEGER DueTime
    );
#endif
typedef struct _T2_SET_PARAMETERS_V0
{
    ULONG Version;
    ULONG Reserved;
    LONGLONG NoWakeTolerance;
} T2_SET_PARAMETERS, *PT2_SET_PARAMETERS;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:891
/*#if (PHNT_VERSION >= PHNT_THRESHOLD)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateTimer2(
    _Out_ PHANDLE TimerHandle,
    _In_opt_ PVOID Reserved1,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Attributes,
    _In_ ACCESS_MASK DesiredAccess
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetTimer2(
    _In_ HANDLE TimerHandle,
    _In_ PLARGE_INTEGER DueTime,
    _In_opt_ PLARGE_INTEGER Period,
    _In_ PT2_SET_PARAMETERS Parameters
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelTimer2(
    _In_ HANDLE TimerHandle,
    _In_ PT2_CANCEL_PARAMETERS Parameters
    );
#endif
#define PROFILE_CONTROL 0x0001
#define PROFILE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | PROFILE_CONTROL)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateProfile(
    _Out_ PHANDLE ProfileHandle,
    _In_opt_ HANDLE Process,
    _In_ PVOID ProfileBase,
    _In_ SIZE_T ProfileSize,
    _In_ ULONG BucketSize,
    _In_reads_bytes_(BufferSize) PULONG Buffer,
    _In_ ULONG BufferSize,
    _In_ KPROFILE_SOURCE ProfileSource,
    _In_ KAFFINITY Affinity
    );
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateProfileEx(
    _Out_ PHANDLE ProfileHandle,
    _In_opt_ HANDLE Process,
    _In_ PVOID ProfileBase,
    _In_ SIZE_T ProfileSize,
    _In_ ULONG BucketSize,
    _In_reads_bytes_(BufferSize) PULONG Buffer,
    _In_ ULONG BufferSize,
    _In_ KPROFILE_SOURCE ProfileSource,
    _In_ USHORT GroupCount,
    _In_reads_(GroupCount) PGROUP_AFFINITY GroupAffinity
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtStartProfile(
    _In_ HANDLE ProfileHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtStopProfile(
    _In_ HANDLE ProfileHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryIntervalProfile(
    _In_ KPROFILE_SOURCE ProfileSource,
    _Out_ PULONG Interval
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetIntervalProfile(
    _In_ ULONG Interval,
    _In_ KPROFILE_SOURCE Source
    );
#define KEYEDEVENT_WAIT 0x0001
#define KEYEDEVENT_WAKE 0x0002
#define KEYEDEVENT_ALL_ACCESS \
    (STANDARD_RIGHTS_REQUIRED | KEYEDEVENT_WAIT | KEYEDEVENT_WAKE)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateKeyedEvent(
    _Out_ PHANDLE KeyedEventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Flags
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenKeyedEvent(
    _Out_ PHANDLE KeyedEventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReleaseKeyedEvent(
    _In_ HANDLE KeyedEventHandle,
    _In_ PVOID KeyValue,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWaitForKeyedEvent(
    _In_ HANDLE KeyedEventHandle,
    _In_ PVOID KeyValue,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtUmsThreadYield(
    _In_ PVOID SchedulerParam
    );
#endif
typedef struct _WNF_STATE_NAME
{
    ULONG Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:1095
/*#if (PHNT_VERSION >= PHNT_WIN8)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateWnfStateName(
    _Out_ PWNF_STATE_NAME StateName,
    _In_ WNF_STATE_NAME_LIFETIME NameLifetime,
    _In_ WNF_DATA_SCOPE DataScope,
    _In_ BOOLEAN PersistData,
    _In_opt_ PCWNF_TYPE_ID TypeId,
    _In_ ULONG MaximumStateSize,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteWnfStateName(
    _In_ PCWNF_STATE_NAME StateName
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtUpdateWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_reads_bytes_opt_(Length) const VOID *Buffer,
    _In_opt_ ULONG Length,
    _In_opt_ PCWNF_TYPE_ID TypeId,
    _In_opt_ const VOID *ExplicitScope,
    _In_ WNF_CHANGE_STAMP MatchingChangeStamp,
    _In_ LOGICAL CheckStamp
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ const VOID *ExplicitScope
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ PCWNF_TYPE_ID TypeId,
    _In_opt_ const VOID *ExplicitScope,
    _Out_ PWNF_CHANGE_STAMP ChangeStamp,
    _Out_writes_bytes_to_opt_(*BufferSize, *BufferSize) PVOID Buffer,
    _Inout_ PULONG BufferSize
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryWnfStateNameInformation(
    _In_ PCWNF_STATE_NAME StateName,
    _In_ WNF_STATE_NAME_INFORMATION NameInfoClass,
    _In_opt_ const VOID *ExplicitScope,
    _Out_writes_bytes_(InfoBufferSize) PVOID InfoBuffer,
    _In_ ULONG InfoBufferSize
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSubscribeWnfStateChange(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ WNF_CHANGE_STAMP ChangeStamp,
    _In_ ULONG EventMask,
    _Out_opt_ PULONG64 SubscriptionId
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtUnsubscribeWnfStateChange(
    _In_ PCWNF_STATE_NAME StateName
    );
#endif
#if (PHNT_VERSION >= PHNT_THRESHOLD)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtGetCompleteWnfStateSubscription(
    _In_opt_ PWNF_STATE_NAME OldDescriptorStateName,
    _In_opt_ ULONG64 *OldSubscriptionId,
    _In_opt_ ULONG OldDescriptorEventMask,
    _In_opt_ ULONG OldDescriptorStatus,
    _Out_writes_bytes_(DescriptorSize) PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor,
    _In_ ULONG DescriptorSize
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetWnfProcessNotificationEvent(
    _In_ HANDLE NotificationEvent
    );
#endif
#define WORKER_FACTORY_RELEASE_WORKER 0x0001
#define WORKER_FACTORY_WAIT 0x0002
#define WORKER_FACTORY_SET_INFORMATION 0x0004
#define WORKER_FACTORY_QUERY_INFORMATION 0x0008
#define WORKER_FACTORY_READY_WORKER 0x0010
#define WORKER_FACTORY_SHUTDOWN 0x0020
#define WORKER_FACTORY_ALL_ACCESS ( \
    STANDARD_RIGHTS_REQUIRED | \
    WORKER_FACTORY_RELEASE_WORKER | \
    WORKER_FACTORY_WAIT | \
    WORKER_FACTORY_SET_INFORMATION | \
    WORKER_FACTORY_QUERY_INFORMATION | \
    WORKER_FACTORY_READY_WORKER | \
    WORKER_FACTORY_SHUTDOWN \
    )
typedef enum _WORKERFACTORYINFOCLASS
{
    WorkerFactoryAdjustThreadGoal,
    WorkerFactoryCallbackType,
    MaxWorkerFactoryInfoClass
} WORKERFACTORYINFOCLASS, *PWORKERFACTORYINFOCLASS;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:1198
/*#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateWorkerFactory(
    _Out_ PHANDLE WorkerFactoryHandleReturn,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE CompletionPortHandle,
    _In_ HANDLE WorkerProcessHandle,
    _In_ PVOID StartRoutine,
    _In_opt_ PVOID StartParameter,
    _In_opt_ ULONG MaxThreadCount,
    _In_opt_ SIZE_T StackReserve,
    _In_opt_ SIZE_T StackCommit
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryInformationWorkerFactory(
    _In_ HANDLE WorkerFactoryHandle,
    _In_ WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
    _Out_writes_bytes_(WorkerFactoryInformationLength) PVOID WorkerFactoryInformation,
    _In_ ULONG WorkerFactoryInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetInformationWorkerFactory(
    _In_ HANDLE WorkerFactoryHandle,
    _In_ WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
    _In_reads_bytes_(WorkerFactoryInformationLength) PVOID WorkerFactoryInformation,
    _In_ ULONG WorkerFactoryInformationLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtShutdownWorkerFactory(
    _In_ HANDLE WorkerFactoryHandle,
    _Inout_ volatile LONG *PendingWorkerCount
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReleaseWorkerFactoryWorker(
    _In_ HANDLE WorkerFactoryHandle
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWorkerFactoryWorkerReady(
    _In_ HANDLE WorkerFactoryHandle
    );
struct _FILE_IO_COMPLETION_INFORMATION;
#if (PHNT_VERSION >= PHNT_WIN8)
typedef struct _WORKER_FACTORY_DEFERRED_WORK
{
    struct _PORT_MESSAGE *AlpcSendMessage;
    PVOID AlpcSendMessagePort;
    ULONG AlpcSendMessageFlags;
    ULONG Flags;
} WORKER_FACTORY_DEFERRED_WORK, *PWORKER_FACTORY_DEFERRED_WORK;*/
return true
}

func (n *ntexapi)NtWaitForWorkViaWorkerFactory()(ok bool){//col:1546
/*NtWaitForWorkViaWorkerFactory(
    _In_ HANDLE WorkerFactoryHandle,
    _Out_writes_to_(Count, *PacketsReturned) struct _FILE_IO_COMPLETION_INFORMATION *MiniPackets,
    _In_ ULONG Count,
    _Out_ PULONG PacketsReturned,
    _In_ PWORKER_FACTORY_DEFERRED_WORK DeferredWork
    );
#else
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWaitForWorkViaWorkerFactory(
    _In_ HANDLE WorkerFactoryHandle,
    _Out_ struct _FILE_IO_COMPLETION_INFORMATION *MiniPacket
    );
#endif
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySystemTime(
    _Out_ PLARGE_INTEGER SystemTime
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetSystemTime(
    _In_opt_ PLARGE_INTEGER SystemTime,
    _Out_opt_ PLARGE_INTEGER PreviousTime
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryTimerResolution(
    _Out_ PULONG MaximumTime,
    _Out_ PULONG MinimumTime,
    _Out_ PULONG CurrentTime
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetTimerResolution(
    _In_ ULONG DesiredTime,
    _In_ BOOLEAN SetResolution,
    _Out_ PULONG ActualTime
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryPerformanceCounter(
    _Out_ PLARGE_INTEGER PerformanceCounter,
    _Out_opt_ PLARGE_INTEGER PerformanceFrequency
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAllocateLocallyUniqueId(
    _Out_ PLUID Luid
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetUuidSeed(
    _In_ PCHAR Seed
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAllocateUuids(
    _Out_ PULARGE_INTEGER Time,
    _Out_ PULONG Range,
    _Out_ PULONG Sequence,
    _Out_ PCHAR Seed
    );
typedef enum _SYSTEM_INFORMATION_CLASS
{
    SystemBadPageInformation,
    SystemCriticalProcessErrorLogInformation,
    SystemEntropyInterruptTimingRawInformation,
    SystemVmGenerationCountInformation,
    SystemHardwareSecurityTestInterfaceResultsInformation,
    SystemAllowedCpuSetsInformation,
    SystemCodeIntegrityPolicyFullInformation,
    SystemWin32WerStartCallout,
    SystemControlFlowTransition,
    SystemCodeIntegrityPoliciesFullInformation,
    SystemIntegrityQuotaInformation,
    SystemSecureDumpEncryptionInformation,
    SystemFirmwareBootPerformanceInformation,
    SystemCodeIntegrityUnlockModeInformation,
    SystemCodeIntegritySyntheticCacheInformation,
    SystemWheaIpmiHardwareInformation,
    SystemDifSetRuleClassInformation,
    SystemDifClearRuleClassInformation,
    SystemDifApplyPluginVerificationOnDriver,
    SystemCodeIntegrityAddDynamicStore,
    SystemCodeIntegrityClearDynamicStores,
    SystemDifPoolTrackingInformation,
    SystemDpcWatchdogInformation,
    SystemDpcWatchdogInformation2,
    SystemXfgCheckFailureInformation,
    SystemSecureKernelDebuggerInformation,
    SystemOriginalImageFeatureInformation,
    MaxSystemInfoClass
} SYSTEM_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)#define PERF_MASK_INDEX ()(ok bool){//col:2189
/*#define PERF_MASK_INDEX (0xe0000000)
#define PERF_MASK_GROUP (~PERF_MASK_INDEX)
#define PERF_NUM_MASKS 8
#define PERF_GET_MASK_INDEX(GM) (((GM) & PERF_MASK_INDEX) >> 29)
#define PERF_GET_MASK_GROUP(GM) ((GM) & PERF_MASK_GROUP)
#define PERFINFO_OR_GROUP_WITH_GROUPMASK(Group, pGroupMask) \
    (pGroupMask)->Masks[PERF_GET_MASK_INDEX(Group)] |= PERF_GET_MASK_GROUP(Group);
#define PERF_PROCESS            EVENT_TRACE_FLAG_PROCESS
#define PERF_THREAD             EVENT_TRACE_FLAG_THREAD
#define PERF_PROC_THREAD        EVENT_TRACE_FLAG_PROCESS | EVENT_TRACE_FLAG_THREAD
#define PERF_LOADER             EVENT_TRACE_FLAG_IMAGE_LOAD
#define PERF_PERF_COUNTER       EVENT_TRACE_FLAG_PROCESS_COUNTERS
#define PERF_FILENAME           EVENT_TRACE_FLAG_DISK_FILE_IO
#define PERF_DISK_IO            EVENT_TRACE_FLAG_DISK_FILE_IO | EVENT_TRACE_FLAG_DISK_IO
#define PERF_DISK_IO_INIT       EVENT_TRACE_FLAG_DISK_IO_INIT
#define PERF_ALL_FAULTS         EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS
#define PERF_HARD_FAULTS        EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS
#define PERF_VAMAP              EVENT_TRACE_FLAG_VAMAP
#define PERF_NETWORK            EVENT_TRACE_FLAG_NETWORK_TCPIP
#define PERF_REGISTRY           EVENT_TRACE_FLAG_REGISTRY
#define PERF_DBGPRINT           EVENT_TRACE_FLAG_DBGPRINT
#define PERF_JOB                EVENT_TRACE_FLAG_JOB
#define PERF_ALPC               EVENT_TRACE_FLAG_ALPC
#define PERF_SPLIT_IO           EVENT_TRACE_FLAG_SPLIT_IO
#define PERF_DEBUG_EVENTS       EVENT_TRACE_FLAG_DEBUG_EVENTS
#define PERF_FILE_IO            EVENT_TRACE_FLAG_FILE_IO
#define PERF_FILE_IO_INIT       EVENT_TRACE_FLAG_FILE_IO_INIT
#define PERF_NO_SYSCONFIG       EVENT_TRACE_FLAG_NO_SYSCONFIG
#define PERF_MEMORY             0x20000001
#define PERF_FOOTPRINT          0x20000008
#define PERF_REFSET             0x20000020
#define PERF_POOL               0x20000040
#define PERF_POOLTRACE          0x20000041
#define PERF_COMPACT_CSWITCH    0x20000100
#define PERF_PMC_PROFILE        0x20000400
#define PERF_PROFILING          0x20000402
#define PERF_PROCESS_INSWAP     0x20000800
#define PERF_AFFINITY           0x20001000
#define PERF_PRIORITY           0x20002000
#define PERF_SPINLOCK           0x20010000
#define PERF_SYNC_OBJECTS       0x20020000
#define PERF_DPC_QUEUE          0x20040000
#define PERF_MEMINFO            0x20080000
#define PERF_CONTMEM_GEN        0x20100000
#define PERF_SPINLOCK_CNTRS     0x20200000
#define PERF_SPININSTR          0x20210000
#define PERF_SESSION            0x20400000
#define PERF_PFSECTION          0x20400000
#define PERF_MEMINFO_WS         0x20800000
#define PERF_KERNEL_QUEUE       0x21000000
#define PERF_INTERRUPT_STEER    0x22000000
#define PERF_SHOULD_YIELD       0x24000000
#define PERF_WS                 0x28000000
#define PERF_ANTI_STARVATION    0x40000001
#define PERF_PROCESS_FREEZE     0x40000002
#define PERF_PFN_LIST           0x40000004
#define PERF_WS_DETAIL          0x40000008
#define PERF_WS_ENTRY           0x40000010
#define PERF_HEAP               0x40000020
#define PERF_UMS                0x40000080
#define PERF_BACKTRACE          0x40000100
#define PERF_VULCAN             0x40000200
#define PERF_OBJECTS            0x40000400
#define PERF_EVENTS             0x40000800
#define PERF_FULLTRACE          0x40001000
#define PERF_DFSS               0x40002000
#define PERF_PREFETCH           0x40004000
#define PERF_PROCESSOR_IDLE     0x40008000
#define PERF_CPU_CONFIG         0x40010000
#define PERF_TIMER              0x40020000
#define PERF_CLOCK_INTERRUPT    0x40040000
#define PERF_LOAD_BALANCER      0x40080000
#define PERF_CLOCK_TIMER        0x40100000
#define PERF_IDLE_SELECTION     0x40200000
#define PERF_IPI                0x40400000
#define PERF_IO_TIMER           0x40800000
#define PERF_REG_HIVE           0x41000000
#define PERF_REG_NOTIF          0x42000000
#define PERF_PPM_EXIT_LATENCY   0x44000000
#define PERF_WORKER_THREAD      0x48000000
#define PERF_OPTICAL_IO         0x80000001
#define PERF_OPTICAL_IO_INIT    0x80000002
#define PERF_DLL_INFO           0x80000008
#define PERF_DLL_FLUSH_WS       0x80000010
#define PERF_OB_HANDLE          0x80000040
#define PERF_OB_OBJECT          0x80000080
#define PERF_WAKE_DROP          0x80000200
#define PERF_WAKE_EVENT         0x80000400
#define PERF_DEBUGGER           0x80000800
#define PERF_PROC_ATTACH        0x80001000
#define PERF_WAKE_COUNTER       0x80002000
#define PERF_POWER              0x80008000
#define PERF_SOFT_TRIM          0x80010000
#define PERF_CC                 0x80020000
#define PERF_FLT_IO_INIT        0x80080000
#define PERF_FLT_IO             0x80100000
#define PERF_FLT_FASTIO         0x80200000
#define PERF_FLT_IO_FAILURE     0x80400000
#define PERF_HV_PROFILE         0x80800000
#define PERF_WDF_DPC            0x81000000
#define PERF_WDF_INTERRUPT      0x82000000
#define PERF_CACHE_FLUSH        0x84000000
#define PERF_HIBER_RUNDOWN      0xA0000001
#define PERF_SYSCFG_SYSTEM      0xC0000001
#define PERF_SYSCFG_GRAPHICS    0xC0000002
#define PERF_SYSCFG_STORAGE     0xC0000004
#define PERF_SYSCFG_NETWORK     0xC0000008
#define PERF_SYSCFG_SERVICES    0xC0000010
#define PERF_SYSCFG_PNP         0xC0000020
#define PERF_SYSCFG_OPTICAL     0xC0000040
#define PERF_SYSCFG_ALL         0xDFFFFFFF
#define PERF_CLUSTER_OFF        0xE0000001
#define PERF_MEMORY_CONTROL     0xE0000002
typedef ULONG PERFINFO_MASK;
typedef struct _PERFINFO_GROUPMASK
{
    ULONG Masks[PERF_NUM_MASKS];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK;*/
return true
}

func (n *ntexapi)typedef NTSTATUS ()(ok bool){//col:2651
/*typedef NTSTATUS (*PSYSTEM_WATCHDOG_HANDLER)(_In_ WATCHDOG_HANDLER_ACTION Action, _In_ PVOID Context, _Inout_ PULONG DataValue, _In_ BOOLEAN NoLocks);
typedef struct _SYSTEM_WATCHDOG_HANDLER_INFORMATION 
{
    PSYSTEM_WATCHDOG_HANDLER WdHandler;
    PVOID Context;
} SYSTEM_WATCHDOG_HANDLER_INFORMATION, *PSYSTEM_WATCHDOG_HANDLER_INFORMATION;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:2681
/*#if (PHNT_MODE != PHNT_MODE_KERNEL)
typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION
{
    SystemFirmwareTableEnumerate,
    SystemFirmwareTableGet,
    SystemFirmwareTableMax
} SYSTEM_FIRMWARE_TABLE_ACTION;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:2707
/*#if (PHNT_MODE != PHNT_MODE_KERNEL)
typedef NTSTATUS (__cdecl* PFNFTH)(
    _Inout_ PSYSTEM_FIRMWARE_TABLE_INFORMATION SystemFirmwareTableInfo
    );
typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER
{
    ULONG ProviderSignature;
    BOOLEAN Register;
    PFNFTH FirmwareTableHandler;
    PVOID DriverObject;
} SYSTEM_FIRMWARE_TABLE_HANDLER, *PSYSTEM_FIRMWARE_TABLE_HANDLER;*/
return true
}

func (n *ntexapi)    VOID ()(ok bool){//col:3711
/*    VOID (NTAPI *EntropyRoutine)(PVOID, ULONG);
    VOID (NTAPI *InitializationRoutine)(PVOID, ULONG, PVOID);
    PVOID InitializationContext;
} SYSTEM_ENTROPY_TIMING_INFORMATION, *PSYSTEM_ENTROPY_TIMING_INFORMATION;*/
return true
}

func (n *ntexapi)#if !defined()(ok bool){//col:4225
/*#if !defined(NTDDI_WIN10_CO) || (NTDDI_VERSION < NTDDI_WIN10_CO) && !PHNT_PATCH_FOR_HYPERDBG
typedef struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION
{
    ULONG Machine : 16;
    ULONG KernelMode : 1;
    ULONG UserMode : 1;
    ULONG Native : 1;
    ULONG Process : 1;
    ULONG WoW64Container : 1;
    ULONG ReservedZero0 : 11;
} SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;*/
return true
}

func (n *ntexapi)#if ()(ok bool){//col:4734
/*#if (PHNT_MODE != PHNT_MODE_KERNEL)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySystemInformation(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _Out_writes_bytes_opt_(SystemInformationLength) PVOID SystemInformation,
    _In_ ULONG SystemInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQuerySystemInformationEx(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _In_reads_bytes_(InputBufferLength) PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_writes_bytes_opt_(SystemInformationLength) PVOID SystemInformation,
    _In_ ULONG SystemInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetSystemInformation(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _In_reads_bytes_opt_(SystemInformationLength) PVOID SystemInformation,
    _In_ ULONG SystemInformationLength
    );
typedef enum _SYSDBG_COMMAND
{
    SysDbgQueryModuleInformation,
    SysDbgQueryTraceInformation,
    SysDbgSetTracepoint,
    SysDbgQuerySpecialCalls,
    SysDbgBreakPoint,
    SysDbgEnableKernelDebugger,
    SysDbgDisableKernelDebugger,
    SysDbgGetAutoKdEnable,
    SysDbgSetAutoKdEnable,
    SysDbgGetPrintBufferSize,
    SysDbgSetPrintBufferSize,
    SysDbgGetKdUmExceptionEnable,
    SysDbgSetKdUmExceptionEnable,
    SysDbgSetKdBlockEnable,
    SysDbgRegisterForUmBreakInfo,
    SysDbgGetUmBreakPid,
    SysDbgClearUmBreakPid,
    SysDbgGetUmAttachPid,
    SysDbgClearUmAttachPid,
    SysDbgMaxInfoClass
} SYSDBG_COMMAND, *PSYSDBG_COMMAND;*/
return true
}

func (n *ntexapi)NtSystemDebugControl()(ok bool){//col:4896
/*NtSystemDebugControl(
    _In_ SYSDBG_COMMAND Command,
    _Inout_updates_bytes_opt_(InputBufferLength) PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_writes_bytes_opt_(OutputBufferLength) PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength,
    _Out_opt_ PULONG ReturnLength
    );
typedef enum _HARDERROR_RESPONSE_OPTION
{
    OptionAbortRetryIgnore,
    OptionOk,
    OptionOkCancel,
    OptionRetryCancel,
    OptionYesNo,
    OptionYesNoCancel,
    OptionShutdownSystem,
    OptionOkNoWait,
    OptionCancelTryContinue
} HARDERROR_RESPONSE_OPTION;*/
return true
}

func (n *ntexapi)NtRaiseHardError()(ok bool){//col:4934
/*NtRaiseHardError(
    _In_ NTSTATUS ErrorStatus,
    _In_ ULONG NumberOfParameters,
    _In_ ULONG UnicodeStringParameterMask,
    _In_reads_(NumberOfParameters) PULONG_PTR Parameters,
    _In_ ULONG ValidResponseOptions,
    _Out_ PULONG Response
    );
typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
    StandardDesign,
    NEC98x86,
    EndAlternatives
} ALTERNATIVE_ARCHITECTURE_TYPE;*/
return true
}

func (n *ntexapi)C_ASSERT()(ok bool){//col:5170
/*C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, TickCountMultiplier) == 0x4);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, InterruptTime) == 0x8);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, SystemTime) == 0x14);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, NtSystemRoot) == 0x30);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, LargePageMinimum) == 0x244);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, NtProductType) == 0x264);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, NtMajorVersion) == 0x26c);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, NtMinorVersion) == 0x270);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, ProcessorFeatures) == 0x274);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, KdDebuggerEnabled) == 0x2d4);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, ActiveConsoleId) == 0x2d8);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, NumberOfPhysicalPages) == 0x2e8);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, SafeBootMode) == 0x2ec);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, TickCount) == 0x320);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, TickCountQuad) == 0x320);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, ActiveProcessorCount) == 0x3c0);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, ActiveGroupCount) == 0x3c4);
C_ASSERT(FIELD_OFFSET(KUSER_SHARED_DATA, XState) == 0x3d8);
#define USER_SHARED_DATA ((KUSER_SHARED_DATA * const)0x7ffe0000)
#if (PHNT_VERSION >= PHNT_WS03)
FORCEINLINE ULONGLONG NtGetTickCount64()
{
    ULARGE_INTEGER tickCount;
#ifdef _WIN64
    tickCount.QuadPart = USER_SHARED_DATA->TickCountQuad;
#else
    while (TRUE)
    {
        tickCount.HighPart = (ULONG)USER_SHARED_DATA->TickCount.High1Time;
        tickCount.LowPart = USER_SHARED_DATA->TickCount.LowPart;
        if (tickCount.HighPart == (ULONG)USER_SHARED_DATA->TickCount.High2Time)
            break;
        YieldProcessor();
    }
#endif
    return (UInt32x32To64(tickCount.LowPart, USER_SHARED_DATA->TickCountMultiplier) >> 24) +
        (UInt32x32To64(tickCount.HighPart, USER_SHARED_DATA->TickCountMultiplier) << 8);
}*/
return true
}

func (n *ntexapi)FORCEINLINE ULONG NtGetTickCount()(ok bool){//col:5197
/*FORCEINLINE ULONG NtGetTickCount()
{
#ifdef _WIN64
    return (ULONG)((USER_SHARED_DATA->TickCountQuad * USER_SHARED_DATA->TickCountMultiplier) >> 24);
#else
    ULARGE_INTEGER tickCount;
    while (TRUE)
    {
        tickCount.HighPart = (ULONG)USER_SHARED_DATA->TickCount.High1Time;
        tickCount.LowPart = USER_SHARED_DATA->TickCount.LowPart;
        if (tickCount.HighPart == (ULONG)USER_SHARED_DATA->TickCount.High2Time)
            break;
        YieldProcessor();
    }
    return (ULONG)((UInt32x32To64(tickCount.LowPart, USER_SHARED_DATA->TickCountMultiplier) >> 24) +
        UInt32x32To64((tickCount.HighPart << 8) & 0xffffffff, USER_SHARED_DATA->TickCountMultiplier));
#endif
}*/
return true
}

func (n *ntexapi)FORCEINLINE ULONGLONG NtGetTickCount64()(ok bool){//col:5204
/*FORCEINLINE ULONGLONG NtGetTickCount64()
{
}*/
return true
}

func (n *ntexapi)FORCEINLINE ULONG NtGetTickCount()(ok bool){//col:5209
/*FORCEINLINE ULONG NtGetTickCount()
{
    return GetTickCount();
}*/
return true
}

func (n *ntexapi)NtQueryDefaultLocale()(ok bool){//col:5404
/*NtQueryDefaultLocale(
    _In_ BOOLEAN UserProfile,
    _Out_ PLCID DefaultLocaleId
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetDefaultLocale(
    _In_ BOOLEAN UserProfile,
    _In_ LCID DefaultLocaleId
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryInstallUILanguage(
    _Out_ LANGID *InstallUILanguageId
    );
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFlushInstallUILanguage(
    _In_ LANGID InstallUILanguage,
    _In_ ULONG SetComittedFlag
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryDefaultUILanguage(
    _Out_ LANGID *DefaultUILanguageId
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetDefaultUILanguage(
    _In_ LANGID DefaultUILanguageId
    );
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtIsUILanguageComitted(
    VOID
    );
#endif
#if (PHNT_VERSION >= PHNT_VISTA)
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtInitializeNlsFiles(
    _Out_ PVOID *BaseAddress,
    _Out_ PLCID DefaultLocaleId,
    _Out_ PLARGE_INTEGER DefaultCasingTableSize
    );
#else
NTSYSCALLAPI
NTSTATUS
NTAPI
NtInitializeNlsFiles(
    _Out_ PVOID *BaseAddress,
    _Out_ PLCID DefaultLocaleId,
    _Out_ PLARGE_INTEGER DefaultCasingTableSize,
    _Out_opt_ PULONG CurrentNLSVersion
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtGetNlsSectionPtr(
    _In_ ULONG SectionType,
    _In_ ULONG SectionData,
    _In_ PVOID ContextData,
    _Out_ PVOID *SectionPointer,
    _Out_ PULONG SectionSize
    );
#if (PHNT_VERSION < PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAcquireCMFViewOwnership(
    _Out_ PULONGLONG TimeStamp,
    _Out_ PBOOLEAN tokenTaken,
    _In_ BOOLEAN replaceExisting
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReleaseCMFViewOwnership(
    VOID
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtMapCMFModule(
    _In_ ULONG What,
    _In_ ULONG Index,
    _Out_opt_ PULONG CacheIndexOut,
    _Out_opt_ PULONG CacheFlagsOut,
    _Out_opt_ PULONG ViewSizeOut,
    _Out_opt_ PVOID *BaseAddress
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtGetMUIRegistryInfo(
    _In_ ULONG Flags,
    _Inout_ PULONG DataSize,
    _Out_ PVOID Data
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAddAtom(
    _In_reads_bytes_opt_(Length) PWSTR AtomName,
    _In_ ULONG Length,
    _Out_opt_ PRTL_ATOM Atom
    );
#if (PHNT_VERSION >= PHNT_WIN8)
#define ATOM_FLAG_GLOBAL 0x2
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAddAtomEx(
    _In_reads_bytes_opt_(Length) PWSTR AtomName,
    _In_ ULONG Length,
    _Out_opt_ PRTL_ATOM Atom,
    _In_ ULONG Flags
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFindAtom(
    _In_reads_bytes_opt_(Length) PWSTR AtomName,
    _In_ ULONG Length,
    _Out_opt_ PRTL_ATOM Atom
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteAtom(
    _In_ RTL_ATOM Atom
    );
typedef enum _ATOM_INFORMATION_CLASS
{
    AtomBasicInformation,
    AtomTableInformation
} ATOM_INFORMATION_CLASS;*/
return true
}

func (n *ntexapi)NtQueryInformationAtom()(ok bool){//col:5539
/*NtQueryInformationAtom(
    _In_ RTL_ATOM Atom,
    _In_ ATOM_INFORMATION_CLASS AtomInformationClass,
    _Out_writes_bytes_(AtomInformationLength) PVOID AtomInformation,
    _In_ ULONG AtomInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
#define FLG_VALID_BITS 0xfffffdff
#define FLG_USERMODE_VALID_BITS (FLG_STOP_ON_EXCEPTION | \
    FLG_SHOW_LDR_SNAPS | \
    FLG_HEAP_ENABLE_TAIL_CHECK | \
    FLG_HEAP_ENABLE_FREE_CHECK | \
    FLG_HEAP_VALIDATE_PARAMETERS | \
    FLG_HEAP_VALIDATE_ALL | \
    FLG_APPLICATION_VERIFIER | \
    FLG_HEAP_ENABLE_TAGGING | \
    FLG_USER_STACK_TRACE_DB | \
    FLG_HEAP_ENABLE_TAG_BY_DLL | \
    FLG_DISABLE_STACK_EXTENSION | \
    FLG_ENABLE_SYSTEM_CRIT_BREAKS | \
    FLG_HEAP_DISABLE_COALESCING | \
    FLG_DISABLE_PROTDLLS | \
    FLG_HEAP_PAGE_ALLOCS | \
    FLG_CRITSEC_EVENT_CREATION | \
    FLG_LDR_TOP_DOWN)
#define FLG_BOOTONLY_VALID_BITS (FLG_KERNEL_STACK_TRACE_DB | \
    FLG_MAINTAIN_OBJECT_TYPELIST | \
    FLG_ENABLE_CSRDEBUG | \
    FLG_DEBUG_INITIAL_COMMAND | \
    FLG_DEBUG_INITIAL_COMMAND_EX | \
    FLG_DISABLE_PAGE_KERNEL_STACKS)
#define FLG_KERNELMODE_VALID_BITS (FLG_STOP_ON_EXCEPTION | \
    FLG_SHOW_LDR_SNAPS | \
    FLG_STOP_ON_HUNG_GUI | \
    FLG_POOL_ENABLE_TAGGING | \
    FLG_ENABLE_KDEBUG_SYMBOL_LOAD | \
    FLG_ENABLE_CLOSE_EXCEPTIONS | \
    FLG_ENABLE_EXCEPTION_LOGGING | \
    FLG_ENABLE_HANDLE_TYPE_TAGGING | \
    FLG_DISABLE_DBGPRINT | \
    FLG_ENABLE_HANDLE_EXCEPTIONS)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryLicenseValue(
    _In_ PUNICODE_STRING ValueName,
    _Out_opt_ PULONG Type,
    _Out_writes_bytes_to_opt_(DataSize, *ResultDataSize) PVOID Data,
    _In_ ULONG DataSize,
    _Out_ PULONG ResultDataSize
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetDefaultHardErrorPort(
    _In_ HANDLE DefaultHardErrorPort
    );
typedef enum _SHUTDOWN_ACTION
{
    ShutdownNoReboot,
    ShutdownReboot,
    ShutdownPowerOff,
} SHUTDOWN_ACTION;*/
return true
}



