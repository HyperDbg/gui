package phnt
//back\HyperDbgDev\hyperdbg\dependencies\phnt\ntioapi.h.back

const(
_NTIOAPI_H =  //col:13
FILE_SUPERSEDE = 0x00000000 //col:17
FILE_OPEN = 0x00000001 //col:18
FILE_CREATE = 0x00000002 //col:19
FILE_OPEN_IF = 0x00000003 //col:20
FILE_OVERWRITE = 0x00000004 //col:21
FILE_OVERWRITE_IF = 0x00000005 //col:22
FILE_MAXIMUM_DISPOSITION = 0x00000005 //col:23
FILE_DIRECTORY_FILE = 0x00000001 //col:27
FILE_WRITE_THROUGH = 0x00000002 //col:28
FILE_SEQUENTIAL_ONLY = 0x00000004 //col:29
FILE_NO_INTERMEDIATE_BUFFERING = 0x00000008 //col:30
FILE_SYNCHRONOUS_IO_ALERT = 0x00000010 //col:32
FILE_SYNCHRONOUS_IO_NONALERT = 0x00000020 //col:33
FILE_NON_DIRECTORY_FILE = 0x00000040 //col:34
FILE_CREATE_TREE_CONNECTION = 0x00000080 //col:35
FILE_COMPLETE_IF_OPLOCKED = 0x00000100 //col:37
FILE_NO_EA_KNOWLEDGE = 0x00000200 //col:38
FILE_OPEN_FOR_RECOVERY = 0x00000400 //col:39
FILE_RANDOM_ACCESS = 0x00000800 //col:40
FILE_DELETE_ON_CLOSE = 0x00001000 //col:42
FILE_OPEN_BY_FILE_ID = 0x00002000 //col:43
FILE_OPEN_FOR_BACKUP_INTENT = 0x00004000 //col:44
FILE_NO_COMPRESSION = 0x00008000 //col:45
FILE_OPEN_REQUIRING_OPLOCK = 0x00010000 //col:47
FILE_DISALLOW_EXCLUSIVE = 0x00020000 //col:48
FILE_SESSION_AWARE = 0x00040000 //col:51
FILE_RESERVE_OPFILTER = 0x00100000 //col:54
FILE_OPEN_REPARSE_POINT = 0x00200000 //col:55
FILE_OPEN_NO_RECALL = 0x00400000 //col:56
FILE_OPEN_FOR_FREE_SPACE_QUERY = 0x00800000 //col:57
FILE_COPY_STRUCTURED_STORAGE = 0x00000041 //col:59
FILE_STRUCTURED_STORAGE = 0x00000441 //col:60
FILE_SUPERSEDED = 0x00000000 //col:64
FILE_OPENED = 0x00000001 //col:65
FILE_CREATED = 0x00000002 //col:66
FILE_OVERWRITTEN = 0x00000003 //col:67
FILE_EXISTS = 0x00000004 //col:68
FILE_DOES_NOT_EXIST = 0x00000005 //col:69
FILE_WRITE_TO_END_OF_FILE = 0xffffffff //col:73
FILE_USE_FILE_POINTER_POSITION = 0xfffffffe //col:74
FILE_BYTE_ALIGNMENT = 0x00000000 //col:78
FILE_WORD_ALIGNMENT = 0x00000001 //col:79
FILE_LONG_ALIGNMENT = 0x00000003 //col:80
FILE_QUAD_ALIGNMENT = 0x00000007 //col:81
FILE_OCTA_ALIGNMENT = 0x0000000f //col:82
FILE_32_BYTE_ALIGNMENT = 0x0000001f //col:83
FILE_64_BYTE_ALIGNMENT = 0x0000003f //col:84
FILE_128_BYTE_ALIGNMENT = 0x0000007f //col:85
FILE_256_BYTE_ALIGNMENT = 0x000000ff //col:86
FILE_512_BYTE_ALIGNMENT = 0x000001ff //col:87
MAXIMUM_FILENAME_LENGTH = 256 //col:91
FILE_NEED_EA = 0x00000080 //col:95
FILE_EA_TYPE_BINARY = 0xfffe //col:97
FILE_EA_TYPE_ASCII = 0xfffd //col:98
FILE_EA_TYPE_BITMAP = 0xfffb //col:99
FILE_EA_TYPE_METAFILE = 0xfffa //col:100
FILE_EA_TYPE_ICON = 0xfff9 //col:101
FILE_EA_TYPE_EA = 0xffee //col:102
FILE_EA_TYPE_MVMT = 0xffdf //col:103
FILE_EA_TYPE_MVST = 0xffde //col:104
FILE_EA_TYPE_ASN1 = 0xffdd //col:105
FILE_EA_TYPE_FAMILY_IDS = 0xff01 //col:106
FILE_REMOVABLE_MEDIA = 0x00000001 //col:110
FILE_READ_ONLY_DEVICE = 0x00000002 //col:111
FILE_FLOPPY_DISKETTE = 0x00000004 //col:112
FILE_WRITE_ONCE_MEDIA = 0x00000008 //col:113
FILE_REMOTE_DEVICE = 0x00000010 //col:114
FILE_DEVICE_IS_MOUNTED = 0x00000020 //col:115
FILE_VIRTUAL_VOLUME = 0x00000040 //col:116
FILE_AUTOGENERATED_DEVICE_NAME = 0x00000080 //col:117
FILE_DEVICE_SECURE_OPEN = 0x00000100 //col:118
FILE_CHARACTERISTIC_PNP_DEVICE = 0x00000800 //col:119
FILE_CHARACTERISTIC_TS_DEVICE = 0x00001000 //col:120
FILE_CHARACTERISTIC_WEBDAV_DEVICE = 0x00002000 //col:121
FILE_CHARACTERISTIC_CSV = 0x00010000 //col:122
FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL = 0x00020000 //col:123
FILE_PORTABLE_DEVICE = 0x00040000 //col:124
FILE_REMOTE_DEVICE_VSMB = 0x00080000 //col:125
FILE_DEVICE_REQUIRE_SECURITY_CHECK = 0x00100000 //col:126
FILE_PIPE_BYTE_STREAM_TYPE = 0x00000000 //col:131
FILE_PIPE_MESSAGE_TYPE = 0x00000001 //col:132
FILE_PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000 //col:133
FILE_PIPE_REJECT_REMOTE_CLIENTS = 0x00000002 //col:134
FILE_PIPE_TYPE_VALID_MASK = 0x00000003 //col:135
FILE_PIPE_QUEUE_OPERATION = 0x00000000 //col:138
FILE_PIPE_COMPLETE_OPERATION = 0x00000001 //col:139
FILE_PIPE_BYTE_STREAM_MODE = 0x00000000 //col:142
FILE_PIPE_MESSAGE_MODE = 0x00000001 //col:143
FILE_PIPE_INBOUND = 0x00000000 //col:146
FILE_PIPE_OUTBOUND = 0x00000001 //col:147
FILE_PIPE_FULL_DUPLEX = 0x00000002 //col:148
FILE_PIPE_DISCONNECTED_STATE = 0x00000001 //col:151
FILE_PIPE_LISTENING_STATE = 0x00000002 //col:152
FILE_PIPE_CONNECTED_STATE = 0x00000003 //col:153
FILE_PIPE_CLOSING_STATE = 0x00000004 //col:154
FILE_PIPE_CLIENT_END = 0x00000000 //col:157
FILE_PIPE_SERVER_END = 0x00000001 //col:158
FILE_PIPE_UNLIMITED_INSTANCES = 0xffffffff //col:161
MAILSLOT_SIZE_AUTO = 0 //col:165
FLAGS_END_OF_FILE_INFO_EX_EXTEND_PAGING = 0x00000001 //col:395
FLAGS_END_OF_FILE_INFO_EX_NO_EXTRA_PAGING_EXTEND = 0x00000002 //col:396
FLAGS_END_OF_FILE_INFO_EX_TIME_CONSTRAINED = 0x00000004 //col:397
FLAGS_DELAY_REASONS_LOG_FILE_FULL = 0x00000001 //col:398
FLAGS_DELAY_REASONS_BITMAP_SCANNED = 0x00000002 //col:399
FILE_LINK_REPLACE_IF_EXISTS = 0x00000001 //col:416
FILE_LINK_POSIX_SEMANTICS = 0x00000002 //col:417
FILE_LINK_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008 //col:419
FILE_LINK_NO_INCREASE_AVAILABLE_SPACE = 0x00000010 //col:420
FILE_LINK_NO_DECREASE_AVAILABLE_SPACE = 0x00000020 //col:421
FILE_LINK_PRESERVE_AVAILABLE_SPACE = 0x00000030 //col:422
FILE_LINK_IGNORE_READONLY_ATTRIBUTE = 0x00000040 //col:423
FILE_LINK_FORCE_RESIZE_TARGET_SR = 0x00000080 //col:427
FILE_LINK_FORCE_RESIZE_SOURCE_SR = 0x00000100 //col:428
FILE_LINK_FORCE_RESIZE_SR = 0x00000180 //col:429
FILE_RENAME_REPLACE_IF_EXISTS = 0x00000001 //col:473
FILE_RENAME_POSIX_SEMANTICS = 0x00000002 //col:474
FILE_RENAME_SUPPRESS_PIN_STATE_INHERITANCE = 0x00000004 //col:478
FILE_RENAME_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008 //col:482
FILE_RENAME_NO_INCREASE_AVAILABLE_SPACE = 0x00000010 //col:483
FILE_RENAME_NO_DECREASE_AVAILABLE_SPACE = 0x00000020 //col:484
FILE_RENAME_PRESERVE_AVAILABLE_SPACE = 0x00000030 //col:485
FILE_RENAME_IGNORE_READONLY_ATTRIBUTE = 0x00000040 //col:486
FILE_RENAME_FORCE_RESIZE_TARGET_SR = 0x00000080 //col:490
FILE_RENAME_FORCE_RESIZE_SOURCE_SR = 0x00000100 //col:491
FILE_RENAME_FORCE_RESIZE_SR = 0x00000180 //col:492
FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 0x1 //col:638
FILE_SKIP_SET_EVENT_ON_HANDLE = 0x2 //col:639
FILE_SKIP_SET_USER_EVENT_ON_FAST_IO = 0x4 //col:640
CHECKSUM_ENFORCEMENT_OFF = 0x00000001 //col:731
LX_FILE_METADATA_HAS_UID = 0x1 //col:838
LX_FILE_METADATA_HAS_GID = 0x2 //col:839
LX_FILE_METADATA_HAS_MODE = 0x4 //col:840
LX_FILE_METADATA_HAS_DEVICE_ID = 0x8 //col:841
LX_FILE_CASE_SENSITIVE_DIR = 0x10 //col:842
FILE_CS_FLAG_CASE_SENSITIVE_DIR =     0x00000001 //col:866
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_WRITELOCKED = 0x00000001 //col:1007
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_TO_TX = 0x00000002 //col:1008
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_OUTSIDE_TX = 0x00000004 //col:1009
FILE_VC_QUOTA_NONE = 0x00000000 //col:1113
FILE_VC_QUOTA_TRACK = 0x00000001 //col:1114
FILE_VC_QUOTA_ENFORCE = 0x00000002 //col:1115
FILE_VC_QUOTA_MASK = 0x00000003 //col:1116
FILE_VC_CONTENT_INDEX_DISABLED = 0x00000008 //col:1117
FILE_VC_LOG_QUOTA_THRESHOLD = 0x00000010 //col:1118
FILE_VC_LOG_QUOTA_LIMIT = 0x00000020 //col:1119
FILE_VC_LOG_VOLUME_THRESHOLD = 0x00000040 //col:1120
FILE_VC_LOG_VOLUME_LIMIT = 0x00000080 //col:1121
FILE_VC_QUOTAS_INCOMPLETE = 0x00000100 //col:1122
FILE_VC_QUOTAS_REBUILDING = 0x00000200 //col:1123
FILE_VC_VALID_MASK = 0x000003ff //col:1124
SSINFO_FLAGS_ALIGNED_DEVICE = 0x00000001 //col:1184
SSINFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 0x00000002 //col:1185
SSINFO_OFFSET_UNKNOWN = 0xffffffff //col:1188
FLUSH_FLAGS_FILE_DATA_ONLY = 0x00000001 //col:1313
FLUSH_FLAGS_NO_SYNC = 0x00000002 //col:1314
FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 0x00000004 // REDSTONE1 //col:1315
FILE_QUERY_RESTART_SCAN = 0x00000001 //col:1384
FILE_QUERY_RETURN_SINGLE_ENTRY = 0x00000002 //col:1385
FILE_QUERY_INDEX_SPECIFIED = 0x00000004 //col:1386
FILE_QUERY_RETURN_ON_DISK_ENTRIES_ONLY = 0x00000008 //col:1387
FILE_QUERY_NO_CURSOR_UPDATE = 0x00000010 //col:1389
IO_COMPLETION_QUERY_STATE = 0x0001 //col:1705
IO_COMPLETION_MODIFY_STATE = 0x0002 //col:1709
IO_COMPLETION_ALL_ACCESS = (IO_COMPLETION_QUERY_STATE|IO_COMPLETION_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) //col:1713
SYMLINK_FLAG_RELATIVE = 0x00000001 //col:1971
SYMLINK_DIRECTORY = 0x80000000 // If set then this is a directory symlink //col:1974
SYMLINK_FILE = 0x40000000 // If set then this is a file symlink //col:1975
REPARSE_DATA_BUFFER_HEADER_SIZE = UFIELD_OFFSET(REPARSE_DATA_BUFFER, GenericReparseBuffer) //col:2011
DEVICE_NAMED_PIPE L"DeviceNamedPipe" =  //col:2015
FSCTL_PIPE_ASSIGN_EVENT =             CTL_CODE(FILE_DEVICE_NAMED_PIPE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2017
FSCTL_PIPE_DISCONNECT =               CTL_CODE(FILE_DEVICE_NAMED_PIPE, 1, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2018
FSCTL_PIPE_LISTEN =                   CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2019
FSCTL_PIPE_PEEK =                     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 3, METHOD_BUFFERED, FILE_READ_DATA) //col:2020
FSCTL_PIPE_QUERY_EVENT =              CTL_CODE(FILE_DEVICE_NAMED_PIPE, 4, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2021
FSCTL_PIPE_TRANSCEIVE =               CTL_CODE(FILE_DEVICE_NAMED_PIPE, 5, METHOD_NEITHER,  FILE_READ_DATA | FILE_WRITE_DATA) //col:2022
FSCTL_PIPE_WAIT =                     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 6, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2023
FSCTL_PIPE_IMPERSONATE =              CTL_CODE(FILE_DEVICE_NAMED_PIPE, 7, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2024
FSCTL_PIPE_SET_CLIENT_PROCESS =       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 8, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2025
FSCTL_PIPE_QUERY_CLIENT_PROCESS =     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 9, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2026
FSCTL_PIPE_GET_PIPE_ATTRIBUTE =       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 10, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2027
FSCTL_PIPE_SET_PIPE_ATTRIBUTE =       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 11, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2028
FSCTL_PIPE_GET_CONNECTION_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2029
FSCTL_PIPE_SET_CONNECTION_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2030
FSCTL_PIPE_GET_HANDLE_ATTRIBUTE =     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2031
FSCTL_PIPE_SET_HANDLE_ATTRIBUTE =     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 15, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2032
FSCTL_PIPE_FLUSH =                    CTL_CODE(FILE_DEVICE_NAMED_PIPE, 16, METHOD_BUFFERED, FILE_WRITE_DATA) //col:2033
FSCTL_PIPE_DISABLE_IMPERSONATE =      CTL_CODE(FILE_DEVICE_NAMED_PIPE, 17, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2034
FSCTL_PIPE_SILO_ARRIVAL =             CTL_CODE(FILE_DEVICE_NAMED_PIPE, 18, METHOD_BUFFERED, FILE_WRITE_DATA) //col:2035
FSCTL_PIPE_CREATE_SYMLINK =           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 19, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) //col:2036
FSCTL_PIPE_DELETE_SYMLINK =           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 20, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) //col:2037
FSCTL_PIPE_QUERY_CLIENT_PROCESS_V2 =  CTL_CODE(FILE_DEVICE_NAMED_PIPE, 21, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2038
FSCTL_PIPE_INTERNAL_READ =            CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2045, METHOD_BUFFERED, FILE_READ_DATA) //col:2040
FSCTL_PIPE_INTERNAL_WRITE =           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2046, METHOD_BUFFERED, FILE_WRITE_DATA) //col:2041
FSCTL_PIPE_INTERNAL_TRANSCEIVE =      CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2047, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA) //col:2042
FSCTL_PIPE_INTERNAL_READ_OVFLOW =     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2048, METHOD_BUFFERED, FILE_READ_DATA) //col:2043
FILE_PIPE_READ_DATA = 0x00000000 //col:2047
FILE_PIPE_WRITE_SPACE = 0x00000001 //col:2048
FILE_PIPE_COMPUTER_NAME_LENGTH = 15 //col:2110
FILE_PIPE_SYMLINK_FLAG_GLOBAL =   0x1 //col:2143
FILE_PIPE_SYMLINK_FLAG_RELATIVE = 0x2 //col:2151
FILE_PIPE_SYMLINK_VALID_FLAGS = (FILE_PIPE_SYMLINK_FLAG_GLOBAL | FILE_PIPE_SYMLINK_FLAG_RELATIVE) //col:2153
MAILSLOT_CLASS_FIRSTCLASS = 1 //col:2177
MAILSLOT_CLASS_SECONDCLASS = 2 //col:2178
FSCTL_MAILSLOT_PEEK =             CTL_CODE(FILE_DEVICE_MAILSLOT, 0, METHOD_NEITHER, FILE_READ_DATA) //col:2180
MOUNTMGR_DEVICE_NAME L"DeviceMountPointManager" = MOUNTMGRCONTROLTYPE 0x0000006D // 'm' //col:2192
MOUNTMGRCONTROLTYPE = 0x0000006D // 'm' //col:2193
MOUNTDEVCONTROLTYPE = 0x0000004D // 'M' //col:2194
IOCTL_MOUNTMGR_CREATE_POINT =                 CTL_CODE(MOUNTMGRCONTROLTYPE, 0, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2196
IOCTL_MOUNTMGR_DELETE_POINTS =                CTL_CODE(MOUNTMGRCONTROLTYPE, 1, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2197
IOCTL_MOUNTMGR_QUERY_POINTS =                 CTL_CODE(MOUNTMGRCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2198
IOCTL_MOUNTMGR_DELETE_POINTS_DBONLY =         CTL_CODE(MOUNTMGRCONTROLTYPE, 3, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2199
IOCTL_MOUNTMGR_NEXT_DRIVE_LETTER =            CTL_CODE(MOUNTMGRCONTROLTYPE, 4, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2200
IOCTL_MOUNTMGR_AUTO_DL_ASSIGNMENTS =          CTL_CODE(MOUNTMGRCONTROLTYPE, 5, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2201
IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_CREATED =   CTL_CODE(MOUNTMGRCONTROLTYPE, 6, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2202
IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_DELETED =   CTL_CODE(MOUNTMGRCONTROLTYPE, 7, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2203
IOCTL_MOUNTMGR_CHANGE_NOTIFY =                CTL_CODE(MOUNTMGRCONTROLTYPE, 8, METHOD_BUFFERED, FILE_READ_ACCESS) //col:2204
IOCTL_MOUNTMGR_KEEP_LINKS_WHEN_OFFLINE =      CTL_CODE(MOUNTMGRCONTROLTYPE, 9, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:2205
IOCTL_MOUNTMGR_CHECK_UNPROCESSED_VOLUMES =    CTL_CODE(MOUNTMGRCONTROLTYPE, 10, METHOD_BUFFERED, FILE_READ_ACCESS) //col:2206
IOCTL_MOUNTMGR_VOLUME_ARRIVAL_NOTIFICATION =  CTL_CODE(MOUNTMGRCONTROLTYPE, 11, METHOD_BUFFERED, FILE_READ_ACCESS) //col:2207
IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATH =        CTL_CODE(MOUNTMGRCONTROLTYPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2208
IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATHS =       CTL_CODE(MOUNTMGRCONTROLTYPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2209
IOCTL_MOUNTDEV_QUERY_DEVICE_NAME =            CTL_CODE(MOUNTDEVCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:2211
MOUNTMGR_IS_DRIVE_LETTER(s) ( = (s)->Length == 28 && (s)->Buffer[0] == '' && (s)->Buffer[1] == 'D' && (s)->Buffer[2] == 'o' && (s)->Buffer[3] == 's' && (s)->Buffer[4] == 'D' && (s)->Buffer[5] == 'e' && (s)->Buffer[6] == 'v' && (s)->Buffer[7] == 'i' && (s)->Buffer[8] == 'c' && (s)->Buffer[9] == 'e' && (s)->Buffer[10] == 's' && (s)->Buffer[11] == '' && (s)->Buffer[12] >= 'A' && (s)->Buffer[12] <= 'Z' && (s)->Buffer[13] == ':') //col:2290
MOUNTMGR_IS_VOLUME_NAME(s) ( = ((s)->Length == 96 || ((s)->Length == 98 && (s)->Buffer[48] == '')) && (s)->Buffer[0] == '' && ((s)->Buffer[1] == '?' || (s)->Buffer[1] == '') && (s)->Buffer[2] == '?' && (s)->Buffer[3] == '' && (s)->Buffer[4] == 'V' && (s)->Buffer[5] == 'o' && (s)->Buffer[6] == 'l' && (s)->Buffer[7] == 'u' && (s)->Buffer[8] == 'm' && (s)->Buffer[9] == 'e' && (s)->Buffer[10] == '{' && (s)->Buffer[19] == '-' && (s)->Buffer[24] == '-' && (s)->Buffer[29] == '-' && (s)->Buffer[34] == '-' && (s)->Buffer[47] == '}') //col:2311
MOUNTMGR_IS_DOS_VOLUME_NAME(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '')  //col:2344
MOUNTMGR_IS_DOS_VOLUME_NAME_WB(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 98 && (s)->Buffer[1] == '')  //col:2349
MOUNTMGR_IS_NT_VOLUME_NAME(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '?') //col:2354
MOUNTMGR_IS_NT_VOLUME_NAME_WB(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 98 && (s)->Buffer[1] == '?') //col:2359
)

type     FileDirectoryInformation = 1 // FILE_DIRECTORY_INFORMATION uint32
const(
    FileDirectoryInformation  FILE_INFORMATION_CLASS =  1 // FILE_DIRECTORY_INFORMATION  //col:193
    FileFullDirectoryInformation // FILE_FULL_DIR_INFORMATION FILE_INFORMATION_CLASS = 2  //col:194
    FileBothDirectoryInformation // FILE_BOTH_DIR_INFORMATION FILE_INFORMATION_CLASS = 3  //col:195
    FileBasicInformation // FILE_BASIC_INFORMATION FILE_INFORMATION_CLASS = 4  //col:196
    FileStandardInformation // FILE_STANDARD_INFORMATION FILE_INFORMATION_CLASS = 5  //col:197
    FileInternalInformation // FILE_INTERNAL_INFORMATION FILE_INFORMATION_CLASS = 6  //col:198
    FileEaInformation // FILE_EA_INFORMATION FILE_INFORMATION_CLASS = 7  //col:199
    FileAccessInformation // FILE_ACCESS_INFORMATION FILE_INFORMATION_CLASS = 8  //col:200
    FileNameInformation // FILE_NAME_INFORMATION FILE_INFORMATION_CLASS = 9  //col:201
    FileRenameInformation // FILE_RENAME_INFORMATION // 10 FILE_INFORMATION_CLASS = 10  //col:202
    FileLinkInformation // FILE_LINK_INFORMATION FILE_INFORMATION_CLASS = 11  //col:203
    FileNamesInformation // FILE_NAMES_INFORMATION FILE_INFORMATION_CLASS = 12  //col:204
    FileDispositionInformation // FILE_DISPOSITION_INFORMATION FILE_INFORMATION_CLASS = 13  //col:205
    FilePositionInformation // FILE_POSITION_INFORMATION FILE_INFORMATION_CLASS = 14  //col:206
    FileFullEaInformation // FILE_FULL_EA_INFORMATION FILE_INFORMATION_CLASS = 15  //col:207
    FileModeInformation // FILE_MODE_INFORMATION FILE_INFORMATION_CLASS = 16  //col:208
    FileAlignmentInformation // FILE_ALIGNMENT_INFORMATION FILE_INFORMATION_CLASS = 17  //col:209
    FileAllInformation // FILE_ALL_INFORMATION FILE_INFORMATION_CLASS = 18  //col:210
    FileAllocationInformation // FILE_ALLOCATION_INFORMATION FILE_INFORMATION_CLASS = 19  //col:211
    FileEndOfFileInformation // FILE_END_OF_FILE_INFORMATION // 20 FILE_INFORMATION_CLASS = 20  //col:212
    FileAlternateNameInformation // FILE_NAME_INFORMATION FILE_INFORMATION_CLASS = 21  //col:213
    FileStreamInformation // FILE_STREAM_INFORMATION FILE_INFORMATION_CLASS = 22  //col:214
    FilePipeInformation // FILE_PIPE_INFORMATION FILE_INFORMATION_CLASS = 23  //col:215
    FilePipeLocalInformation // FILE_PIPE_LOCAL_INFORMATION FILE_INFORMATION_CLASS = 24  //col:216
    FilePipeRemoteInformation // FILE_PIPE_REMOTE_INFORMATION FILE_INFORMATION_CLASS = 25  //col:217
    FileMailslotQueryInformation // FILE_MAILSLOT_QUERY_INFORMATION FILE_INFORMATION_CLASS = 26  //col:218
    FileMailslotSetInformation // FILE_MAILSLOT_SET_INFORMATION FILE_INFORMATION_CLASS = 27  //col:219
    FileCompressionInformation // FILE_COMPRESSION_INFORMATION FILE_INFORMATION_CLASS = 28  //col:220
    FileObjectIdInformation // FILE_OBJECTID_INFORMATION FILE_INFORMATION_CLASS = 29  //col:221
    FileCompletionInformation // FILE_COMPLETION_INFORMATION // 30 FILE_INFORMATION_CLASS = 30  //col:222
    FileMoveClusterInformation // FILE_MOVE_CLUSTER_INFORMATION FILE_INFORMATION_CLASS = 31  //col:223
    FileQuotaInformation // FILE_QUOTA_INFORMATION FILE_INFORMATION_CLASS = 32  //col:224
    FileReparsePointInformation // FILE_REPARSE_POINT_INFORMATION FILE_INFORMATION_CLASS = 33  //col:225
    FileNetworkOpenInformation // FILE_NETWORK_OPEN_INFORMATION FILE_INFORMATION_CLASS = 34  //col:226
    FileAttributeTagInformation // FILE_ATTRIBUTE_TAG_INFORMATION FILE_INFORMATION_CLASS = 35  //col:227
    FileTrackingInformation // FILE_TRACKING_INFORMATION FILE_INFORMATION_CLASS = 36  //col:228
    FileIdBothDirectoryInformation // FILE_ID_BOTH_DIR_INFORMATION FILE_INFORMATION_CLASS = 37  //col:229
    FileIdFullDirectoryInformation // FILE_ID_FULL_DIR_INFORMATION FILE_INFORMATION_CLASS = 38  //col:230
    FileValidDataLengthInformation // FILE_VALID_DATA_LENGTH_INFORMATION FILE_INFORMATION_CLASS = 39  //col:231
    FileShortNameInformation // FILE_NAME_INFORMATION // 40 FILE_INFORMATION_CLASS = 40  //col:232
    FileIoCompletionNotificationInformation // FILE_IO_COMPLETION_NOTIFICATION_INFORMATION // since VISTA FILE_INFORMATION_CLASS = 41  //col:233
    FileIoStatusBlockRangeInformation // FILE_IOSTATUSBLOCK_RANGE_INFORMATION FILE_INFORMATION_CLASS = 42  //col:234
    FileIoPriorityHintInformation // FILE_IO_PRIORITY_HINT_INFORMATION FILE_IO_PRIORITY_HINT_INFORMATION_EX FILE_INFORMATION_CLASS = 43  //col:235
    FileSfioReserveInformation // FILE_SFIO_RESERVE_INFORMATION FILE_INFORMATION_CLASS = 44  //col:236
    FileSfioVolumeInformation // FILE_SFIO_VOLUME_INFORMATION FILE_INFORMATION_CLASS = 45  //col:237
    FileHardLinkInformation // FILE_LINKS_INFORMATION FILE_INFORMATION_CLASS = 46  //col:238
    FileProcessIdsUsingFileInformation // FILE_PROCESS_IDS_USING_FILE_INFORMATION FILE_INFORMATION_CLASS = 47  //col:239
    FileNormalizedNameInformation // FILE_NAME_INFORMATION FILE_INFORMATION_CLASS = 48  //col:240
    FileNetworkPhysicalNameInformation // FILE_NETWORK_PHYSICAL_NAME_INFORMATION FILE_INFORMATION_CLASS = 49  //col:241
    FileIdGlobalTxDirectoryInformation // FILE_ID_GLOBAL_TX_DIR_INFORMATION // since WIN7 // 50 FILE_INFORMATION_CLASS = 50  //col:242
    FileIsRemoteDeviceInformation // FILE_IS_REMOTE_DEVICE_INFORMATION FILE_INFORMATION_CLASS = 51  //col:243
    FileUnusedInformation FILE_INFORMATION_CLASS = 52  //col:244
    FileNumaNodeInformation // FILE_NUMA_NODE_INFORMATION FILE_INFORMATION_CLASS = 53  //col:245
    FileStandardLinkInformation // FILE_STANDARD_LINK_INFORMATION FILE_INFORMATION_CLASS = 54  //col:246
    FileRemoteProtocolInformation // FILE_REMOTE_PROTOCOL_INFORMATION FILE_INFORMATION_CLASS = 55  //col:247
    FileRenameInformationBypassAccessCheck // (kernel-mode only); FILE_RENAME_INFORMATION // since WIN8 FILE_INFORMATION_CLASS = 56  //col:248
    FileLinkInformationBypassAccessCheck // (kernel-mode only); FILE_LINK_INFORMATION FILE_INFORMATION_CLASS = 57  //col:249
    FileVolumeNameInformation // FILE_VOLUME_NAME_INFORMATION FILE_INFORMATION_CLASS = 58  //col:250
    FileIdInformation // FILE_ID_INFORMATION FILE_INFORMATION_CLASS = 59  //col:251
    FileIdExtdDirectoryInformation // FILE_ID_EXTD_DIR_INFORMATION // 60 FILE_INFORMATION_CLASS = 60  //col:252
    FileReplaceCompletionInformation // FILE_COMPLETION_INFORMATION // since WINBLUE FILE_INFORMATION_CLASS = 61  //col:253
    FileHardLinkFullIdInformation // FILE_LINK_ENTRY_FULL_ID_INFORMATION // FILE_LINKS_FULL_ID_INFORMATION FILE_INFORMATION_CLASS = 62  //col:254
    FileIdExtdBothDirectoryInformation // FILE_ID_EXTD_BOTH_DIR_INFORMATION // since THRESHOLD FILE_INFORMATION_CLASS = 63  //col:255
    FileDispositionInformationEx // FILE_DISPOSITION_INFO_EX // since REDSTONE FILE_INFORMATION_CLASS = 64  //col:256
    FileRenameInformationEx // FILE_RENAME_INFORMATION_EX FILE_INFORMATION_CLASS = 65  //col:257
    FileRenameInformationExBypassAccessCheck // (kernel-mode only); FILE_RENAME_INFORMATION_EX FILE_INFORMATION_CLASS = 66  //col:258
    FileDesiredStorageClassInformation // FILE_DESIRED_STORAGE_CLASS_INFORMATION // since REDSTONE2 FILE_INFORMATION_CLASS = 67  //col:259
    FileStatInformation // FILE_STAT_INFORMATION FILE_INFORMATION_CLASS = 68  //col:260
    FileMemoryPartitionInformation // FILE_MEMORY_PARTITION_INFORMATION // since REDSTONE3 FILE_INFORMATION_CLASS = 69  //col:261
    FileStatLxInformation // FILE_STAT_LX_INFORMATION // since REDSTONE4 // 70 FILE_INFORMATION_CLASS = 70  //col:262
    FileCaseSensitiveInformation // FILE_CASE_SENSITIVE_INFORMATION FILE_INFORMATION_CLASS = 71  //col:263
    FileLinkInformationEx // FILE_LINK_INFORMATION_EX // since REDSTONE5 FILE_INFORMATION_CLASS = 72  //col:264
    FileLinkInformationExBypassAccessCheck // (kernel-mode only); FILE_LINK_INFORMATION_EX FILE_INFORMATION_CLASS = 73  //col:265
    FileStorageReserveIdInformation // FILE_SET_STORAGE_RESERVE_ID_INFORMATION FILE_INFORMATION_CLASS = 74  //col:266
    FileCaseSensitiveInformationForceAccessCheck // FILE_CASE_SENSITIVE_INFORMATION FILE_INFORMATION_CLASS = 75  //col:267
    FileKnownFolderInformation // FILE_KNOWN_FOLDER_INFORMATION // since WIN11 FILE_INFORMATION_CLASS = 76  //col:268
    FileMaximumInformation FILE_INFORMATION_CLASS = 77  //col:269
)


type     IoPriorityVeryLow = 0 // Defragging content indexing and other background I/Os. uint32
const(
    IoPriorityVeryLow  IO_PRIORITY_HINT =  0 // Defragging content indexing and other background I/Os.  //col:619
    IoPriorityLow // Prefetching for applications. IO_PRIORITY_HINT = 2  //col:620
    IoPriorityNormal // Normal I/Os. IO_PRIORITY_HINT = 3  //col:621
    IoPriorityHigh // Used by filesystems for checkpoint I/O. IO_PRIORITY_HINT = 4  //col:622
    IoPriorityCritical // Used by memory manager. Not available for applications. IO_PRIORITY_HINT = 5  //col:623
    MaxIoPriorityTypes IO_PRIORITY_HINT = 6  //col:624
)


type     KnownFolderNone uint32
const(
    KnownFolderNone FILE_KNOWN_FOLDER_TYPE = 1  //col:877
    KnownFolderDesktop FILE_KNOWN_FOLDER_TYPE = 2  //col:878
    KnownFolderDocuments FILE_KNOWN_FOLDER_TYPE = 3  //col:879
    KnownFolderDownloads FILE_KNOWN_FOLDER_TYPE = 4  //col:880
    KnownFolderMusic FILE_KNOWN_FOLDER_TYPE = 5  //col:881
    KnownFolderPictures FILE_KNOWN_FOLDER_TYPE = 6  //col:882
    KnownFolderVideos FILE_KNOWN_FOLDER_TYPE = 7  //col:883
    KnownFolderOther FILE_KNOWN_FOLDER_TYPE = 8  //col:884
    KnownFolderMax  FILE_KNOWN_FOLDER_TYPE =  7  //col:885
)


type     FileFsVolumeInformation = 1 // FILE_FS_VOLUME_INFORMATION uint32
const(
    FileFsVolumeInformation  FSINFOCLASS =  1 // FILE_FS_VOLUME_INFORMATION  //col:1067
    FileFsLabelInformation // FILE_FS_LABEL_INFORMATION FSINFOCLASS = 2  //col:1068
    FileFsSizeInformation // FILE_FS_SIZE_INFORMATION FSINFOCLASS = 3  //col:1069
    FileFsDeviceInformation // FILE_FS_DEVICE_INFORMATION FSINFOCLASS = 4  //col:1070
    FileFsAttributeInformation // FILE_FS_ATTRIBUTE_INFORMATION FSINFOCLASS = 5  //col:1071
    FileFsControlInformation // FILE_FS_CONTROL_INFORMATION FSINFOCLASS = 6  //col:1072
    FileFsFullSizeInformation // FILE_FS_FULL_SIZE_INFORMATION FSINFOCLASS = 7  //col:1073
    FileFsObjectIdInformation // FILE_FS_OBJECTID_INFORMATION FSINFOCLASS = 8  //col:1074
    FileFsDriverPathInformation // FILE_FS_DRIVER_PATH_INFORMATION FSINFOCLASS = 9  //col:1075
    FileFsVolumeFlagsInformation // FILE_FS_VOLUME_FLAGS_INFORMATION // 10 FSINFOCLASS = 10  //col:1076
    FileFsSectorSizeInformation // FILE_FS_SECTOR_SIZE_INFORMATION // since WIN8 FSINFOCLASS = 11  //col:1077
    FileFsDataCopyInformation // FILE_FS_DATA_COPY_INFORMATION FSINFOCLASS = 12  //col:1078
    FileFsMetadataSizeInformation // FILE_FS_METADATA_SIZE_INFORMATION // since THRESHOLD FSINFOCLASS = 13  //col:1079
    FileFsFullSizeInformationEx // FILE_FS_FULL_SIZE_INFORMATION_EX // since REDSTONE5 FSINFOCLASS = 14  //col:1080
    FileFsMaximumInformation FSINFOCLASS = 15  //col:1081
)


type     DirectoryNotifyInformation = 1 // FILE_NOTIFY_INFORMATION uint32
const(
    DirectoryNotifyInformation  DIRECTORY_NOTIFY_INFORMATION_CLASS =  1 // FILE_NOTIFY_INFORMATION  //col:1664
    DirectoryNotifyExtendedInformation // FILE_NOTIFY_EXTENDED_INFORMATION DIRECTORY_NOTIFY_INFORMATION_CLASS = 2  //col:1665
    DirectoryNotifyFullInformation // since 22H2 DIRECTORY_NOTIFY_INFORMATION_CLASS = 3  //col:1666
    DirectoryNotifyMaximumInformation DIRECTORY_NOTIFY_INFORMATION_CLASS = 4  //col:1667
)


type     IoCompletionBasicInformation uint32
const(
    IoCompletionBasicInformation IO_COMPLETION_INFORMATION_CLASS = 1  //col:1718
)


type     IoSessionEventIgnore uint32
const(
    IoSessionEventIgnore IO_SESSION_EVENT = 1  //col:1847
    IoSessionEventCreated IO_SESSION_EVENT = 2  //col:1848
    IoSessionEventTerminated IO_SESSION_EVENT = 3  //col:1849
    IoSessionEventConnected IO_SESSION_EVENT = 4  //col:1850
    IoSessionEventDisconnected IO_SESSION_EVENT = 5  //col:1851
    IoSessionEventLogon IO_SESSION_EVENT = 6  //col:1852
    IoSessionEventLogoff IO_SESSION_EVENT = 7  //col:1853
    IoSessionEventMax IO_SESSION_EVENT = 8  //col:1854
)


type     IoSessionStateCreated = 1 uint32
const(
    IoSessionStateCreated  IO_SESSION_STATE =  1  //col:1859
    IoSessionStateInitialized  IO_SESSION_STATE =  2  //col:1860
    IoSessionStateConnected  IO_SESSION_STATE =  3  //col:1861
    IoSessionStateDisconnected  IO_SESSION_STATE =  4  //col:1862
    IoSessionStateDisconnectedLoggedOn  IO_SESSION_STATE =  5  //col:1863
    IoSessionStateLoggedOn  IO_SESSION_STATE =  6  //col:1864
    IoSessionStateLoggedOff  IO_SESSION_STATE =  7  //col:1865
    IoSessionStateTerminated  IO_SESSION_STATE =  8  //col:1866
    IoSessionStateMax IO_SESSION_STATE = 9  //col:1867
)


type     InterfaceTypeUndefined = -1 uint32
const(
    InterfaceTypeUndefined  INTERFACE_TYPE =  -1  //col:1907
    Internal  INTERFACE_TYPE =  0  //col:1908
    Isa  INTERFACE_TYPE =  1  //col:1909
    Eisa  INTERFACE_TYPE =  2  //col:1910
    MicroChannel  INTERFACE_TYPE =  3  //col:1911
    TurboChannel  INTERFACE_TYPE =  4  //col:1912
    PCIBus  INTERFACE_TYPE =  5  //col:1913
    VMEBus  INTERFACE_TYPE =  6  //col:1914
    NuBus  INTERFACE_TYPE =  7  //col:1915
    PCMCIABus  INTERFACE_TYPE =  8  //col:1916
    CBus  INTERFACE_TYPE =  9  //col:1917
    MPIBus  INTERFACE_TYPE =  10  //col:1918
    MPSABus  INTERFACE_TYPE =  11  //col:1919
    ProcessorInternal  INTERFACE_TYPE =  12  //col:1920
    InternalPowerBus  INTERFACE_TYPE =  13  //col:1921
    PNPISABus  INTERFACE_TYPE =  14  //col:1922
    PNPBus  INTERFACE_TYPE =  15  //col:1923
    Vmcs  INTERFACE_TYPE =  16  //col:1924
    ACPIBus  INTERFACE_TYPE =  17  //col:1925
    MaximumInterfaceType INTERFACE_TYPE = 20  //col:1926
)


type     Width8Bits uint32
const(
    Width8Bits DMA_WIDTH = 1  //col:1931
    Width16Bits DMA_WIDTH = 2  //col:1932
    Width32Bits DMA_WIDTH = 3  //col:1933
    Width64Bits DMA_WIDTH = 4  //col:1934
    WidthNoWrap DMA_WIDTH = 5  //col:1935
    MaximumDmaWidth DMA_WIDTH = 6  //col:1936
)


type     Compatible uint32
const(
    Compatible DMA_SPEED = 1  //col:1941
    TypeA DMA_SPEED = 2  //col:1942
    TypeB DMA_SPEED = 3  //col:1943
    TypeC DMA_SPEED = 4  //col:1944
    TypeF DMA_SPEED = 5  //col:1945
    MaximumDmaSpeed DMA_SPEED = 6  //col:1946
)


type     ConfigurationSpaceUndefined = -1 uint32
const(
    ConfigurationSpaceUndefined  BUS_DATA_TYPE =  -1  //col:1951
    Cmos BUS_DATA_TYPE = 2  //col:1952
    EisaConfiguration BUS_DATA_TYPE = 3  //col:1953
    Pos BUS_DATA_TYPE = 4  //col:1954
    CbusConfiguration BUS_DATA_TYPE = 5  //col:1955
    PCIConfiguration BUS_DATA_TYPE = 6  //col:1956
    VMEConfiguration BUS_DATA_TYPE = 7  //col:1957
    NuBusConfiguration BUS_DATA_TYPE = 8  //col:1958
    PCMCIAConfiguration BUS_DATA_TYPE = 9  //col:1959
    MPIConfiguration BUS_DATA_TYPE = 10  //col:1960
    MPSAConfiguration BUS_DATA_TYPE = 11  //col:1961
    PNPISAConfiguration BUS_DATA_TYPE = 12  //col:1962
    SgiInternalConfiguration BUS_DATA_TYPE = 13  //col:1963
    MaximumBusDataType BUS_DATA_TYPE = 14  //col:1964
)



type IO_STATUS_BLOCK struct{
Union union
Status NTSTATUS
Pointer PVOID
}


type FILE_IO_COMPLETION_INFORMATION struct{
KeyContext PVOID
ApcContext PVOID
IoStatusBlock IO_STATUS_BLOCK
}


type FILE_BASIC_INFORMATION struct{
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
FileAttributes ULONG
}


type FILE_STANDARD_INFORMATION struct{
AllocationSize LARGE_INTEGER
EndOfFile LARGE_INTEGER
NumberOfLinks ULONG
DeletePending bool
Directory bool
}


type FILE_STANDARD_INFORMATION_EX struct{
AllocationSize LARGE_INTEGER
EndOfFile LARGE_INTEGER
NumberOfLinks ULONG
DeletePending bool
Directory bool
AlternateStream bool
MetadataAttribute bool
}


type FILE_INTERNAL_INFORMATION struct{
IndexNumber LARGE_INTEGER
}


type FILE_EA_INFORMATION struct{
EaSize ULONG
}


type FILE_ACCESS_INFORMATION struct{
AccessFlags ACCESS_MASK
}


type FILE_POSITION_INFORMATION struct{
CurrentByteOffset LARGE_INTEGER
}


type FILE_MODE_INFORMATION struct{
Mode ULONG
}


type FILE_ALIGNMENT_INFORMATION struct{
AlignmentRequirement ULONG
}


type FILE_NAME_INFORMATION struct{
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_ALL_INFORMATION struct{
BasicInformation FILE_BASIC_INFORMATION
StandardInformation FILE_STANDARD_INFORMATION
InternalInformation FILE_INTERNAL_INFORMATION
EaInformation FILE_EA_INFORMATION
AccessInformation FILE_ACCESS_INFORMATION
PositionInformation FILE_POSITION_INFORMATION
ModeInformation FILE_MODE_INFORMATION
AlignmentInformation FILE_ALIGNMENT_INFORMATION
NameInformation FILE_NAME_INFORMATION
}


type FILE_NETWORK_OPEN_INFORMATION struct{
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
AllocationSize LARGE_INTEGER
EndOfFile LARGE_INTEGER
FileAttributes ULONG
}


type FILE_ATTRIBUTE_TAG_INFORMATION struct{
FileAttributes ULONG
ReparseTag ULONG
}


type FILE_ALLOCATION_INFORMATION struct{
AllocationSize LARGE_INTEGER
}


type FILE_COMPRESSION_INFORMATION struct{
CompressedFileSize LARGE_INTEGER
CompressionFormat USHORT
CompressionUnitShift UCHAR
ChunkShift UCHAR
ClusterShift UCHAR
Reserved[3] UCHAR
}


type FILE_DISPOSITION_INFORMATION struct{
DeleteFile bool
}


type FILE_END_OF_FILE_INFORMATION struct{
EndOfFile LARGE_INTEGER
}


type FILE_END_OF_FILE_INFORMATION_EX  struct{
EndOfFile LARGE_INTEGER
PagingFileSizeInMM LARGE_INTEGER
PagingFileMaxSize LARGE_INTEGER
Flags ULONG
}


type FILE_VALID_DATA_LENGTH_INFORMATION struct{
ValidDataLength LARGE_INTEGER
}


type FILE_LINK_INFORMATION struct{
#if(PhntVersion>=PhntRedstone5) #if (PHNT_VERSION >= PHNT_REDSTONE5)
Union union
}


type FILE_LINK_INFORMATION_EX struct{
Flags ULONG
RootDirectory HANDLE
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_MOVE_CLUSTER_INFORMATION struct{
ClusterCount ULONG
RootDirectory HANDLE
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_RENAME_INFORMATION struct{
ReplaceIfExists bool
RootDirectory HANDLE
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_RENAME_INFORMATION_EX struct{
Flags ULONG
RootDirectory HANDLE
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_STREAM_INFORMATION struct{
NextEntryOffset ULONG
StreamNameLength ULONG
StreamSize LARGE_INTEGER
StreamAllocationSize LARGE_INTEGER
StreamName[1] WCHAR
}


type FILE_TRACKING_INFORMATION struct{
DestinationFile HANDLE
ObjectInformationLength ULONG
ObjectInformation[1] CHAR
}


type FILE_COMPLETION_INFORMATION struct{
Port HANDLE
Key PVOID
}


type FILE_PIPE_INFORMATION struct{
ReadMode ULONG
CompletionMode ULONG
}


type FILE_PIPE_LOCAL_INFORMATION struct{
NamedPipeType ULONG
NamedPipeConfiguration ULONG
MaximumInstances ULONG
CurrentInstances ULONG
InboundQuota ULONG
ReadDataAvailable ULONG
OutboundQuota ULONG
WriteQuotaAvailable ULONG
NamedPipeState ULONG
NamedPipeEnd ULONG
}


type FILE_PIPE_REMOTE_INFORMATION struct{
CollectDataTime LARGE_INTEGER
MaximumCollectionCount ULONG
}


type FILE_MAILSLOT_QUERY_INFORMATION struct{
MaximumMessageSize ULONG
MailslotQuota ULONG
NextMessageSize ULONG
MessagesAvailable ULONG
ReadTimeout LARGE_INTEGER
}


type FILE_MAILSLOT_SET_INFORMATION struct{
ReadTimeout PLARGE_INTEGER
}


type FILE_REPARSE_POINT_INFORMATION struct{
FileReference LONGLONG
Tag ULONG
}


type FILE_LINK_ENTRY_INFORMATION struct{
NextEntryOffset ULONG
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_LINKS_INFORMATION struct{
BytesNeeded ULONG
EntriesReturned ULONG
Entry FILE_LINK_ENTRY_INFORMATION
}


type FILE_NETWORK_PHYSICAL_NAME_INFORMATION struct{
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_STANDARD_LINK_INFORMATION struct{
NumberOfAccessibleLinks ULONG
TotalNumberOfLinks ULONG
DeletePending bool
Directory bool
}


type FILE_SFIO_RESERVE_INFORMATION struct{
RequestsPerPeriod ULONG
Period ULONG
RetryFailures bool
Discardable bool
RequestSize ULONG
NumOutstandingRequests ULONG
}


type FILE_SFIO_VOLUME_INFORMATION struct{
MaximumRequestsPerPeriod ULONG
MinimumPeriod ULONG
MinimumTransferSize ULONG
}


type FILE_IO_PRIORITY_HINT_INFORMATION_EX struct{
PriorityHint IO_PRIORITY_HINT
BoostOutstanding bool
}


type FILE_IO_COMPLETION_NOTIFICATION_INFORMATION struct{
Flags ULONG
}


type FILE_PROCESS_IDS_USING_FILE_INFORMATION struct{
NumberOfProcessIdsInList ULONG
ProcessIdList[1] ULONG_PTR
}


type FILE_IS_REMOTE_DEVICE_INFORMATION struct{
IsRemote bool
}


type FILE_NUMA_NODE_INFORMATION struct{
NodeNumber USHORT
}


type FILE_IOSTATUSBLOCK_RANGE_INFORMATION struct{
IoStatusBlockRange PUCHAR
Length ULONG
}


type FILE_REMOTE_PROTOCOL_INFORMATION struct{
ProtocolMajorVersion USHORT
ProtocolMinorVersion USHORT
ProtocolRevision USHORT
Reserved USHORT
Flags ULONG
Struct struct
Reserved[8] ULONG
}


type FILE_INTEGRITY_STREAM_INFORMATION struct{
ChecksumAlgorithm USHORT
ChecksumChunkShift UCHAR
ClusterShift UCHAR
Flags ULONG
}


type FILE_VOLUME_NAME_INFORMATION struct{
DeviceNameLength ULONG
DeviceName[1] WCHAR
}


type FILE_ID_INFORMATION struct{
VolumeSerialNumber ULONGLONG
FileId FILE_ID_128
}


type FILE_ID_EXTD_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
ReparsePointTag ULONG
FileId FILE_ID_128
FileName[1] WCHAR
}


type FILE_LINK_ENTRY_FULL_ID_INFORMATION struct{
NextEntryOffset ULONG
ParentFileId FILE_ID_128
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_LINKS_FULL_ID_INFORMATION  struct{
BytesNeeded ULONG
EntriesReturned ULONG
Entry FILE_LINK_ENTRY_FULL_ID_INFORMATION
}


type FILE_ID_EXTD_BOTH_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
ReparsePointTag ULONG
FileId FILE_ID_128
ShortNameLength CCHAR
ShortName[12] WCHAR
FileName[1] WCHAR
}


type FILE_STAT_INFORMATION struct{
FileId LARGE_INTEGER
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
AllocationSize LARGE_INTEGER
EndOfFile LARGE_INTEGER
FileAttributes ULONG
ReparseTag ULONG
NumberOfLinks ULONG
EffectiveAccess ACCESS_MASK
}


type FILE_MEMORY_PARTITION_INFORMATION struct{
OwnerPartitionHandle HANDLE
Union union
Struct struct
NoCrossPartitionAccess UCHAR
Spare[3] UCHAR
}


type FILE_STAT_LX_INFORMATION struct{
FileId LARGE_INTEGER
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
AllocationSize LARGE_INTEGER
EndOfFile LARGE_INTEGER
FileAttributes ULONG
ReparseTag ULONG
NumberOfLinks ULONG
EffectiveAccess ACCESS_MASK
LxFlags ULONG
LxUid ULONG
LxGid ULONG
LxMode ULONG
LxDeviceIdMajor ULONG
LxDeviceIdMinor ULONG
}


type FILE_CASE_SENSITIVE_INFORMATION struct{
Flags ULONG
}


type FILE_KNOWN_FOLDER_INFORMATION struct{
Type FILE_KNOWN_FOLDER_TYPE
}


type FILE_DIRECTORY_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_FULL_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
FileName[1] WCHAR
}


type FILE_ID_FULL_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
FileId LARGE_INTEGER
FileName[1] WCHAR
}


type FILE_BOTH_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
ShortNameLength CCHAR
ShortName[12] WCHAR
FileName[1] WCHAR
}


type FILE_ID_BOTH_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
EaSize ULONG
ShortNameLength CCHAR
ShortName[12] WCHAR
FileId LARGE_INTEGER
FileName[1] WCHAR
}


type FILE_NAMES_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
FileNameLength ULONG
FileName[1] WCHAR
}


type FILE_ID_GLOBAL_TX_DIR_INFORMATION struct{
NextEntryOffset ULONG
FileIndex ULONG
CreationTime LARGE_INTEGER
LastAccessTime LARGE_INTEGER
LastWriteTime LARGE_INTEGER
ChangeTime LARGE_INTEGER
EndOfFile LARGE_INTEGER
AllocationSize LARGE_INTEGER
FileAttributes ULONG
FileNameLength ULONG
FileId LARGE_INTEGER
LockingTransactionId GUID
TxInfoFlags ULONG
FileName[1] WCHAR
}


type FILE_OBJECTID_INFORMATION struct{
FileReference LONGLONG
Union union
Struct struct
BirthVolumeId[16] UCHAR
BirthObjectId[16] UCHAR
DomainId[16] UCHAR
}


type FILE_FULL_EA_INFORMATION struct{
NextEntryOffset ULONG
Flags UCHAR
EaNameLength UCHAR
EaValueLength USHORT
EaName[1] CHAR
}


type FILE_GET_EA_INFORMATION struct{
NextEntryOffset ULONG
EaNameLength UCHAR
EaName[1] CHAR
}


type FILE_GET_QUOTA_INFORMATION struct{
NextEntryOffset ULONG
SidLength ULONG
Sid SID
}


type FILE_QUOTA_INFORMATION struct{
NextEntryOffset ULONG
SidLength ULONG
ChangeTime LARGE_INTEGER
QuotaUsed LARGE_INTEGER
QuotaThreshold LARGE_INTEGER
QuotaLimit LARGE_INTEGER
Sid SID
}


type FILE_FS_VOLUME_INFORMATION struct{
VolumeCreationTime LARGE_INTEGER
VolumeSerialNumber ULONG
VolumeLabelLength ULONG
SupportsObjects bool
VolumeLabel[1] WCHAR
}


type FILE_FS_LABEL_INFORMATION struct{
VolumeLabelLength ULONG
VolumeLabel[1] WCHAR
}


type FILE_FS_SIZE_INFORMATION struct{
TotalAllocationUnits LARGE_INTEGER
AvailableAllocationUnits LARGE_INTEGER
SectorsPerAllocationUnit ULONG
BytesPerSector ULONG
}


type FILE_FS_CONTROL_INFORMATION struct{
FreeSpaceStartFiltering LARGE_INTEGER
FreeSpaceThreshold LARGE_INTEGER
FreeSpaceStopFiltering LARGE_INTEGER
DefaultQuotaThreshold LARGE_INTEGER
DefaultQuotaLimit LARGE_INTEGER
FileSystemControlFlags ULONG
}


type FILE_FS_FULL_SIZE_INFORMATION struct{
TotalAllocationUnits LARGE_INTEGER
CallerAvailableAllocationUnits LARGE_INTEGER
ActualAvailableAllocationUnits LARGE_INTEGER
SectorsPerAllocationUnit ULONG
BytesPerSector ULONG
}


type FILE_FS_OBJECTID_INFORMATION struct{
ObjectId[16] UCHAR
ExtendedInfo[48] UCHAR
}


type FILE_FS_DEVICE_INFORMATION struct{
DeviceType DEVICE_TYPE
Characteristics ULONG
}


type FILE_FS_ATTRIBUTE_INFORMATION struct{
FileSystemAttributes ULONG
MaximumComponentNameLength LONG
FileSystemNameLength ULONG
FileSystemName[1] WCHAR
}


type FILE_FS_DRIVER_PATH_INFORMATION struct{
DriverInPath bool
DriverNameLength ULONG
DriverName[1] WCHAR
}


type FILE_FS_VOLUME_FLAGS_INFORMATION struct{
Flags ULONG
}


type FILE_FS_SECTOR_SIZE_INFORMATION struct{
LogicalBytesPerSector ULONG
PhysicalBytesPerSectorForAtomicity ULONG
PhysicalBytesPerSectorForPerformance ULONG
FileSystemEffectivePhysicalBytesPerSectorForAtomicity ULONG
Flags ULONG
ByteOffsetForSectorAlignment ULONG
ByteOffsetForPartitionAlignment ULONG
}


type FILE_FS_DATA_COPY_INFORMATION struct{
NumberOfCopies ULONG
}


type FILE_FS_METADATA_SIZE_INFORMATION struct{
TotalMetadataAllocationUnits LARGE_INTEGER
SectorsPerAllocationUnit ULONG
BytesPerSector ULONG
}


type FILE_FS_FULL_SIZE_INFORMATION_EX struct{
ActualTotalAllocationUnits ULONGLONG
ActualAvailableAllocationUnits ULONGLONG
ActualPoolUnavailableAllocationUnits ULONGLONG
CallerTotalAllocationUnits ULONGLONG
CallerAvailableAllocationUnits ULONGLONG
CallerPoolUnavailableAllocationUnits ULONGLONG
UsedAllocationUnits ULONGLONG
TotalReservedAllocationUnits ULONGLONG
VolumeStorageReserveAllocationUnits ULONGLONG
AvailableCommittedAllocationUnits ULONGLONG
PoolAvailableAllocationUnits ULONGLONG
SectorsPerAllocationUnit ULONG
BytesPerSector ULONG
}


type IO_COMPLETION_BASIC_INFORMATION struct{
Depth LONG
}


type REPARSE_DATA_BUFFER struct{
ReparseTag ULONG
ReparseDataLength USHORT
Reserved USHORT
FieldSizeBytes(ReparseDataLength) _Field_size_bytes_(ReparseDataLength)
Union union
Struct struct
SubstituteNameOffset USHORT
SubstituteNameLength USHORT
PrintNameOffset USHORT
PrintNameLength USHORT
Flags ULONG
PathBuffer[1] WCHAR
}


type FILE_PIPE_ASSIGN_EVENT_BUFFER struct{
EventHandle HANDLE
KeyValue ULONG
}


type FILE_PIPE_PEEK_BUFFER struct{
NamedPipeState ULONG
ReadDataAvailable ULONG
NumberOfMessages ULONG
MessageLength ULONG
Data[1] CHAR
}


type FILE_PIPE_EVENT_BUFFER struct{
NamedPipeState ULONG
EntryType ULONG
ByteCount ULONG
KeyValue ULONG
NumberRequests ULONG
}


type FILE_PIPE_WAIT_FOR_BUFFER struct{
Timeout LARGE_INTEGER
NameLength ULONG
TimeoutSpecified bool
Name[1] WCHAR
}


type FILE_PIPE_CLIENT_PROCESS_BUFFER struct{
#if!Defined(BuildWow6432) #if !defined(BUILD_WOW6432)
ClientSession PVOID
ClientProcess PVOID
#else #else
ClientSession ULONGLONG
ClientProcess ULONGLONG
#endif #endif
}


type FILE_PIPE_CLIENT_PROCESS_BUFFER_V2  struct{
ClientSession ULONGLONG
#if!Defined(BuildWow6432) #if !defined(BUILD_WOW6432)
ClientProcess PVOID
#else #else
ClientProcess ULONGLONG
#endif #endif
}


type FILE_PIPE_CLIENT_PROCESS_BUFFER_EX struct{
#if!Defined(BuildWow6432) #if !defined(BUILD_WOW6432)
ClientSession PVOID
ClientProcess PVOID
#else #else
ClientSession ULONGLONG
ClientProcess ULONGLONG
#endif #endif
}


type FILE_PIPE_SILO_ARRIVAL_INPUT struct{
JobHandle HANDLE
}


type FILE_PIPE_CREATE_SYMLINK_INPUT struct{
NameOffset USHORT
NameLength USHORT
SubstituteNameOffset USHORT
SubstituteNameLength USHORT
Flags ULONG
}


type FILE_PIPE_DELETE_SYMLINK_INPUT struct{
NameOffset USHORT
NameLength USHORT
}


type FILE_MAILSLOT_PEEK_BUFFER struct{
ReadDataAvailable ULONG
NumberOfMessages ULONG
MessageLength ULONG
}


type MOUNTMGR_CREATE_POINT_INPUT struct{
SymbolicLinkNameOffset USHORT
SymbolicLinkNameLength USHORT
DeviceNameOffset USHORT
DeviceNameLength USHORT
}


type MOUNTMGR_MOUNT_POINT struct{
SymbolicLinkNameOffset ULONG
SymbolicLinkNameLength USHORT
Reserved1 USHORT
UniqueIdOffset ULONG
UniqueIdLength USHORT
Reserved2 USHORT
DeviceNameOffset ULONG
DeviceNameLength USHORT
Reserved3 USHORT
}


type MOUNTMGR_MOUNT_POINTS struct{
Size ULONG
NumberOfMountPoints ULONG
MountPoints[1] MOUNTMGR_MOUNT_POINT
}


type MOUNTMGR_DRIVE_LETTER_TARGET struct{
DeviceNameLength USHORT
DeviceName[1] WCHAR
}


type MOUNTMGR_DRIVE_LETTER_INFORMATION struct{
DriveLetterWasAssigned bool
CurrentDriveLetter UCHAR
}


type MOUNTMGR_VOLUME_MOUNT_POINT struct{
SourceVolumeNameOffset USHORT
SourceVolumeNameLength USHORT
TargetVolumeNameOffset USHORT
TargetVolumeNameLength USHORT
}


type MOUNTMGR_CHANGE_NOTIFY_INFO struct{
EpicNumber ULONG
}


type MOUNTMGR_TARGET_NAME struct{
DeviceNameLength USHORT
DeviceName[1] WCHAR
}


type MOUNTDEV_NAME struct{
NameLength USHORT
Name[1] WCHAR
}


type MOUNTMGR_VOLUME_PATHS struct{
MultiSzLength ULONG
MultiSz[1] WCHAR
}



type (
Ntioapi interface{
 * Attribution 4.0 International ()(ok bool)//col:175
typedef VOID ()(ok bool)//col:189
#if ()(ok bool)//col:446
#if ()(ok bool)//col:501
typedef DECLSPEC_ALIGN()(ok bool)//col:630
#if ()(ok bool)//col:729
NtCreateFile()(ok bool)//col:1668
#if ()(ok bool)//col:1719
NtCreateIoCompletion()(ok bool)//col:1855
#if ()(ok bool)//col:1927
#if ()(ok bool)//col:2009
#define REPARSE_DATA_BUFFER_HEADER_SIZE UFIELD_OFFSET()(ok bool)//col:2055
#if !defined()(ok bool)//col:2096
#if !defined()(ok bool)//col:2108
#if !defined()(ok bool)//col:2124
    ()(ok bool)//col:2165
#define FSCTL_MAILSLOT_PEEK             CTL_CODE()(ok bool)//col:2188
#define IOCTL_MOUNTMGR_CREATE_POINT                 CTL_CODE()(ok bool)//col:2220
#define MOUNTMGR_IS_DRIVE_LETTER()(ok bool)//col:2335
}
)

func NewNtioapi() { return & ntioapi{} }

func (n *ntioapi) * Attribution 4.0 International ()(ok bool){//col:175
/* * Attribution 4.0 International (CC BY 4.0) license. 
 * 
 * You must give appropriate credit, provide a link to the license, and 
 * indicate if changes were made. You may do so in any reasonable manner, but 
 * not in any way that suggests the licensor endorses you or your use.
#ifndef _NTIOAPI_H
#define _NTIOAPI_H
#define FILE_SUPERSEDE 0x00000000
#define FILE_OPEN 0x00000001
#define FILE_CREATE 0x00000002
#define FILE_OPEN_IF 0x00000003
#define FILE_OVERWRITE 0x00000004
#define FILE_OVERWRITE_IF 0x00000005
#define FILE_MAXIMUM_DISPOSITION 0x00000005
#define FILE_DIRECTORY_FILE 0x00000001
#define FILE_WRITE_THROUGH 0x00000002
#define FILE_SEQUENTIAL_ONLY 0x00000004
#define FILE_NO_INTERMEDIATE_BUFFERING 0x00000008
#define FILE_SYNCHRONOUS_IO_ALERT 0x00000010
#define FILE_SYNCHRONOUS_IO_NONALERT 0x00000020
#define FILE_NON_DIRECTORY_FILE 0x00000040
#define FILE_CREATE_TREE_CONNECTION 0x00000080
#define FILE_COMPLETE_IF_OPLOCKED 0x00000100
#define FILE_NO_EA_KNOWLEDGE 0x00000200
#define FILE_OPEN_FOR_RECOVERY 0x00000400
#define FILE_RANDOM_ACCESS 0x00000800
#define FILE_DELETE_ON_CLOSE 0x00001000
#define FILE_OPEN_BY_FILE_ID 0x00002000
#define FILE_OPEN_FOR_BACKUP_INTENT 0x00004000
#define FILE_NO_COMPRESSION 0x00008000
#if (PHNT_VERSION >= PHNT_WIN7)
#define FILE_OPEN_REQUIRING_OPLOCK 0x00010000
#define FILE_DISALLOW_EXCLUSIVE 0x00020000
#endif
#if (PHNT_VERSION >= PHNT_WIN8)
#define FILE_SESSION_AWARE 0x00040000
#endif
#define FILE_RESERVE_OPFILTER 0x00100000
#define FILE_OPEN_REPARSE_POINT 0x00200000
#define FILE_OPEN_NO_RECALL 0x00400000
#define FILE_OPEN_FOR_FREE_SPACE_QUERY 0x00800000
#define FILE_COPY_STRUCTURED_STORAGE 0x00000041
#define FILE_STRUCTURED_STORAGE 0x00000441
#define FILE_SUPERSEDED 0x00000000
#define FILE_OPENED 0x00000001
#define FILE_CREATED 0x00000002
#define FILE_OVERWRITTEN 0x00000003
#define FILE_EXISTS 0x00000004
#define FILE_DOES_NOT_EXIST 0x00000005
#define FILE_WRITE_TO_END_OF_FILE 0xffffffff
#define FILE_USE_FILE_POINTER_POSITION 0xfffffffe
#define FILE_BYTE_ALIGNMENT 0x00000000
#define FILE_WORD_ALIGNMENT 0x00000001
#define FILE_LONG_ALIGNMENT 0x00000003
#define FILE_QUAD_ALIGNMENT 0x00000007
#define FILE_OCTA_ALIGNMENT 0x0000000f
#define FILE_32_BYTE_ALIGNMENT 0x0000001f
#define FILE_64_BYTE_ALIGNMENT 0x0000003f
#define FILE_128_BYTE_ALIGNMENT 0x0000007f
#define FILE_256_BYTE_ALIGNMENT 0x000000ff
#define FILE_512_BYTE_ALIGNMENT 0x000001ff
#define MAXIMUM_FILENAME_LENGTH 256
#define FILE_NEED_EA 0x00000080
#define FILE_EA_TYPE_BINARY 0xfffe
#define FILE_EA_TYPE_ASCII 0xfffd
#define FILE_EA_TYPE_BITMAP 0xfffb
#define FILE_EA_TYPE_METAFILE 0xfffa
#define FILE_EA_TYPE_ICON 0xfff9
#define FILE_EA_TYPE_EA 0xffee
#define FILE_EA_TYPE_MVMT 0xffdf
#define FILE_EA_TYPE_MVST 0xffde
#define FILE_EA_TYPE_ASN1 0xffdd
#define FILE_EA_TYPE_FAMILY_IDS 0xff01
#define FILE_REMOVABLE_MEDIA 0x00000001
#define FILE_READ_ONLY_DEVICE 0x00000002
#define FILE_FLOPPY_DISKETTE 0x00000004
#define FILE_WRITE_ONCE_MEDIA 0x00000008
#define FILE_REMOTE_DEVICE 0x00000010
#define FILE_DEVICE_IS_MOUNTED 0x00000020
#define FILE_VIRTUAL_VOLUME 0x00000040
#define FILE_AUTOGENERATED_DEVICE_NAME 0x00000080
#define FILE_DEVICE_SECURE_OPEN 0x00000100
#define FILE_CHARACTERISTIC_PNP_DEVICE 0x00000800
#define FILE_CHARACTERISTIC_TS_DEVICE 0x00001000
#define FILE_CHARACTERISTIC_WEBDAV_DEVICE 0x00002000
#define FILE_CHARACTERISTIC_CSV 0x00010000
#define FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL 0x00020000
#define FILE_PORTABLE_DEVICE 0x00040000
#define FILE_REMOTE_DEVICE_VSMB 0x00080000
#define FILE_DEVICE_REQUIRE_SECURITY_CHECK 0x00100000
#define FILE_PIPE_BYTE_STREAM_TYPE 0x00000000
#define FILE_PIPE_MESSAGE_TYPE 0x00000001
#define FILE_PIPE_ACCEPT_REMOTE_CLIENTS 0x00000000
#define FILE_PIPE_REJECT_REMOTE_CLIENTS 0x00000002
#define FILE_PIPE_TYPE_VALID_MASK 0x00000003
#define FILE_PIPE_QUEUE_OPERATION 0x00000000
#define FILE_PIPE_COMPLETE_OPERATION 0x00000001
#define FILE_PIPE_BYTE_STREAM_MODE 0x00000000
#define FILE_PIPE_MESSAGE_MODE 0x00000001
#define FILE_PIPE_INBOUND 0x00000000
#define FILE_PIPE_OUTBOUND 0x00000001
#define FILE_PIPE_FULL_DUPLEX 0x00000002
#define FILE_PIPE_DISCONNECTED_STATE 0x00000001
#define FILE_PIPE_LISTENING_STATE 0x00000002
#define FILE_PIPE_CONNECTED_STATE 0x00000003
#define FILE_PIPE_CLOSING_STATE 0x00000004
#define FILE_PIPE_CLIENT_END 0x00000000
#define FILE_PIPE_SERVER_END 0x00000001
#define FILE_PIPE_UNLIMITED_INSTANCES 0xffffffff 
#define MAILSLOT_SIZE_AUTO 0
typedef struct _IO_STATUS_BLOCK
{
    union
    {
        NTSTATUS Status;
        PVOID Pointer;
    };
    ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;*/
return true
}

func (n *ntioapi)typedef VOID ()(ok bool){//col:189
/*typedef VOID (NTAPI *PIO_APC_ROUTINE)(
    _In_ PVOID ApcContext,
    _In_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG Reserved
    );
typedef struct _FILE_IO_COMPLETION_INFORMATION
{
    PVOID KeyContext;
    PVOID ApcContext;
    IO_STATUS_BLOCK IoStatusBlock;
} FILE_IO_COMPLETION_INFORMATION, *PFILE_IO_COMPLETION_INFORMATION;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:446
/*#if (PHNT_VERSION >= PHNT_REDSTONE5)
#define FILE_LINK_REPLACE_IF_EXISTS 0x00000001
#define FILE_LINK_POSIX_SEMANTICS 0x00000002
#define FILE_LINK_SUPPRESS_STORAGE_RESERVE_INHERITANCE 0x00000008
#define FILE_LINK_NO_INCREASE_AVAILABLE_SPACE 0x00000010
#define FILE_LINK_NO_DECREASE_AVAILABLE_SPACE 0x00000020
#define FILE_LINK_PRESERVE_AVAILABLE_SPACE 0x00000030
#define FILE_LINK_IGNORE_READONLY_ATTRIBUTE 0x00000040
#endif
#if (PHNT_VERSION >= PHNT_19H1)
#define FILE_LINK_FORCE_RESIZE_TARGET_SR 0x00000080
#define FILE_LINK_FORCE_RESIZE_SOURCE_SR 0x00000100
#define FILE_LINK_FORCE_RESIZE_SR 0x00000180
#endif
typedef struct _FILE_LINK_INFORMATION
{
#if (PHNT_VERSION >= PHNT_REDSTONE5)
    union
    {
    };
#else
    BOOLEAN ReplaceIfExists;
#endif
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_INFORMATION, *PFILE_LINK_INFORMATION;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:501
/*#if (PHNT_VERSION >= PHNT_REDSTONE)
#define FILE_RENAME_REPLACE_IF_EXISTS 0x00000001
#define FILE_RENAME_POSIX_SEMANTICS 0x00000002
#endif
#if (PHNT_VERSION >= PHNT_REDSTONE3)
#define FILE_RENAME_SUPPRESS_PIN_STATE_INHERITANCE 0x00000004
#endif
#if (PHNT_VERSION >= PHNT_REDSTONE5)
#define FILE_RENAME_SUPPRESS_STORAGE_RESERVE_INHERITANCE 0x00000008
#define FILE_RENAME_NO_INCREASE_AVAILABLE_SPACE 0x00000010
#define FILE_RENAME_NO_DECREASE_AVAILABLE_SPACE 0x00000020
#define FILE_RENAME_PRESERVE_AVAILABLE_SPACE 0x00000030
#define FILE_RENAME_IGNORE_READONLY_ATTRIBUTE 0x00000040
#endif
#if (PHNT_VERSION >= PHNT_19H1)
#define FILE_RENAME_FORCE_RESIZE_TARGET_SR 0x00000080
#define FILE_RENAME_FORCE_RESIZE_SOURCE_SR 0x00000100
#define FILE_RENAME_FORCE_RESIZE_SR 0x00000180
#endif
typedef struct _FILE_RENAME_INFORMATION_EX
{
    ULONG Flags;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFORMATION_EX, *PFILE_RENAME_INFORMATION_EX;*/
return true
}

func (n *ntioapi)typedef DECLSPEC_ALIGN()(ok bool){//col:630
/*typedef DECLSPEC_ALIGN(8) struct _FILE_IO_PRIORITY_HINT_INFORMATION
{
    IO_PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:729
/*#if (_WIN32_WINNT < PHNT_WIN8)
    struct
    {
        ULONG Reserved[16];
    } ProtocolSpecificReserved;
#endif
#if (PHNT_VERSION >= PHNT_WIN8)
    union
    {
        struct
        {
            struct
            {
                ULONG Capabilities;
            } Server;
            struct
            {
                ULONG Capabilities;
#if (PHNT_VERSION >= PHNT_21H1)
                ULONG ShareFlags;
#else
                ULONG CachingFlags;
#endif
#if (PHNT_VERSION >= PHNT_REDSTONE5)
                UCHAR ShareType;
                UCHAR Reserved0[3];
                ULONG Reserved1;
#endif
            } Share;
        } Smb2;
        ULONG Reserved[16];
    } ProtocolSpecific;
#endif
} FILE_REMOTE_PROTOCOL_INFORMATION, *PFILE_REMOTE_PROTOCOL_INFORMATION;*/
return true
}

func (n *ntioapi)NtCreateFile()(ok bool){//col:1668
/*NtCreateFile(
    _Out_ PHANDLE FileHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_opt_ PLARGE_INTEGER AllocationSize,
    _In_ ULONG FileAttributes,
    _In_ ULONG ShareAccess,
    _In_ ULONG CreateDisposition,
    _In_ ULONG CreateOptions,
    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,
    _In_ ULONG EaLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateNamedPipeFile(
    _Out_ PHANDLE FileHandle,
    _In_ ULONG DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG ShareAccess,
    _In_ ULONG CreateDisposition,
    _In_ ULONG CreateOptions,
    _In_ ULONG NamedPipeType,
    _In_ ULONG ReadMode,
    _In_ ULONG CompletionMode,
    _In_ ULONG MaximumInstances,
    _In_ ULONG InboundQuota,
    _In_ ULONG OutboundQuota,
    _In_opt_ PLARGE_INTEGER DefaultTimeout
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateMailslotFile(
    _Out_ PHANDLE FileHandle,
    _In_ ULONG DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG CreateOptions,
    _In_ ULONG MailslotQuota,
    _In_ ULONG MaximumMessageSize,
    _In_ PLARGE_INTEGER ReadTimeout
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenFile(
    _Out_ PHANDLE FileHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG ShareAccess,
    _In_ ULONG OpenOptions
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeleteFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFlushBuffersFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );
#define FLUSH_FLAGS_FILE_DATA_ONLY 0x00000001
#define FLUSH_FLAGS_NO_SYNC 0x00000002
#if (PHNT_VERSION >= PHNT_WIN8)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFlushBuffersFileEx(
    _In_ HANDLE FileHandle,
    _In_ ULONG Flags,
    _In_reads_bytes_(ParametersSize) PVOID Parameters,
    _In_ ULONG ParametersSize,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );
#if (PHNT_VERSION >= PHNT_REDSTONE2)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryInformationByName(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_reads_bytes_(Length) PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryDirectoryFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass,
    _In_ BOOLEAN ReturnSingleEntry,
    _In_opt_ PUNICODE_STRING FileName,
    _In_ BOOLEAN RestartScan
    );
#if (PHNT_VERSION >= PHNT_REDSTONE3)
#define FILE_QUERY_RESTART_SCAN 0x00000001
#define FILE_QUERY_RETURN_SINGLE_ENTRY 0x00000002
#define FILE_QUERY_INDEX_SPECIFIED 0x00000004
#define FILE_QUERY_RETURN_ON_DISK_ENTRIES_ONLY 0x00000008
#if (PHNT_VERSION >= PHNT_REDSTONE5)
#define FILE_QUERY_NO_CURSOR_UPDATE 0x00000010
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryDirectoryFileEx(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass,
    _In_ ULONG QueryFlags,
    _In_opt_ PUNICODE_STRING FileName
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryEaFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length,
    _In_ BOOLEAN ReturnSingleEntry,
    _In_reads_bytes_opt_(EaListLength) PVOID EaList,
    _In_ ULONG EaListLength,
    _In_opt_ PULONG EaIndex,
    _In_ BOOLEAN RestartScan
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetEaFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_reads_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryQuotaInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length,
    _In_ BOOLEAN ReturnSingleEntry,
    _In_reads_bytes_opt_(SidListLength) PVOID SidList,
    _In_ ULONG SidListLength,
    _In_opt_ PSID StartSid,
    _In_ BOOLEAN RestartScan
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetQuotaInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_reads_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryVolumeInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID FsInformation,
    _In_ ULONG Length,
    _In_ FSINFOCLASS FsInformationClass
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetVolumeInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_reads_bytes_(Length) PVOID FsInformation,
    _In_ ULONG Length,
    _In_ FSINFOCLASS FsInformationClass
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelIoFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelIoFileEx(
    _In_ HANDLE FileHandle,
    _In_opt_ PIO_STATUS_BLOCK IoRequestToCancel,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );
#endif
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelSynchronousIoFile(
    _In_ HANDLE ThreadHandle,
    _In_opt_ PIO_STATUS_BLOCK IoRequestToCancel,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtDeviceIoControlFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG IoControlCode,
    _In_reads_bytes_opt_(InputBufferLength) PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_writes_bytes_opt_(OutputBufferLength) PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtFsControlFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG FsControlCode,
    _In_reads_bytes_opt_(InputBufferLength) PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_writes_bytes_opt_(OutputBufferLength) PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReadFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWriteFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_reads_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtReadFileScatter(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PFILE_SEGMENT_ELEMENT SegmentArray,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtWriteFileGather(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PFILE_SEGMENT_ELEMENT SegmentArray,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtLockFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PLARGE_INTEGER ByteOffset,
    _In_ PLARGE_INTEGER Length,
    _In_ ULONG Key,
    _In_ BOOLEAN FailImmediately,
    _In_ BOOLEAN ExclusiveLock
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtUnlockFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PLARGE_INTEGER ByteOffset,
    _In_ PLARGE_INTEGER Length,
    _In_ ULONG Key
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryAttributesFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PFILE_BASIC_INFORMATION FileInformation
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryFullAttributesFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PFILE_NETWORK_OPEN_INFORMATION FileInformation
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtNotifyChangeDirectoryFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG Length,
    _In_ ULONG CompletionFilter,
    _In_ BOOLEAN WatchTree
    );
typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    DirectoryNotifyMaximumInformation
} DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:1719
/*#if (PHNT_VERSION >= PHNT_REDSTONE3)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtNotifyChangeDirectoryFileEx(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_writes_bytes_(Length) PVOID Buffer,
    _In_ ULONG Length,
    _In_ ULONG CompletionFilter,
    _In_ BOOLEAN WatchTree,
    _In_opt_ DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtLoadDriver(
    _In_ PUNICODE_STRING DriverServiceName
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtUnloadDriver(
    _In_ PUNICODE_STRING DriverServiceName
    );
#ifndef IO_COMPLETION_QUERY_STATE
#define IO_COMPLETION_QUERY_STATE 0x0001
#endif
#ifndef IO_COMPLETION_MODIFY_STATE
#define IO_COMPLETION_MODIFY_STATE 0x0002
#endif
#ifndef IO_COMPLETION_ALL_ACCESS
#define IO_COMPLETION_ALL_ACCESS (IO_COMPLETION_QUERY_STATE|IO_COMPLETION_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE) 
#endif
typedef enum _IO_COMPLETION_INFORMATION_CLASS
{
    IoCompletionBasicInformation
} IO_COMPLETION_INFORMATION_CLASS;*/
return true
}

func (n *ntioapi)NtCreateIoCompletion()(ok bool){//col:1855
/*NtCreateIoCompletion(
    _Out_ PHANDLE IoCompletionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ ULONG Count
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenIoCompletion(
    _Out_ PHANDLE IoCompletionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtQueryIoCompletion(
    _In_ HANDLE IoCompletionHandle,
    _In_ IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
    _Out_writes_bytes_(IoCompletionInformationLength) PVOID IoCompletionInformation,
    _In_ ULONG IoCompletionInformationLength,
    _Out_opt_ PULONG ReturnLength
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetIoCompletion(
    _In_ HANDLE IoCompletionHandle,
    _In_opt_ PVOID KeyContext,
    _In_opt_ PVOID ApcContext,
    _In_ NTSTATUS IoStatus,
    _In_ ULONG_PTR IoStatusInformation
    );
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtSetIoCompletionEx(
    _In_ HANDLE IoCompletionHandle,
    _In_ HANDLE IoCompletionPacketHandle,
    _In_opt_ PVOID KeyContext,
    _In_opt_ PVOID ApcContext,
    _In_ NTSTATUS IoStatus,
    _In_ ULONG_PTR IoStatusInformation
    );
#endif
NTSYSCALLAPI
NTSTATUS
NTAPI
NtRemoveIoCompletion(
    _In_ HANDLE IoCompletionHandle,
    _Out_ PVOID *KeyContext,
    _Out_ PVOID *ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_opt_ PLARGE_INTEGER Timeout
    );
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtRemoveIoCompletionEx(
    _In_ HANDLE IoCompletionHandle,
    _Out_writes_to_(Count, *NumEntriesRemoved) PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation,
    _In_ ULONG Count,
    _Out_ PULONG NumEntriesRemoved,
    _In_opt_ PLARGE_INTEGER Timeout,
    _In_ BOOLEAN Alertable
    );
#endif
#if (PHNT_VERSION >= PHNT_WIN8)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCreateWaitCompletionPacket(
    _Out_ PHANDLE WaitCompletionPacketHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtAssociateWaitCompletionPacket(
    _In_ HANDLE WaitCompletionPacketHandle,
    _In_ HANDLE IoCompletionHandle,
    _In_ HANDLE TargetObjectHandle,
    _In_opt_ PVOID KeyContext,
    _In_opt_ PVOID ApcContext,
    _In_ NTSTATUS IoStatus,
    _In_ ULONG_PTR IoStatusInformation,
    _Out_opt_ PBOOLEAN AlreadySignaled
    );
NTSYSCALLAPI
NTSTATUS
NTAPI
NtCancelWaitCompletionPacket(
    _In_ HANDLE WaitCompletionPacketHandle,
    _In_ BOOLEAN RemoveSignaledPacket
    );
#endif
typedef enum _IO_SESSION_EVENT
{
    IoSessionEventIgnore,
    IoSessionEventCreated,
    IoSessionEventTerminated,
    IoSessionEventConnected,
    IoSessionEventDisconnected,
    IoSessionEventLogon,
    IoSessionEventLogoff,
    IoSessionEventMax
} IO_SESSION_EVENT;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:1927
/*#if (PHNT_MODE != PHNT_MODE_KERNEL)
#if (PHNT_VERSION >= PHNT_VISTA)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtOpenSession(
    _Out_ PHANDLE SessionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );
#endif
#endif
#if (PHNT_VERSION >= PHNT_WIN7)
NTSYSCALLAPI
NTSTATUS
NTAPI
NtNotifyChangeSession(
    _In_ HANDLE SessionHandle,
    _In_ ULONG ChangeSequenceNumber,
    _In_ PLARGE_INTEGER ChangeTimeStamp,
    _In_ IO_SESSION_EVENT Event,
    _In_ IO_SESSION_STATE NewState,
    _In_ IO_SESSION_STATE PreviousState,
    _In_reads_bytes_opt_(PayloadSize) PVOID Payload,
    _In_ ULONG PayloadSize
    );
#endif
typedef enum _INTERFACE_TYPE
{
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType
} INTERFACE_TYPE, *PINTERFACE_TYPE;*/
return true
}

func (n *ntioapi)#if ()(ok bool){//col:2009
/*#if (PHNT_VERSION >= PHNT_REDSTONE4)
#endif
typedef struct _REPARSE_DATA_BUFFER
{
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    _Field_size_bytes_(ReparseDataLength)
    union
    {
        struct
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            ULONG Flags;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct
        {
            UCHAR DataBuffer[1];
        } GenericReparseBuffer;
    };
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;*/
return true
}

func (n *ntioapi)#define REPARSE_DATA_BUFFER_HEADER_SIZE UFIELD_OFFSET()(ok bool){//col:2055
/*#define REPARSE_DATA_BUFFER_HEADER_SIZE UFIELD_OFFSET(REPARSE_DATA_BUFFER, GenericReparseBuffer)
#define DEVICE_NAMED_PIPE L"\\Device\\NamedPipe\\"
#define FSCTL_PIPE_ASSIGN_EVENT             CTL_CODE(FILE_DEVICE_NAMED_PIPE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_DISCONNECT               CTL_CODE(FILE_DEVICE_NAMED_PIPE, 1, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_LISTEN                   CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_PEEK                     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 3, METHOD_BUFFERED, FILE_READ_DATA)
#define FSCTL_PIPE_QUERY_EVENT              CTL_CODE(FILE_DEVICE_NAMED_PIPE, 4, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_TRANSCEIVE               CTL_CODE(FILE_DEVICE_NAMED_PIPE, 5, METHOD_NEITHER,  FILE_READ_DATA | FILE_WRITE_DATA)
#define FSCTL_PIPE_WAIT                     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 6, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_IMPERSONATE              CTL_CODE(FILE_DEVICE_NAMED_PIPE, 7, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_SET_CLIENT_PROCESS       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_QUERY_CLIENT_PROCESS     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 9, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_GET_PIPE_ATTRIBUTE       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 10, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_SET_PIPE_ATTRIBUTE       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 11, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_GET_CONNECTION_ATTRIBUTE CTL_CODE(FILE_DEVICE_NAMED_PIPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_SET_CONNECTION_ATTRIBUTE CTL_CODE(FILE_DEVICE_NAMED_PIPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_GET_HANDLE_ATTRIBUTE     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_SET_HANDLE_ATTRIBUTE     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_FLUSH                    CTL_CODE(FILE_DEVICE_NAMED_PIPE, 16, METHOD_BUFFERED, FILE_WRITE_DATA)
#define FSCTL_PIPE_DISABLE_IMPERSONATE      CTL_CODE(FILE_DEVICE_NAMED_PIPE, 17, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_SILO_ARRIVAL             CTL_CODE(FILE_DEVICE_NAMED_PIPE, 18, METHOD_BUFFERED, FILE_WRITE_DATA)
#define FSCTL_PIPE_CREATE_SYMLINK           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 19, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define FSCTL_PIPE_DELETE_SYMLINK           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 20, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define FSCTL_PIPE_QUERY_CLIENT_PROCESS_V2  CTL_CODE(FILE_DEVICE_NAMED_PIPE, 21, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define FSCTL_PIPE_INTERNAL_READ            CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2045, METHOD_BUFFERED, FILE_READ_DATA)
#define FSCTL_PIPE_INTERNAL_WRITE           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2046, METHOD_BUFFERED, FILE_WRITE_DATA)
#define FSCTL_PIPE_INTERNAL_TRANSCEIVE      CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2047, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define FSCTL_PIPE_INTERNAL_READ_OVFLOW     CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2048, METHOD_BUFFERED, FILE_READ_DATA)
#define FILE_PIPE_READ_DATA 0x00000000
#define FILE_PIPE_WRITE_SPACE 0x00000001
typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER
{
    HANDLE EventHandle;
    ULONG KeyValue;
} FILE_PIPE_ASSIGN_EVENT_BUFFER, *PFILE_PIPE_ASSIGN_EVENT_BUFFER;*/
return true
}

func (n *ntioapi)#if !defined()(ok bool){//col:2096
/*#if !defined(BUILD_WOW6432)
    PVOID ClientSession;
    PVOID ClientProcess;
#else
    ULONGLONG ClientSession;
    ULONGLONG ClientProcess;
#endif
} FILE_PIPE_CLIENT_PROCESS_BUFFER, *PFILE_PIPE_CLIENT_PROCESS_BUFFER;*/
return true
}

func (n *ntioapi)#if !defined()(ok bool){//col:2108
/*#if !defined(BUILD_WOW6432)
     PVOID ClientProcess;
#else
     ULONGLONG ClientProcess;
#endif
} FILE_PIPE_CLIENT_PROCESS_BUFFER_V2, *PFILE_PIPE_CLIENT_PROCESS_BUFFER_V2;*/
return true
}

func (n *ntioapi)#if !defined()(ok bool){//col:2124
/*#if !defined(BUILD_WOW6432)
    PVOID ClientSession;
    PVOID ClientProcess;
#else
    ULONGLONG ClientSession;
    ULONGLONG ClientProcess;
#endif
} FILE_PIPE_CLIENT_PROCESS_BUFFER_EX, *PFILE_PIPE_CLIENT_PROCESS_BUFFER_EX;*/
return true
}

func (n *ntioapi)    ()(ok bool){//col:2165
/*    (FILE_PIPE_SYMLINK_FLAG_GLOBAL | FILE_PIPE_SYMLINK_FLAG_RELATIVE)
typedef struct _FILE_PIPE_CREATE_SYMLINK_INPUT
{
    USHORT NameOffset;
    USHORT NameLength;
    USHORT SubstituteNameOffset;
    USHORT SubstituteNameLength;
    ULONG Flags;
} FILE_PIPE_CREATE_SYMLINK_INPUT, *PFILE_PIPE_CREATE_SYMLINK_INPUT;*/
return true
}

func (n *ntioapi)#define FSCTL_MAILSLOT_PEEK             CTL_CODE()(ok bool){//col:2188
/*#define FSCTL_MAILSLOT_PEEK             CTL_CODE(FILE_DEVICE_MAILSLOT, 0, METHOD_NEITHER, FILE_READ_DATA)
typedef struct _FILE_MAILSLOT_PEEK_BUFFER
{
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
} FILE_MAILSLOT_PEEK_BUFFER, *PFILE_MAILSLOT_PEEK_BUFFER;*/
return true
}

func (n *ntioapi)#define IOCTL_MOUNTMGR_CREATE_POINT                 CTL_CODE()(ok bool){//col:2220
/*#define IOCTL_MOUNTMGR_CREATE_POINT                 CTL_CODE(MOUNTMGRCONTROLTYPE, 0, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_DELETE_POINTS                CTL_CODE(MOUNTMGRCONTROLTYPE, 1, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_QUERY_POINTS                 CTL_CODE(MOUNTMGRCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MOUNTMGR_DELETE_POINTS_DBONLY         CTL_CODE(MOUNTMGRCONTROLTYPE, 3, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_NEXT_DRIVE_LETTER            CTL_CODE(MOUNTMGRCONTROLTYPE, 4, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_AUTO_DL_ASSIGNMENTS          CTL_CODE(MOUNTMGRCONTROLTYPE, 5, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_CREATED   CTL_CODE(MOUNTMGRCONTROLTYPE, 6, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_DELETED   CTL_CODE(MOUNTMGRCONTROLTYPE, 7, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_CHANGE_NOTIFY                CTL_CODE(MOUNTMGRCONTROLTYPE, 8, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_MOUNTMGR_KEEP_LINKS_WHEN_OFFLINE      CTL_CODE(MOUNTMGRCONTROLTYPE, 9, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_MOUNTMGR_CHECK_UNPROCESSED_VOLUMES    CTL_CODE(MOUNTMGRCONTROLTYPE, 10, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_MOUNTMGR_VOLUME_ARRIVAL_NOTIFICATION  CTL_CODE(MOUNTMGRCONTROLTYPE, 11, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATH        CTL_CODE(MOUNTMGRCONTROLTYPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATHS       CTL_CODE(MOUNTMGRCONTROLTYPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MOUNTDEV_QUERY_DEVICE_NAME            CTL_CODE(MOUNTDEVCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
typedef struct _MOUNTMGR_CREATE_POINT_INPUT
{
    USHORT SymbolicLinkNameOffset;
    USHORT SymbolicLinkNameLength;
    USHORT DeviceNameOffset;
    USHORT DeviceNameLength;
} MOUNTMGR_CREATE_POINT_INPUT, *PMOUNTMGR_CREATE_POINT_INPUT;*/
return true
}

func (n *ntioapi)#define MOUNTMGR_IS_DRIVE_LETTER()(ok bool){//col:2335
/*#define MOUNTMGR_IS_DRIVE_LETTER(s) ( \
    (s)->Length == 28 && \
    (s)->Buffer[0] == '\\' && \
    (s)->Buffer[1] == 'D' && \
    (s)->Buffer[2] == 'o' && \
    (s)->Buffer[3] == 's' && \
    (s)->Buffer[4] == 'D' && \
    (s)->Buffer[5] == 'e' && \
    (s)->Buffer[6] == 'v' && \
    (s)->Buffer[7] == 'i' && \
    (s)->Buffer[8] == 'c' && \
    (s)->Buffer[9] == 'e' && \
    (s)->Buffer[10] == 's' && \
    (s)->Buffer[11] == '\\' && \
    (s)->Buffer[12] >= 'A' && \
    (s)->Buffer[12] <= 'Z' && \
    (s)->Buffer[13] == ':')
#define MOUNTMGR_IS_VOLUME_NAME(s) ( \
     ((s)->Length == 96 || ((s)->Length == 98 && (s)->Buffer[48] == '\\')) && \
     (s)->Buffer[0] == '\\' && \
     ((s)->Buffer[1] == '?' || (s)->Buffer[1] == '\\') && \
     (s)->Buffer[2] == '?' && \
     (s)->Buffer[3] == '\\' && \
     (s)->Buffer[4] == 'V' && \
     (s)->Buffer[5] == 'o' && \
     (s)->Buffer[6] == 'l' && \
     (s)->Buffer[7] == 'u' && \
     (s)->Buffer[8] == 'm' && \
     (s)->Buffer[9] == 'e' && \
     (s)->Buffer[10] == '{' && \
     (s)->Buffer[19] == '-' && \
     (s)->Buffer[24] == '-' && \
     (s)->Buffer[29] == '-' && \
     (s)->Buffer[34] == '-' && \
     (s)->Buffer[47] == '}')
typedef struct _MOUNTDEV_NAME
{
    USHORT NameLength;
    WCHAR Name[1];
} MOUNTDEV_NAME, * PMOUNTDEV_NAME;*/
return true
}



