package Internal


const(
ZYDIS_INTERNAL_SHAREDDATA_H =  //col:28
ZYDIS_INSTRUCTION_DEFINITION_BASE_VECTOR = ZYDIS_INSTRUCTION_DEFINITION_BASE; ZyanU8 constr_NDSNDD                   ZYAN_BITFIELD(ZYDIS_REG_CONSTRAINTS_REQUIRED_BITS) //col:748
ZYDIS_INSTRUCTION_DEFINITION_BASE_VECTOR_INTEL = ZYDIS_INSTRUCTION_DEFINITION_BASE_VECTOR; ZyanBool is_gather                     ZYAN_BITFIELD( 1) //col:752
)

const(
    ZYDIS_SEMANTIC_OPTYPE_UNUSED = 1  //col:61
    ZYDIS_SEMANTIC_OPTYPE_IMPLICIT_REG = 2  //col:62
    ZYDIS_SEMANTIC_OPTYPE_IMPLICIT_MEM = 3  //col:63
    ZYDIS_SEMANTIC_OPTYPE_IMPLICIT_IMM1 = 4  //col:64
    ZYDIS_SEMANTIC_OPTYPE_GPR8 = 5  //col:65
    ZYDIS_SEMANTIC_OPTYPE_GPR16 = 6  //col:66
    ZYDIS_SEMANTIC_OPTYPE_GPR32 = 7  //col:67
    ZYDIS_SEMANTIC_OPTYPE_GPR64 = 8  //col:68
    ZYDIS_SEMANTIC_OPTYPE_GPR16_32_64 = 9  //col:69
    ZYDIS_SEMANTIC_OPTYPE_GPR32_32_64 = 10  //col:70
    ZYDIS_SEMANTIC_OPTYPE_GPR16_32_32 = 11  //col:71
    ZYDIS_SEMANTIC_OPTYPE_GPR_ASZ = 12  //col:72
    ZYDIS_SEMANTIC_OPTYPE_FPR = 13  //col:73
    ZYDIS_SEMANTIC_OPTYPE_MMX = 14  //col:74
    ZYDIS_SEMANTIC_OPTYPE_XMM = 15  //col:75
    ZYDIS_SEMANTIC_OPTYPE_YMM = 16  //col:76
    ZYDIS_SEMANTIC_OPTYPE_ZMM = 17  //col:77
    ZYDIS_SEMANTIC_OPTYPE_BND = 18  //col:78
    ZYDIS_SEMANTIC_OPTYPE_SREG = 19  //col:79
    ZYDIS_SEMANTIC_OPTYPE_CR = 20  //col:80
    ZYDIS_SEMANTIC_OPTYPE_DR = 21  //col:81
    ZYDIS_SEMANTIC_OPTYPE_MASK = 22  //col:82
    ZYDIS_SEMANTIC_OPTYPE_MEM = 23  //col:83
    ZYDIS_SEMANTIC_OPTYPE_MEM_VSIBX = 24  //col:84
    ZYDIS_SEMANTIC_OPTYPE_MEM_VSIBY = 25  //col:85
    ZYDIS_SEMANTIC_OPTYPE_MEM_VSIBZ = 26  //col:86
    ZYDIS_SEMANTIC_OPTYPE_IMM = 27  //col:87
    ZYDIS_SEMANTIC_OPTYPE_REL = 28  //col:88
    ZYDIS_SEMANTIC_OPTYPE_PTR = 29  //col:89
    ZYDIS_SEMANTIC_OPTYPE_AGEN = 30  //col:90
    ZYDIS_SEMANTIC_OPTYPE_MOFFS = 31  //col:91
    ZYDIS_SEMANTIC_OPTYPE_MIB = 32  //col:92
    ZYDIS_SEMANTIC_OPTYPE_MAX_VALUE  =  ZYDIS_SEMANTIC_OPTYPE_MIB  //col:97
    ZYDIS_SEMANTIC_OPTYPE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_SEMANTIC_OPTYPE_MAX_VALUE)  //col:101
)


const(
    ZYDIS_IELEMENT_TYPE_INVALID = 1  //col:111
    ZYDIS_IELEMENT_TYPE_VARIABLE = 2  //col:112
    ZYDIS_IELEMENT_TYPE_STRUCT = 3  //col:113
    ZYDIS_IELEMENT_TYPE_INT = 4  //col:114
    ZYDIS_IELEMENT_TYPE_UINT = 5  //col:115
    ZYDIS_IELEMENT_TYPE_INT1 = 6  //col:116
    ZYDIS_IELEMENT_TYPE_INT8 = 7  //col:117
    ZYDIS_IELEMENT_TYPE_INT16 = 8  //col:118
    ZYDIS_IELEMENT_TYPE_INT32 = 9  //col:119
    ZYDIS_IELEMENT_TYPE_INT64 = 10  //col:120
    ZYDIS_IELEMENT_TYPE_UINT8 = 11  //col:121
    ZYDIS_IELEMENT_TYPE_UINT16 = 12  //col:122
    ZYDIS_IELEMENT_TYPE_UINT32 = 13  //col:123
    ZYDIS_IELEMENT_TYPE_UINT64 = 14  //col:124
    ZYDIS_IELEMENT_TYPE_UINT128 = 15  //col:125
    ZYDIS_IELEMENT_TYPE_UINT256 = 16  //col:126
    ZYDIS_IELEMENT_TYPE_FLOAT16 = 17  //col:127
    ZYDIS_IELEMENT_TYPE_FLOAT32 = 18  //col:128
    ZYDIS_IELEMENT_TYPE_FLOAT64 = 19  //col:129
    ZYDIS_IELEMENT_TYPE_FLOAT80 = 20  //col:130
    ZYDIS_IELEMENT_TYPE_BCD80 = 21  //col:131
    ZYDIS_IELEMENT_TYPE_CC3 = 22  //col:132
    ZYDIS_IELEMENT_TYPE_CC5 = 23  //col:133
    ZYDIS_IELEMENT_TYPE_MAX_VALUE  =  ZYDIS_IELEMENT_TYPE_CC5  //col:138
    ZYDIS_IELEMENT_TYPE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_IELEMENT_TYPE_MAX_VALUE)  //col:142
)


const(
    ZYDIS_IMPLREG_TYPE_STATIC = 1  //col:152
    ZYDIS_IMPLREG_TYPE_GPR_OSZ = 2  //col:153
    ZYDIS_IMPLREG_TYPE_GPR_ASZ = 3  //col:154
    ZYDIS_IMPLREG_TYPE_GPR_SSZ = 4  //col:155
    ZYDIS_IMPLREG_TYPE_IP_ASZ = 5  //col:156
    ZYDIS_IMPLREG_TYPE_IP_SSZ = 6  //col:157
    ZYDIS_IMPLREG_TYPE_FLAGS_SSZ = 7  //col:158
    ZYDIS_IMPLREG_TYPE_MAX_VALUE  =  ZYDIS_IMPLREG_TYPE_FLAGS_SSZ  //col:163
    ZYDIS_IMPLREG_TYPE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_IMPLREG_TYPE_MAX_VALUE)  //col:167
)


const(
    ZYDIS_IMPLMEM_BASE_AGPR_REG = 1  //col:177
    ZYDIS_IMPLMEM_BASE_AGPR_RM = 2  //col:178
    ZYDIS_IMPLMEM_BASE_AAX = 3  //col:179
    ZYDIS_IMPLMEM_BASE_ADX = 4  //col:180
    ZYDIS_IMPLMEM_BASE_ABX = 5  //col:181
    ZYDIS_IMPLMEM_BASE_ASP = 6  //col:182
    ZYDIS_IMPLMEM_BASE_ABP = 7  //col:183
    ZYDIS_IMPLMEM_BASE_ASI = 8  //col:184
    ZYDIS_IMPLMEM_BASE_ADI = 9  //col:185
    ZYDIS_IMPLMEM_BASE_MAX_VALUE  =  ZYDIS_IMPLMEM_BASE_ADI  //col:190
    ZYDIS_IMPLMEM_BASE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_IMPLMEM_BASE_MAX_VALUE)  //col:194
)


const(
    ZYDIS_RW_ACTION_NONE = 1  //col:249
    ZYDIS_RW_ACTION_READ = 2  //col:250
    ZYDIS_RW_ACTION_WRITE = 3  //col:251
    ZYDIS_RW_ACTION_READWRITE = 4  //col:252
    ZYDIS_RW_ACTION_MAX_VALUE  =  ZYDIS_RW_ACTION_READWRITE  //col:257
    ZYDIS_RW_ACTION_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_RW_ACTION_MAX_VALUE)  //col:261
)


const(
    ZYDIS_REG_CONSTRAINTS_UNUSED = 1  //col:271
    ZYDIS_REG_CONSTRAINTS_NONE = 2  //col:272
    ZYDIS_REG_CONSTRAINTS_GPR = 3  //col:273
    ZYDIS_REG_CONSTRAINTS_SR_DEST = 4  //col:274
    ZYDIS_REG_CONSTRAINTS_SR = 5  //col:275
    ZYDIS_REG_CONSTRAINTS_CR = 6  //col:276
    ZYDIS_REG_CONSTRAINTS_DR = 7  //col:277
    ZYDIS_REG_CONSTRAINTS_MASK = 8  //col:278
    ZYDIS_REG_CONSTRAINTS_BND = 9  //col:279
    ZYDIS_REG_CONSTRAINTS_VSIB = 10  //col:280
    ZYDIS_REG_CONSTRAINTS_NO_REL = 11  //col:281
    ZYDIS_REG_CONSTRAINTS_MAX_VALUE  =  ZYDIS_REG_CONSTRAINTS_NO_REL  //col:286
    ZYDIS_REG_CONSTRAINTS_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_REG_CONSTRAINTS_MAX_VALUE)  //col:290
)


const(
    ZYDIS_IVECTOR_LENGTH_DEFAULT = 1  //col:300
    ZYDIS_IVECTOR_LENGTH_FIXED_128 = 2  //col:301
    ZYDIS_IVECTOR_LENGTH_FIXED_256 = 3  //col:302
    ZYDIS_IVECTOR_LENGTH_FIXED_512 = 4  //col:303
    ZYDIS_IVECTOR_LENGTH_MAX_VALUE  =  ZYDIS_IVECTOR_LENGTH_FIXED_512  //col:308
    ZYDIS_IVECTOR_LENGTH_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_IVECTOR_LENGTH_MAX_VALUE)  //col:312
)


const(
    ZYDIS_IELEMENT_SIZE_INVALID = 1  //col:322
    ZYDIS_IELEMENT_SIZE_8 = 2  //col:323
    ZYDIS_IELEMENT_SIZE_16 = 3  //col:324
    ZYDIS_IELEMENT_SIZE_32 = 4  //col:325
    ZYDIS_IELEMENT_SIZE_64 = 5  //col:326
    ZYDIS_IELEMENT_SIZE_128 = 6  //col:327
    ZYDIS_IELEMENT_SIZE_MAX_VALUE  =  ZYDIS_IELEMENT_SIZE_128  //col:332
    ZYDIS_IELEMENT_SIZE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_IELEMENT_SIZE_MAX_VALUE)  //col:336
)


const(
    ZYDIS_EVEX_FUNC_INVALID = 1  //col:346
    ZYDIS_EVEX_FUNC_BC = 2  //col:350
    ZYDIS_EVEX_FUNC_RC = 3  //col:354
    ZYDIS_EVEX_FUNC_SAE = 4  //col:358
    ZYDIS_EVEX_FUNC_MAX_VALUE  =  ZYDIS_EVEX_FUNC_SAE  //col:363
    ZYDIS_EVEX_FUNC_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_EVEX_FUNC_MAX_VALUE)  //col:367
)


const(
    ZYDIS_TUPLETYPE_INVALID = 1  //col:377
    ZYDIS_TUPLETYPE_FV = 2  //col:381
    ZYDIS_TUPLETYPE_HV = 3  //col:385
    ZYDIS_TUPLETYPE_FVM = 4  //col:389
    ZYDIS_TUPLETYPE_T1S = 5  //col:393
    ZYDIS_TUPLETYPE_T1F = 6  //col:397
    ZYDIS_TUPLETYPE_T1_4X = 7  //col:401
    ZYDIS_TUPLETYPE_GSCAT = 8  //col:405
    ZYDIS_TUPLETYPE_T2 = 9  //col:409
    ZYDIS_TUPLETYPE_T4 = 10  //col:413
    ZYDIS_TUPLETYPE_T8 = 11  //col:417
    ZYDIS_TUPLETYPE_HVM = 12  //col:421
    ZYDIS_TUPLETYPE_QVM = 13  //col:425
    ZYDIS_TUPLETYPE_OVM = 14  //col:429
    ZYDIS_TUPLETYPE_M128 = 15  //col:433
    ZYDIS_TUPLETYPE_DUP = 16  //col:437
    ZYDIS_TUPLETYPE_MAX_VALUE  =  ZYDIS_TUPLETYPE_DUP  //col:442
    ZYDIS_TUPLETYPE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_TUPLETYPE_MAX_VALUE)  //col:446
)


const(
    ZYDIS_MVEX_FUNC_IGNORED = 1  //col:459
    ZYDIS_MVEX_FUNC_INVALID = 2  //col:463
    ZYDIS_MVEX_FUNC_RC = 3  //col:467
    ZYDIS_MVEX_FUNC_SAE = 4  //col:471
    ZYDIS_MVEX_FUNC_F_32 = 5  //col:475
    ZYDIS_MVEX_FUNC_I_32 = 6  //col:479
    ZYDIS_MVEX_FUNC_F_64 = 7  //col:483
    ZYDIS_MVEX_FUNC_I_64 = 8  //col:487
    ZYDIS_MVEX_FUNC_SWIZZLE_32 = 9  //col:491
    ZYDIS_MVEX_FUNC_SWIZZLE_64 = 10  //col:495
    ZYDIS_MVEX_FUNC_SF_32 = 11  //col:499
    ZYDIS_MVEX_FUNC_SF_32_BCST = 12  //col:503
    ZYDIS_MVEX_FUNC_SF_32_BCST_4TO16 = 13  //col:507
    ZYDIS_MVEX_FUNC_SF_64 = 14  //col:511
    ZYDIS_MVEX_FUNC_SI_32 = 15  //col:515
    ZYDIS_MVEX_FUNC_SI_32_BCST = 16  //col:519
    ZYDIS_MVEX_FUNC_SI_32_BCST_4TO16 = 17  //col:523
    ZYDIS_MVEX_FUNC_SI_64 = 18  //col:527
    ZYDIS_MVEX_FUNC_UF_32 = 19  //col:531
    ZYDIS_MVEX_FUNC_UF_64 = 20  //col:535
    ZYDIS_MVEX_FUNC_UI_32 = 21  //col:539
    ZYDIS_MVEX_FUNC_UI_64 = 22  //col:543
    ZYDIS_MVEX_FUNC_DF_32 = 23  //col:547
    ZYDIS_MVEX_FUNC_DF_64 = 24  //col:551
    ZYDIS_MVEX_FUNC_DI_32 = 25  //col:555
    ZYDIS_MVEX_FUNC_DI_64 = 26  //col:559
    ZYDIS_MVEX_FUNC_MAX_VALUE  =  ZYDIS_MVEX_FUNC_DI_64  //col:564
    ZYDIS_MVEX_FUNC_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_MVEX_FUNC_MAX_VALUE)  //col:568
)


const(
    ZYDIS_VEX_STATIC_BROADCAST_NONE = 1  //col:578
    ZYDIS_VEX_STATIC_BROADCAST_1_TO_2 = 2  //col:579
    ZYDIS_VEX_STATIC_BROADCAST_1_TO_4 = 3  //col:580
    ZYDIS_VEX_STATIC_BROADCAST_1_TO_8 = 4  //col:581
    ZYDIS_VEX_STATIC_BROADCAST_1_TO_16 = 5  //col:582
    ZYDIS_VEX_STATIC_BROADCAST_1_TO_32 = 6  //col:583
    ZYDIS_VEX_STATIC_BROADCAST_2_TO_4 = 7  //col:584
    ZYDIS_VEX_STATIC_BROADCAST_MAX_VALUE  =  ZYDIS_VEX_STATIC_BROADCAST_2_TO_4  //col:589
    ZYDIS_VEX_STATIC_BROADCAST_REQUIRED_BITS  =   //col:593
        ZYAN_BITS_TO_REPRESENT(ZYDIS_VEX_STATIC_BROADCAST_MAX_VALUE) = 10  //col:594
)


const(
    ZYDIS_EVEX_STATIC_BROADCAST_NONE = 1  //col:604
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_2 = 2  //col:605
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_4 = 3  //col:606
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_8 = 4  //col:607
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_16 = 5  //col:608
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_32 = 6  //col:609
    ZYDIS_EVEX_STATIC_BROADCAST_1_TO_64 = 7  //col:610
    ZYDIS_EVEX_STATIC_BROADCAST_2_TO_4 = 8  //col:611
    ZYDIS_EVEX_STATIC_BROADCAST_2_TO_8 = 9  //col:612
    ZYDIS_EVEX_STATIC_BROADCAST_2_TO_16 = 10  //col:613
    ZYDIS_EVEX_STATIC_BROADCAST_4_TO_8 = 11  //col:614
    ZYDIS_EVEX_STATIC_BROADCAST_4_TO_16 = 12  //col:615
    ZYDIS_EVEX_STATIC_BROADCAST_8_TO_16 = 13  //col:616
    ZYDIS_EVEX_STATIC_BROADCAST_MAX_VALUE  =  ZYDIS_EVEX_STATIC_BROADCAST_8_TO_16  //col:621
    ZYDIS_EVEX_STATIC_BROADCAST_REQUIRED_BITS  =   //col:625
        ZYAN_BITS_TO_REPRESENT(ZYDIS_EVEX_STATIC_BROADCAST_MAX_VALUE) = 16  //col:626
)


const(
    ZYDIS_MVEX_STATIC_BROADCAST_NONE = 1  //col:636
    ZYDIS_MVEX_STATIC_BROADCAST_1_TO_8 = 2  //col:637
    ZYDIS_MVEX_STATIC_BROADCAST_1_TO_16 = 3  //col:638
    ZYDIS_MVEX_STATIC_BROADCAST_4_TO_8 = 4  //col:639
    ZYDIS_MVEX_STATIC_BROADCAST_4_TO_16 = 5  //col:640
    ZYDIS_MVEX_STATIC_BROADCAST_MAX_VALUE  =  ZYDIS_MVEX_STATIC_BROADCAST_4_TO_16  //col:645
    ZYDIS_MVEX_STATIC_BROADCAST_REQUIRED_BITS  =   //col:649
        ZYAN_BITS_TO_REPRESENT(ZYDIS_MVEX_STATIC_BROADCAST_MAX_VALUE) = 8  //col:650
)


const(
    ZYDIS_MASK_POLICY_INVALID = 1  //col:660
    ZYDIS_MASK_POLICY_ALLOWED = 2  //col:665
    ZYDIS_MASK_POLICY_REQUIRED = 3  //col:669
    ZYDIS_MASK_POLICY_FORBIDDEN = 4  //col:673
    ZYDIS_MASK_POLICY_MAX_VALUE  =  ZYDIS_MASK_POLICY_FORBIDDEN  //col:678
    ZYDIS_MASK_POLICY_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_MASK_POLICY_MAX_VALUE)  //col:682
)


const(
    ZYDIS_MASK_OVERRIDE_DEFAULT = 1  //col:692
    ZYDIS_MASK_OVERRIDE_ZEROING = 2  //col:693
    ZYDIS_MASK_OVERRIDE_CONTROL = 3  //col:694
    ZYDIS_MASK_OVERRIDE_MAX_VALUE  =  ZYDIS_MASK_OVERRIDE_CONTROL  //col:699
    ZYDIS_MASK_OVERRIDE_REQUIRED_BITS  =  ZYAN_BITS_TO_REPRESENT(ZYDIS_MASK_OVERRIDE_MAX_VALUE)  //col:703
)



type (
SharedData interface{
#   pragma warning()(ok bool)//col:102
    ZYDIS_IELEMENT_TYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:143
    ZYDIS_IMPLREG_TYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:168
    ZYDIS_IMPLMEM_BASE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:195
ZYAN_STATIC_ASSERT()(ok bool)//col:238
    ZYDIS_RW_ACTION_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:262
    ZYDIS_REG_CONSTRAINTS_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:291
    ZYDIS_IVECTOR_LENGTH_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:313
    ZYDIS_IELEMENT_SIZE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:337
    ZYDIS_EVEX_FUNC_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:368
    ZYDIS_TUPLETYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:447
    ZYDIS_MVEX_FUNC_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:569
        ZYAN_BITS_TO_REPRESENT()(ok bool)//col:595
        ZYAN_BITS_TO_REPRESENT()(ok bool)//col:627
        ZYAN_BITS_TO_REPRESENT()(ok bool)//col:651
    ZYDIS_MASK_POLICY_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:683
    ZYDIS_MASK_OVERRIDE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool)//col:704
ZYAN_STATIC_ASSERT()(ok bool)//col:762
    ZyanBool is_privileged                 ZYAN_BITFIELD()(ok bool)//col:785
ZYAN_STATIC_ASSERT()(ok bool)//col:816
ZYAN_STATIC_ASSERT()(ok bool)//col:848
ZYAN_STATIC_ASSERT()(ok bool)//col:871
#pragma pack()(ok bool)//col:966
}

)

func NewSharedData() { return & sharedData{} }

func (s *sharedData)#   pragma warning()(ok bool){//col:102









































return true
}


func (s *sharedData)    ZYDIS_IELEMENT_TYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:143


return true
}


func (s *sharedData)    ZYDIS_IMPLREG_TYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:168


return true
}


func (s *sharedData)    ZYDIS_IMPLMEM_BASE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:195


return true
}


func (s *sharedData)ZYAN_STATIC_ASSERT()(ok bool){//col:238


































return true
}


func (s *sharedData)    ZYDIS_RW_ACTION_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:262


return true
}


func (s *sharedData)    ZYDIS_REG_CONSTRAINTS_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:291


return true
}


func (s *sharedData)    ZYDIS_IVECTOR_LENGTH_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:313


return true
}


func (s *sharedData)    ZYDIS_IELEMENT_SIZE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:337


return true
}


func (s *sharedData)    ZYDIS_EVEX_FUNC_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:368


return true
}


func (s *sharedData)    ZYDIS_TUPLETYPE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:447


return true
}


func (s *sharedData)    ZYDIS_MVEX_FUNC_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:569


return true
}


func (s *sharedData)        ZYAN_BITS_TO_REPRESENT()(ok bool){//col:595


return true
}


func (s *sharedData)        ZYAN_BITS_TO_REPRESENT()(ok bool){//col:627


return true
}


func (s *sharedData)        ZYAN_BITS_TO_REPRESENT()(ok bool){//col:651


return true
}


func (s *sharedData)    ZYDIS_MASK_POLICY_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:683


return true
}


func (s *sharedData)    ZYDIS_MASK_OVERRIDE_REQUIRED_BITS = ZYAN_BITS_TO_REPRESENT()(ok bool){//col:704


return true
}


func (s *sharedData)ZYAN_STATIC_ASSERT()(ok bool){//col:762














































return true
}


func (s *sharedData)    ZyanBool is_privileged                 ZYAN_BITFIELD()(ok bool){//col:785















return true
}


func (s *sharedData)ZYAN_STATIC_ASSERT()(ok bool){//col:816








return true
}


func (s *sharedData)ZYAN_STATIC_ASSERT()(ok bool){//col:848























return true
}


func (s *sharedData)ZYAN_STATIC_ASSERT()(ok bool){//col:871













return true
}


func (s *sharedData)#pragma pack()(ok bool){//col:966




















return true
}




