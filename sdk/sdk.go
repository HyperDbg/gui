// Code generated by bindgen. DO NOT EDIT.
package sdk

import (
	"unsafe"

	"github.com/ddkwork/app/bindgen/bindlib"
)

const GengoLibraryName = "sdk"

var GengoLibrary = bindlib.NewLibrary(GengoLibraryName)

// @brief enum for reasons why debuggee is paused
type DebuggeePausingReason int32

const (
	DEBUGGEE_PAUSING_REASON_NOT_PAUSED                            DebuggeePausingReason = 0
	DEBUGGEE_PAUSING_REASON_PAUSE                                 DebuggeePausingReason = 1
	DEBUGGEE_PAUSING_REASON_REQUEST_FROM_DEBUGGER                 DebuggeePausingReason = 2
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_STEPPED                      DebuggeePausingReason = 3
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_TRACKING_STEPPED             DebuggeePausingReason = 4
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_SOFTWARE_BREAKPOINT_HIT      DebuggeePausingReason = 5
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_HARDWARE_DEBUG_REGISTER_HIT  DebuggeePausingReason = 6
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_CORE_SWITCHED                DebuggeePausingReason = 7
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_PROCESS_SWITCHED             DebuggeePausingReason = 8
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_THREAD_SWITCHED              DebuggeePausingReason = 9
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_COMMAND_EXECUTION_FINISHED   DebuggeePausingReason = 10
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_EVENT_TRIGGERED              DebuggeePausingReason = 11
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_STARTING_MODULE_LOADED       DebuggeePausingReason = 12
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_DEBUG_BREAK          DebuggeePausingReason = 13
	DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_THREAD_INTERCEPTED   DebuggeePausingReason = 14
	DEBUGGEE_PAUSING_REASON_HARDWARE_BASED_DEBUGGEE_GENERAL_BREAK DebuggeePausingReason = 15
)

// @brief enum for requested action for HyperDbg packet
type DebuggerRemotePacketRequestedAction int32

const (
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_PAUSE                            DebuggerRemotePacketRequestedAction = 1
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DO_NOT_READ_ANY_PACKET           DebuggerRemotePacketRequestedAction = 2
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DEBUGGER_VERSION                 DebuggerRemotePacketRequestedAction = 3
	DEBUGGER_REMOTE_PACKET_PING_AND_SEND_SUPPORTED_VERSION                                DebuggerRemotePacketRequestedAction = 4
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_STEP                         DebuggerRemotePacketRequestedAction = 5
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CONTINUE                     DebuggerRemotePacketRequestedAction = 6
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CLOSE_AND_UNLOAD_DEBUGGEE    DebuggerRemotePacketRequestedAction = 7
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_CORE                  DebuggerRemotePacketRequestedAction = 8
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_FLUSH_BUFFERS                DebuggerRemotePacketRequestedAction = 9
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CALLSTACK                    DebuggerRemotePacketRequestedAction = 10
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_TEST_QUERY                   DebuggerRemotePacketRequestedAction = 11
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_PROCESS               DebuggerRemotePacketRequestedAction = 12
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_THREAD                DebuggerRemotePacketRequestedAction = 13
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_RUN_SCRIPT                        DebuggerRemotePacketRequestedAction = 14
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_USER_INPUT_BUFFER                 DebuggerRemotePacketRequestedAction = 15
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SEARCH_QUERY                      DebuggerRemotePacketRequestedAction = 16
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_REGISTER_EVENT                    DebuggerRemotePacketRequestedAction = 17
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_ADD_ACTION_TO_EVENT               DebuggerRemotePacketRequestedAction = 18
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_AND_MODIFY_EVENT            DebuggerRemotePacketRequestedAction = 19
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_REGISTERS                    DebuggerRemotePacketRequestedAction = 20
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_MEMORY                       DebuggerRemotePacketRequestedAction = 21
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_EDIT_MEMORY                       DebuggerRemotePacketRequestedAction = 22
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_BP                                DebuggerRemotePacketRequestedAction = 23
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_LIST_OR_MODIFY_BREAKPOINTS        DebuggerRemotePacketRequestedAction = 24
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_RELOAD                     DebuggerRemotePacketRequestedAction = 25
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_PA2VA_AND_VA2PA             DebuggerRemotePacketRequestedAction = 26
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_QUERY_PTE                  DebuggerRemotePacketRequestedAction = 27
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SET_SHORT_CIRCUITING_STATE        DebuggerRemotePacketRequestedAction = 28
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_INJECT_PAGE_FAULT                 DebuggerRemotePacketRequestedAction = 29
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_WRITE_REGISTER                    DebuggerRemotePacketRequestedAction = 30
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_NO_ACTION                                     DebuggerRemotePacketRequestedAction = 31
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_STARTED                              DebuggerRemotePacketRequestedAction = 32
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_LOGGING_MECHANISM                    DebuggerRemotePacketRequestedAction = 33
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_PAUSED_AND_CURRENT_INSTRUCTION       DebuggerRemotePacketRequestedAction = 34
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_CORE              DebuggerRemotePacketRequestedAction = 35
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_PROCESS           DebuggerRemotePacketRequestedAction = 36
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_THREAD            DebuggerRemotePacketRequestedAction = 37
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_RUNNING_SCRIPT             DebuggerRemotePacketRequestedAction = 38
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FORMATS                    DebuggerRemotePacketRequestedAction = 39
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FLUSH                      DebuggerRemotePacketRequestedAction = 40
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CALLSTACK                  DebuggerRemotePacketRequestedAction = 41
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_TEST_QUERY                    DebuggerRemotePacketRequestedAction = 42
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_REGISTERING_EVENT          DebuggerRemotePacketRequestedAction = 43
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_ADDING_ACTION_TO_EVENT     DebuggerRemotePacketRequestedAction = 44
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_QUERY_AND_MODIFY_EVENT     DebuggerRemotePacketRequestedAction = 45
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_EVENT     DebuggerRemotePacketRequestedAction = 46
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_REGISTERS          DebuggerRemotePacketRequestedAction = 47
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_MEMORY             DebuggerRemotePacketRequestedAction = 48
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_EDITING_MEMORY             DebuggerRemotePacketRequestedAction = 49
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BP                         DebuggerRemotePacketRequestedAction = 50
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_STATE     DebuggerRemotePacketRequestedAction = 51
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_LIST_OR_MODIFY_BREAKPOINTS DebuggerRemotePacketRequestedAction = 52
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_UPDATE_SYMBOL_INFO                   DebuggerRemotePacketRequestedAction = 53
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SYMBOL_FINISHED               DebuggerRemotePacketRequestedAction = 54
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SEARCH_QUERY                  DebuggerRemotePacketRequestedAction = 55
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_PTE                        DebuggerRemotePacketRequestedAction = 56
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_VA2PA_AND_PA2VA            DebuggerRemotePacketRequestedAction = 57
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BRINGING_PAGES_IN          DebuggerRemotePacketRequestedAction = 58
	DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_WRITE_REGISTER             DebuggerRemotePacketRequestedAction = 59
)

// @brief enum for different packet types in HyperDbg packets
//
// @warning used in hwdbg
type DebuggerRemotePacketType int32

const (
	DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_VMX_ROOT  DebuggerRemotePacketType = 1
	DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_USER_MODE DebuggerRemotePacketType = 2
	DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER                      DebuggerRemotePacketType = 3
	DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_HARDWARE_LEVEL       DebuggerRemotePacketType = 4
	DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER_HARDWARE_LEVEL       DebuggerRemotePacketType = 5
)

// @brief Different levels of paging
type PagingLevel int32

const (
	PAGING_LEVEL_PAGE_TABLE                   PagingLevel = 0
	PAGING_LEVEL_PAGE_DIRECTORY               PagingLevel = 1
	PAGING_LEVEL_PAGE_DIRECTORY_POINTER_TABLE PagingLevel = 2
	PAGING_LEVEL_PAGE_MAP_LEVEL4              PagingLevel = 3
)

// @brief Inum of intentions for buffers (buffer tag)
type PoolAllocationIntention int32

const (
	TRACKING_HOOKED_PAGES                  PoolAllocationIntention = 0
	EXEC_TRAMPOLINE                        PoolAllocationIntention = 1
	SPLIT_2MB_PAGING_TO_4KB_PAGE           PoolAllocationIntention = 2
	DETOUR_HOOK_DETAILS                    PoolAllocationIntention = 3
	BREAKPOINT_DEFINITION_STRUCTURE        PoolAllocationIntention = 4
	PROCESS_THREAD_HOLDER                  PoolAllocationIntention = 5
	INSTANT_REGULAR_EVENT_BUFFER           PoolAllocationIntention = 6
	INSTANT_BIG_EVENT_BUFFER               PoolAllocationIntention = 7
	INSTANT_REGULAR_EVENT_ACTION_BUFFER    PoolAllocationIntention = 8
	INSTANT_BIG_EVENT_ACTION_BUFFER        PoolAllocationIntention = 9
	INSTANT_REGULAR_SAFE_BUFFER_FOR_EVENTS PoolAllocationIntention = 10
	INSTANT_BIG_SAFE_BUFFER_FOR_EVENTS     PoolAllocationIntention = 11
)

// ///////////////////////////////////////////////
type DebugRegisterType int32

const (
	BREAK_ON_INSTRUCTION_FETCH              DebugRegisterType = 0
	BREAK_ON_WRITE_ONLY                     DebugRegisterType = 1
	BREAK_ON_IO_READ_OR_WRITE_NOT_SUPPORTED DebugRegisterType = 2
	BREAK_ON_READ_AND_WRITE_BUT_NOT_FETCH   DebugRegisterType = 3
)

// ///////////////////////////////////////////////
type VmxExecutionMode int32

const (
	VMX_EXECUTION_MODE_NON_ROOT VmxExecutionMode = 0
	VMX_EXECUTION_MODE_ROOT     VmxExecutionMode = 1
)

// @brief Type of calling the event
type VmmCallbackEventCallingStageType int32

const (
	VMM_CALLBACK_CALLING_STAGE_INVALID_EVENT_EMULATION VmmCallbackEventCallingStageType = 0
	VMM_CALLBACK_CALLING_STAGE_PRE_EVENT_EMULATION     VmmCallbackEventCallingStageType = 1
	VMM_CALLBACK_CALLING_STAGE_POST_EVENT_EMULATION    VmmCallbackEventCallingStageType = 2
	VMM_CALLBACK_CALLING_STAGE_ALL_EVENT_EMULATION     VmmCallbackEventCallingStageType = 3
)

// @brief enum to query different process and thread interception mechanisms
type DebuggerThreadProcessTracing int32

const (
	DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_THREAD_CHANGE  DebuggerThreadProcessTracing = 0
	DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_PROCESS_CHANGE DebuggerThreadProcessTracing = 1
	DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_DEBUG_REGISTER_INTERCEPTION   DebuggerThreadProcessTracing = 2
	DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_WAITING_FOR_MOV_CR3_VM_EXITS  DebuggerThreadProcessTracing = 3
)

// @brief Type of transferring buffer between user-to-kernel
type NotifyType int32

const (
	IRP_BASED   NotifyType = 0
	EVENT_BASED NotifyType = 1
)

// @brief different type of memory addresses
type DebuggerHookMemoryType int32

const (
	DEBUGGER_MEMORY_HOOK_VIRTUAL_ADDRESS  DebuggerHookMemoryType = 0
	DEBUGGER_MEMORY_HOOK_PHYSICAL_ADDRESS DebuggerHookMemoryType = 1
)

// @brief Exceptions enum
type ExceptionVectors int32

const (
	EXCEPTION_VECTOR_DIVIDE_ERROR                      ExceptionVectors = 0
	EXCEPTION_VECTOR_DEBUG_BREAKPOINT                  ExceptionVectors = 1
	EXCEPTION_VECTOR_NMI                               ExceptionVectors = 2
	EXCEPTION_VECTOR_BREAKPOINT                        ExceptionVectors = 3
	EXCEPTION_VECTOR_OVERFLOW                          ExceptionVectors = 4
	EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED              ExceptionVectors = 5
	EXCEPTION_VECTOR_UNDEFINED_OPCODE                  ExceptionVectors = 6
	EXCEPTION_VECTOR_NO_MATH_COPROCESSOR               ExceptionVectors = 7
	EXCEPTION_VECTOR_DOUBLE_FAULT                      ExceptionVectors = 8
	EXCEPTION_VECTOR_RESERVED0                         ExceptionVectors = 9
	EXCEPTION_VECTOR_INVALID_TASK_SEGMENT_SELECTOR     ExceptionVectors = 10
	EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT               ExceptionVectors = 11
	EXCEPTION_VECTOR_STACK_SEGMENT_FAULT               ExceptionVectors = 12
	EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT          ExceptionVectors = 13
	EXCEPTION_VECTOR_PAGE_FAULT                        ExceptionVectors = 14
	EXCEPTION_VECTOR_RESERVED1                         ExceptionVectors = 15
	EXCEPTION_VECTOR_MATH_FAULT                        ExceptionVectors = 16
	EXCEPTION_VECTOR_ALIGNMENT_CHECK                   ExceptionVectors = 17
	EXCEPTION_VECTOR_MACHINE_CHECK                     ExceptionVectors = 18
	EXCEPTION_VECTOR_SIMD_FLOATING_POINT_NUMERIC_ERROR ExceptionVectors = 19
	EXCEPTION_VECTOR_VIRTUAL_EXCEPTION                 ExceptionVectors = 20
	EXCEPTION_VECTOR_RESERVED2                         ExceptionVectors = 21
	EXCEPTION_VECTOR_RESERVED3                         ExceptionVectors = 22
	EXCEPTION_VECTOR_RESERVED4                         ExceptionVectors = 23
	EXCEPTION_VECTOR_RESERVED5                         ExceptionVectors = 24
	EXCEPTION_VECTOR_RESERVED6                         ExceptionVectors = 25
	EXCEPTION_VECTOR_RESERVED7                         ExceptionVectors = 26
	EXCEPTION_VECTOR_RESERVED8                         ExceptionVectors = 27
	EXCEPTION_VECTOR_RESERVED9                         ExceptionVectors = 28
	EXCEPTION_VECTOR_RESERVED10                        ExceptionVectors = 29
	EXCEPTION_VECTOR_RESERVED11                        ExceptionVectors = 30
	EXCEPTION_VECTOR_RESERVED12                        ExceptionVectors = 31
	APC_INTERRUPT                                      ExceptionVectors = 31
	DPC_INTERRUPT                                      ExceptionVectors = 47
	CLOCK_INTERRUPT                                    ExceptionVectors = 209
	IPI_INTERRUPT                                      ExceptionVectors = 225
	PMI_INTERRUPT                                      ExceptionVectors = 254
)

// @brief The status of triggering events
type VmmCallbackTriggeringEventStatusType int32

const (
	VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_NO_INITIALIZED VmmCallbackTriggeringEventStatusType = 0
	VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL                VmmCallbackTriggeringEventStatusType = 0
	VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_IGNORE_EVENT   VmmCallbackTriggeringEventStatusType = 1
	VMM_CALLBACK_TRIGGERING_EVENT_STATUS_DEBUGGER_NOT_ENABLED      VmmCallbackTriggeringEventStatusType = 2
	VMM_CALLBACK_TRIGGERING_EVENT_STATUS_INVALID_EVENT_TYPE        VmmCallbackTriggeringEventStatusType = 3
)

// @brief enum to show type of all HyperDbg events
type VmmEventTypeEnum int32

const (
	HIDDEN_HOOK_READ_AND_WRITE_AND_EXECUTE VmmEventTypeEnum = 0
	HIDDEN_HOOK_READ_AND_WRITE             VmmEventTypeEnum = 1
	HIDDEN_HOOK_READ_AND_EXECUTE           VmmEventTypeEnum = 2
	HIDDEN_HOOK_WRITE_AND_EXECUTE          VmmEventTypeEnum = 3
	HIDDEN_HOOK_READ                       VmmEventTypeEnum = 4
	HIDDEN_HOOK_WRITE                      VmmEventTypeEnum = 5
	HIDDEN_HOOK_EXECUTE                    VmmEventTypeEnum = 6
	HIDDEN_HOOK_EXEC_DETOURS               VmmEventTypeEnum = 7
	HIDDEN_HOOK_EXEC_CC                    VmmEventTypeEnum = 8
	SYSCALL_HOOK_EFER_SYSCALL              VmmEventTypeEnum = 9
	SYSCALL_HOOK_EFER_SYSRET               VmmEventTypeEnum = 10
	CPUID_INSTRUCTION_EXECUTION            VmmEventTypeEnum = 11
	RDMSR_INSTRUCTION_EXECUTION            VmmEventTypeEnum = 12
	WRMSR_INSTRUCTION_EXECUTION            VmmEventTypeEnum = 13
	IN_INSTRUCTION_EXECUTION               VmmEventTypeEnum = 14
	OUT_INSTRUCTION_EXECUTION              VmmEventTypeEnum = 15
	EXCEPTION_OCCURRED                     VmmEventTypeEnum = 16
	EXTERNAL_INTERRUPT_OCCURRED            VmmEventTypeEnum = 17
	DEBUG_REGISTERS_ACCESSED               VmmEventTypeEnum = 18
	TSC_INSTRUCTION_EXECUTION              VmmEventTypeEnum = 19
	PMC_INSTRUCTION_EXECUTION              VmmEventTypeEnum = 20
	VMCALL_INSTRUCTION_EXECUTION           VmmEventTypeEnum = 21
	CONTROL_REGISTER_MODIFIED              VmmEventTypeEnum = 22
	CONTROL_REGISTER_READ                  VmmEventTypeEnum = 23
	CONTROL_REGISTER_3_MODIFIED            VmmEventTypeEnum = 24
	TRAP_EXECUTION_MODE_CHANGED            VmmEventTypeEnum = 25
	TRAP_EXECUTION_INSTRUCTION_TRACE       VmmEventTypeEnum = 26
)

// @brief Type of Actions
type DebuggerEventActionTypeEnum int32

const (
	BREAK_TO_DEBUGGER DebuggerEventActionTypeEnum = 0
	RUN_SCRIPT        DebuggerEventActionTypeEnum = 1
	RUN_CUSTOM_CODE   DebuggerEventActionTypeEnum = 2
)

// @brief Type of handling !syscall or !sysret
type DebuggerEventSyscallSysretType int32

const (
	DEBUGGER_EVENT_SYSCALL_SYSRET_SAFE_ACCESS_MEMORY DebuggerEventSyscallSysretType = 0
	DEBUGGER_EVENT_SYSCALL_SYSRET_HANDLE_ALL_UD      DebuggerEventSyscallSysretType = 1
)

// @brief Type of mode change traps
type DebuggerEventModeType int32

const (
	DEBUGGER_EVENT_MODE_TYPE_USER_MODE_AND_KERNEL_MODE DebuggerEventModeType = 1
	DEBUGGER_EVENT_MODE_TYPE_USER_MODE                 DebuggerEventModeType = 3
	DEBUGGER_EVENT_MODE_TYPE_KERNEL_MODE               DebuggerEventModeType = 0
)

// @brief Type of tracing events
type DebuggerEventTraceType int32

const (
	DEBUGGER_EVENT_TRACE_TYPE_INVALID                 DebuggerEventTraceType = 0
	DEBUGGER_EVENT_TRACE_TYPE_STEP_IN                 DebuggerEventTraceType = 1
	DEBUGGER_EVENT_TRACE_TYPE_STEP_OUT                DebuggerEventTraceType = 2
	DEBUGGER_EVENT_TRACE_TYPE_INSTRUMENTATION_STEP_IN DebuggerEventTraceType = 3
)

// @brief different types of modifying events request (enable/disable/clear)
type DebuggerModifyEventsType int32

const (
	DEBUGGER_MODIFY_EVENTS_QUERY_STATE DebuggerModifyEventsType = 0
	DEBUGGER_MODIFY_EVENTS_ENABLE      DebuggerModifyEventsType = 1
	DEBUGGER_MODIFY_EVENTS_DISABLE     DebuggerModifyEventsType = 2
	DEBUGGER_MODIFY_EVENTS_CLEAR       DebuggerModifyEventsType = 3
)

// @brief Things to consider when applying resources
type ProtectedHvResourcesPassingOvers int32

const (
	PASSING_OVER_NONE                                  ProtectedHvResourcesPassingOvers = 0
	PASSING_OVER_UD_EXCEPTIONS_FOR_SYSCALL_SYSRET_HOOK ProtectedHvResourcesPassingOvers = 1
	PASSING_OVER_EXCEPTION_EVENTS                      ProtectedHvResourcesPassingOvers = 2
	PASSING_OVER_INTERRUPT_EVENTS                      ProtectedHvResourcesPassingOvers = 3
	PASSING_OVER_TSC_EVENTS                            ProtectedHvResourcesPassingOvers = 4
	PASSING_OVER_MOV_TO_HW_DEBUG_REGS_EVENTS           ProtectedHvResourcesPassingOvers = 5
	PASSING_OVER_MOV_TO_CONTROL_REGS_EVENTS            ProtectedHvResourcesPassingOvers = 6
)

// @brief Type of protected (multi-used) resources
type ProtectedHvResourcesType int32

const (
	PROTECTED_HV_RESOURCES_EXCEPTION_BITMAP              ProtectedHvResourcesType = 0
	PROTECTED_HV_RESOURCES_EXTERNAL_INTERRUPT_EXITING    ProtectedHvResourcesType = 1
	PROTECTED_HV_RESOURCES_RDTSC_RDTSCP_EXITING          ProtectedHvResourcesType = 2
	PROTECTED_HV_RESOURCES_MOV_TO_DEBUG_REGISTER_EXITING ProtectedHvResourcesType = 3
	PROTECTED_HV_RESOURCES_MOV_CONTROL_REGISTER_EXITING  ProtectedHvResourcesType = 4
	PROTECTED_HV_RESOURCES_MOV_TO_CR3_EXITING            ProtectedHvResourcesType = 5
)

// @brief Different action of hwdbg
//
// @warning This file should be changed along with hwdbg files
type HwdbgActionEnums int32

const (
	HWDBG_ACTION_SEND_INSTANCE_INFO      HwdbgActionEnums = 1
	HWDBG_ACTION_CONFIGURE_SCRIPT_BUFFER HwdbgActionEnums = 2
)

// @brief Different responses come from hwdbg
//
// @warning This file should be changed along with hwdbg files
type HwdbgResponseEnums int32

const (
	HWDBG_RESPONSE_SUCCESS_OR_ERROR_MESSAGE HwdbgResponseEnums = 1
	HWDBG_RESPONSE_INSTANCE_INFO            HwdbgResponseEnums = 2
)

// @brief Different success or error codes in hwdbg
//
// @warning This file should be changed along with hwdbg files
type HwdbgSuccessOrErrorEnums int32

const (
	HWDBG_OPERATION_WAS_SUCCESSFUL HwdbgSuccessOrErrorEnums = 2147483647
	HWDBG_ERROR_INVALID_PACKET     HwdbgSuccessOrErrorEnums = 1
)

// @brief different modes of reconstruct requests
type ReversingMachineReconstructMemoryMode int32

const (
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_UNKNOWN     ReversingMachineReconstructMemoryMode = 0
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_USER_MODE   ReversingMachineReconstructMemoryMode = 1
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_KERNEL_MODE ReversingMachineReconstructMemoryMode = 2
)

// @brief different types of reconstruct requests
type ReversingMachineReconstructMemoryType int32

const (
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_UNKNOWN     ReversingMachineReconstructMemoryType = 0
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_RECONSTRUCT ReversingMachineReconstructMemoryType = 1
	REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_PATTERN     ReversingMachineReconstructMemoryType = 2
)

// @brief different types of prealloc requests
type DebuggerPreallocCommandType int32

const (
	DEBUGGER_PREALLOC_COMMAND_TYPE_THREAD_INTERCEPTION DebuggerPreallocCommandType = 0
	DEBUGGER_PREALLOC_COMMAND_TYPE_MONITOR             DebuggerPreallocCommandType = 1
	DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK             DebuggerPreallocCommandType = 2
	DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK2            DebuggerPreallocCommandType = 3
	DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_EVENT       DebuggerPreallocCommandType = 4
	DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_EVENT           DebuggerPreallocCommandType = 5
	DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_SAFE_BUFFER DebuggerPreallocCommandType = 6
	DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_SAFE_BUFFER     DebuggerPreallocCommandType = 7
)

// @brief different types of preactivate requests
type DebuggerPreactivateCommandType int32

const DEBUGGER_PREACTIVATE_COMMAND_TYPE_MODE DebuggerPreactivateCommandType = 0

// @brief different types of reading memory
type DebuggerReadReadingType int32

const (
	READ_FROM_KERNEL   DebuggerReadReadingType = 0
	READ_FROM_VMX_ROOT DebuggerReadReadingType = 1
)

// @brief different type of addresses
type DebuggerReadMemoryType int32

const (
	DEBUGGER_READ_PHYSICAL_ADDRESS DebuggerReadMemoryType = 0
	DEBUGGER_READ_VIRTUAL_ADDRESS  DebuggerReadMemoryType = 1
)

// @brief different address mode
type DebuggerReadMemoryAddressMode int32

const (
	DEBUGGER_READ_ADDRESS_MODE_32_BIT DebuggerReadMemoryAddressMode = 0
	DEBUGGER_READ_ADDRESS_MODE_64_BIT DebuggerReadMemoryAddressMode = 1
)

// @brief the way that debugger should show
// the details of memory or disassemble them
type DebuggerShowMemoryStyle int32

const (
	DEBUGGER_SHOW_COMMAND_DT            DebuggerShowMemoryStyle = 1
	DEBUGGER_SHOW_COMMAND_DISASSEMBLE64 DebuggerShowMemoryStyle = 2
	DEBUGGER_SHOW_COMMAND_DISASSEMBLE32 DebuggerShowMemoryStyle = 3
	DEBUGGER_SHOW_COMMAND_DB            DebuggerShowMemoryStyle = 4
	DEBUGGER_SHOW_COMMAND_DC            DebuggerShowMemoryStyle = 5
	DEBUGGER_SHOW_COMMAND_DQ            DebuggerShowMemoryStyle = 6
	DEBUGGER_SHOW_COMMAND_DD            DebuggerShowMemoryStyle = 7
	DEBUGGER_SHOW_COMMAND_DUMP          DebuggerShowMemoryStyle = 8
)

// @brief test query used for test purposed
type DebuggerTestQueryState int32

const (
	TEST_QUERY_HALTING_CORE_STATUS                                          DebuggerTestQueryState = 1
	TEST_QUERY_PREALLOCATED_POOL_STATE                                      DebuggerTestQueryState = 2
	TEST_QUERY_TRAP_STATE                                                   DebuggerTestQueryState = 3
	TEST_BREAKPOINT_TURN_OFF_BPS                                            DebuggerTestQueryState = 4
	TEST_BREAKPOINT_TURN_ON_BPS                                             DebuggerTestQueryState = 5
	TEST_BREAKPOINT_TURN_OFF_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER DebuggerTestQueryState = 6
	TEST_BREAKPOINT_TURN_ON_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER  DebuggerTestQueryState = 7
	TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_SYNCHRONOUS                   DebuggerTestQueryState = 8
	TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_ASYNCHRONOUS                  DebuggerTestQueryState = 9
	TEST_SETTING_TARGET_TASKS_ON_TARGET_HALTED_CORES                        DebuggerTestQueryState = 10
	TEST_BREAKPOINT_TURN_OFF_DBS                                            DebuggerTestQueryState = 11
	TEST_BREAKPOINT_TURN_ON_DBS                                             DebuggerTestQueryState = 12
)

// @brief different types of actions on MSRs
type DebuggerMsrActionType int32

const (
	DEBUGGER_MSR_READ  DebuggerMsrActionType = 0
	DEBUGGER_MSR_WRITE DebuggerMsrActionType = 1
)

// @brief different type of addresses for editing memory
type DebuggerEditMemoryType int32

const (
	EDIT_VIRTUAL_MEMORY  DebuggerEditMemoryType = 0
	EDIT_PHYSICAL_MEMORY DebuggerEditMemoryType = 1
)

// @brief size of editing memory
type DebuggerEditMemoryByteSize int32

const (
	EDIT_BYTE  DebuggerEditMemoryByteSize = 0
	EDIT_DWORD DebuggerEditMemoryByteSize = 1
	EDIT_QWORD DebuggerEditMemoryByteSize = 2
)

// @brief different types of address for searching on memory
type DebuggerSearchMemoryType int32

const (
	SEARCH_PHYSICAL_MEMORY              DebuggerSearchMemoryType = 0
	SEARCH_VIRTUAL_MEMORY               DebuggerSearchMemoryType = 1
	SEARCH_PHYSICAL_FROM_VIRTUAL_MEMORY DebuggerSearchMemoryType = 2
)

// @brief different sizes on searching memory
type DebuggerSearchMemoryByteSize int32

const (
	SEARCH_BYTE  DebuggerSearchMemoryByteSize = 0
	SEARCH_DWORD DebuggerSearchMemoryByteSize = 1
	SEARCH_QWORD DebuggerSearchMemoryByteSize = 2
)

// @brief different actions of switchings
type DebuggerAttachDetachUserModeProcessActionType int32

const (
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_ATTACH                                  DebuggerAttachDetachUserModeProcessActionType = 0
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_DETACH                                  DebuggerAttachDetachUserModeProcessActionType = 1
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_REMOVE_HOOKS                            DebuggerAttachDetachUserModeProcessActionType = 2
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_KILL_PROCESS                            DebuggerAttachDetachUserModeProcessActionType = 3
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_PAUSE_PROCESS                           DebuggerAttachDetachUserModeProcessActionType = 4
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_SWITCH_BY_PROCESS_OR_THREAD             DebuggerAttachDetachUserModeProcessActionType = 5
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_QUERY_COUNT_OF_ACTIVE_DEBUGGING_THREADS DebuggerAttachDetachUserModeProcessActionType = 6
)

// @brief different type of process or thread queries
type DebuggerQueryActiveProcessesOrThreadsTypes int32

const (
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_COUNT   DebuggerQueryActiveProcessesOrThreadsTypes = 1
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_COUNT    DebuggerQueryActiveProcessesOrThreadsTypes = 2
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_LIST    DebuggerQueryActiveProcessesOrThreadsTypes = 3
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_LIST     DebuggerQueryActiveProcessesOrThreadsTypes = 4
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_PROCESS DebuggerQueryActiveProcessesOrThreadsTypes = 5
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_THREAD  DebuggerQueryActiveProcessesOrThreadsTypes = 6
)

// @brief different actions on showing or querying list of process or threads
type DebuggerQueryActiveProcessesOrThreadsActions int32

const (
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_SHOW_INSTANTLY     DebuggerQueryActiveProcessesOrThreadsActions = 1
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_COUNT        DebuggerQueryActiveProcessesOrThreadsActions = 2
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_SAVE_DETAILS DebuggerQueryActiveProcessesOrThreadsActions = 3
)

// @brief callstack showing method
type DebuggerCallstackDisplayMethod int32

const (
	DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITHOUT_PARAMS DebuggerCallstackDisplayMethod = 0
	DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITH_PARAMS    DebuggerCallstackDisplayMethod = 1
)

// @brief User-mode debugging actions
type DebuggerUdCommandActionType int32

const (
	DEBUGGER_UD_COMMAND_ACTION_TYPE_NONE         DebuggerUdCommandActionType = 0
	DEBUGGER_UD_COMMAND_ACTION_TYPE_PAUSE        DebuggerUdCommandActionType = 1
	DEBUGGER_UD_COMMAND_ACTION_TYPE_CONTINUE     DebuggerUdCommandActionType = 2
	DEBUGGER_UD_COMMAND_ACTION_TYPE_REGULAR_STEP DebuggerUdCommandActionType = 3
)

// @brief Debugger process switch and process details
type DebuggeeDetailsAndSwitchProcessType int32

const (
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_DETAILS DebuggeeDetailsAndSwitchProcessType = 0
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_LIST    DebuggeeDetailsAndSwitchProcessType = 1
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PERFORM_SWITCH      DebuggeeDetailsAndSwitchProcessType = 2
)

// @brief Debugger thread switch and thread details
type DebuggeeDetailsAndSwitchThreadType int32

const (
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PERFORM_SWITCH     DebuggeeDetailsAndSwitchThreadType = 0
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_DETAILS DebuggeeDetailsAndSwitchThreadType = 1
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_LIST    DebuggeeDetailsAndSwitchThreadType = 2
)

// @brief stepping and tracking types
type DebuggerRemoteSteppingRequest int32

const (
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_IN                              DebuggerRemoteSteppingRequest = 0
	DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN              DebuggerRemoteSteppingRequest = 1
	DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN_FOR_TRACKING DebuggerRemoteSteppingRequest = 2
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER                            DebuggerRemoteSteppingRequest = 3
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU                     DebuggerRemoteSteppingRequest = 4
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU_LAST_INSTRUCTION    DebuggerRemoteSteppingRequest = 5
)

// @brief breakpoint modification types
type DebuggeeBreakpointModificationRequest int32

const (
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_LIST_BREAKPOINTS DebuggeeBreakpointModificationRequest = 0
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_ENABLE           DebuggeeBreakpointModificationRequest = 1
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_DISABLE          DebuggeeBreakpointModificationRequest = 2
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_CLEAR            DebuggeeBreakpointModificationRequest = 3
)

// @brief Whether a jump is taken or not taken
type DebuggerConditionalJumpStatus int32

const (
	DEBUGGER_CONDITIONAL_JUMP_STATUS_ERROR                DebuggerConditionalJumpStatus = 0
	DEBUGGER_CONDITIONAL_JUMP_STATUS_NOT_CONDITIONAL_JUMP DebuggerConditionalJumpStatus = 1
	DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_TAKEN        DebuggerConditionalJumpStatus = 2
	DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_NOT_TAKEN    DebuggerConditionalJumpStatus = 3
)

type RegsEnum int32

const (
	REGISTER_RAX    RegsEnum = 0
	REGISTER_EAX    RegsEnum = 1
	REGISTER_AX     RegsEnum = 2
	REGISTER_AH     RegsEnum = 3
	REGISTER_AL     RegsEnum = 4
	REGISTER_RCX    RegsEnum = 5
	REGISTER_ECX    RegsEnum = 6
	REGISTER_CX     RegsEnum = 7
	REGISTER_CH     RegsEnum = 8
	REGISTER_CL     RegsEnum = 9
	REGISTER_RDX    RegsEnum = 10
	REGISTER_EDX    RegsEnum = 11
	REGISTER_DX     RegsEnum = 12
	REGISTER_DH     RegsEnum = 13
	REGISTER_DL     RegsEnum = 14
	REGISTER_RBX    RegsEnum = 15
	REGISTER_EBX    RegsEnum = 16
	REGISTER_BX     RegsEnum = 17
	REGISTER_BH     RegsEnum = 18
	REGISTER_BL     RegsEnum = 19
	REGISTER_RSP    RegsEnum = 20
	REGISTER_ESP    RegsEnum = 21
	REGISTER_SP     RegsEnum = 22
	REGISTER_SPL    RegsEnum = 23
	REGISTER_RBP    RegsEnum = 24
	REGISTER_EBP    RegsEnum = 25
	REGISTER_BP     RegsEnum = 26
	REGISTER_BPL    RegsEnum = 27
	REGISTER_RSI    RegsEnum = 28
	REGISTER_ESI    RegsEnum = 29
	REGISTER_SI     RegsEnum = 30
	REGISTER_SIL    RegsEnum = 31
	REGISTER_RDI    RegsEnum = 32
	REGISTER_EDI    RegsEnum = 33
	REGISTER_DI     RegsEnum = 34
	REGISTER_DIL    RegsEnum = 35
	REGISTER_R8     RegsEnum = 36
	REGISTER_R8D    RegsEnum = 37
	REGISTER_R8W    RegsEnum = 38
	REGISTER_R8H    RegsEnum = 39
	REGISTER_R8L    RegsEnum = 40
	REGISTER_R9     RegsEnum = 41
	REGISTER_R9D    RegsEnum = 42
	REGISTER_R9W    RegsEnum = 43
	REGISTER_R9H    RegsEnum = 44
	REGISTER_R9L    RegsEnum = 45
	REGISTER_R10    RegsEnum = 46
	REGISTER_R10D   RegsEnum = 47
	REGISTER_R10W   RegsEnum = 48
	REGISTER_R10H   RegsEnum = 49
	REGISTER_R10L   RegsEnum = 50
	REGISTER_R11    RegsEnum = 51
	REGISTER_R11D   RegsEnum = 52
	REGISTER_R11W   RegsEnum = 53
	REGISTER_R11H   RegsEnum = 54
	REGISTER_R11L   RegsEnum = 55
	REGISTER_R12    RegsEnum = 56
	REGISTER_R12D   RegsEnum = 57
	REGISTER_R12W   RegsEnum = 58
	REGISTER_R12H   RegsEnum = 59
	REGISTER_R12L   RegsEnum = 60
	REGISTER_R13    RegsEnum = 61
	REGISTER_R13D   RegsEnum = 62
	REGISTER_R13W   RegsEnum = 63
	REGISTER_R13H   RegsEnum = 64
	REGISTER_R13L   RegsEnum = 65
	REGISTER_R14    RegsEnum = 66
	REGISTER_R14D   RegsEnum = 67
	REGISTER_R14W   RegsEnum = 68
	REGISTER_R14H   RegsEnum = 69
	REGISTER_R14L   RegsEnum = 70
	REGISTER_R15    RegsEnum = 71
	REGISTER_R15D   RegsEnum = 72
	REGISTER_R15W   RegsEnum = 73
	REGISTER_R15H   RegsEnum = 74
	REGISTER_R15L   RegsEnum = 75
	REGISTER_DS     RegsEnum = 76
	REGISTER_ES     RegsEnum = 77
	REGISTER_FS     RegsEnum = 78
	REGISTER_GS     RegsEnum = 79
	REGISTER_CS     RegsEnum = 80
	REGISTER_SS     RegsEnum = 81
	REGISTER_RFLAGS RegsEnum = 82
	REGISTER_EFLAGS RegsEnum = 83
	REGISTER_FLAGS  RegsEnum = 84
	REGISTER_CF     RegsEnum = 85
	REGISTER_PF     RegsEnum = 86
	REGISTER_AF     RegsEnum = 87
	REGISTER_ZF     RegsEnum = 88
	REGISTER_SF     RegsEnum = 89
	REGISTER_TF     RegsEnum = 90
	REGISTER_IF     RegsEnum = 91
	REGISTER_DF     RegsEnum = 92
	REGISTER_OF     RegsEnum = 93
	REGISTER_IOPL   RegsEnum = 94
	REGISTER_NT     RegsEnum = 95
	REGISTER_RF     RegsEnum = 96
	REGISTER_VM     RegsEnum = 97
	REGISTER_AC     RegsEnum = 98
	REGISTER_VIF    RegsEnum = 99
	REGISTER_VIP    RegsEnum = 100
	REGISTER_ID     RegsEnum = 101
	REGISTER_RIP    RegsEnum = 102
	REGISTER_EIP    RegsEnum = 103
	REGISTER_IP     RegsEnum = 104
	REGISTER_IDTR   RegsEnum = 105
	REGISTER_LDTR   RegsEnum = 106
	REGISTER_GDTR   RegsEnum = 107
	REGISTER_TR     RegsEnum = 108
	REGISTER_CR0    RegsEnum = 109
	REGISTER_CR2    RegsEnum = 110
	REGISTER_CR3    RegsEnum = 111
	REGISTER_CR4    RegsEnum = 112
	REGISTER_CR8    RegsEnum = 113
	REGISTER_DR0    RegsEnum = 114
	REGISTER_DR1    RegsEnum = 115
	REGISTER_DR2    RegsEnum = 116
	REGISTER_DR3    RegsEnum = 117
	REGISTER_DR6    RegsEnum = 118
	REGISTER_DR7    RegsEnum = 119
)

type ListEntry struct {
	Flink *ListEntry
	Blink *ListEntry
}
type GuestRegs struct {
	Rax Uint64
	Rcx Uint64
	Rdx Uint64
	Rbx Uint64
	Rsp Uint64
	Rbp Uint64
	Rsi Uint64
	Rdi Uint64
	R8  Uint64
	R9  Uint64
	R10 Uint64
	R11 Uint64
	R12 Uint64
	R13 Uint64
	R14 Uint64
	R15 Uint64
}
type GuestExtraRegisters struct {
	Cs     Uint16
	Ds     Uint16
	Fs     Uint16
	Gs     Uint16
	Es     Uint16
	Ss     Uint16
	Rflags Uint64
	Rip    Uint64
}
type ScriptEngineVariablesList struct {
	TempList            *Uint64
	GlobalVariablesList *Uint64
	LocalVariablesList  *Uint64
}
type Cr3Type struct {
	Anon192_5
}
type Anon192_5 struct {
	Raw [1]int64
}
type Anon196_9 struct {
	Pcid            Uint64
	PageFrameNumber Uint64
	Reserved1       Uint64
	Reserved_2      Uint64
	PcidInvalidate  Uint64
}
type DebuggerRemotePacket struct {
	Checksum                   Byte
	Indicator                  Uint64
	TypeOfThePacket            DebuggerRemotePacketType
	RequestedActionOfThePacket DebuggerRemotePacketRequestedAction
}
type DebuggeeUserInputPacket struct {
	CommandLen           Uint32
	IgnoreFinishedSignal Boolean
	Result               Uint32
}
type DebuggeeEventAndActionHeaderForRemotePacket struct {
	Length Uint32
}
type DebuggerPausePacketReceived struct {
	Result Uint32
}
type DebuggerTriggeredEventDetails struct {
	Tag     Uint64
	Context unsafe.Pointer
	Stage   VmmCallbackEventCallingStageType
}
type DebuggeeKdPausedPacket struct {
	Rip                    Uint64
	IsProcessorOn32BitMode Boolean
	IgnoreDisassembling    Boolean
	PausingReason          DebuggeePausingReason
	CurrentCore            Ulong
	EventTag               Uint64
	EventCallingStage      VmmCallbackEventCallingStageType
	Rflags                 Uint64
	InstructionBytesOnRip  [16]Byte
	ReadInstructionLen     Uint16
}
type DebuggeeUdPausedPacket struct {
	Rip                   Uint64
	ProcessDebuggingToken Uint64
	Is32Bit               Boolean
	PausingReason         DebuggeePausingReason
	ProcessId             Uint32
	ThreadId              Uint32
	Rflags                Uint64
	EventTag              Uint64
	EventCallingStage     VmmCallbackEventCallingStageType
	InstructionBytesOnRip [16]Byte
	ReadInstructionLen    Uint16
	GuestRegs             GuestRegs
}
type DebuggeeMessagePacket struct {
	OperationCode Uint32
	Message       [4096]Char
}
type RegisterNotifyBuffer struct {
	Type   NotifyType
	hEvent unsafe.Pointer
}
type DirectVmcallParameters struct {
	OptionalParam1 Uint64
	OptionalParam2 Uint64
	OptionalParam3 Uint64
}
type EptHooksContext struct {
	HookingTag      Uint64
	PhysicalAddress Uint64
	VirtualAddress  Uint64
}
type EptHooksAddressDetailsForMemoryMonitor struct {
	StartAddress    Uint64
	EndAddress      Uint64
	SetHookForRead  Boolean
	SetHookForWrite Boolean
	SetHookForExec  Boolean
	MemoryType      DebuggerHookMemoryType
	Tag             Uint64
}
type EptHooksAddressDetailsForEpthook2 struct {
	TargetAddress unsafe.Pointer
	HookFunction  unsafe.Pointer
}
type EptSingleHookUnhookingDetails struct {
	CallerNeedsToRestoreEntryAndInvalidateEpt Boolean
	RemoveBreakpointInterception              Boolean
	PhysicalAddress                           SizeT
	OriginalEntry                             Uint64
}
type Anon1444_9 struct {
	Raw [1]int32
}
type Anon1446_5 struct {
	// [Bits 3:0] Segment type.
	Type Uint32
	// [Bit 4] S - Descriptor type (0 = system; 1 = code or data).
	DescriptorType Uint32
	// [Bits 6:5] DPL - Descriptor privilege level.
	DescriptorPrivilegeLevel Uint32
	// [Bit 7] P - Segment present.
	Present   Uint32
	Reserved1 Uint32
	// [Bit 12] AVL - Available for use by system software.
	AvailableBit Uint32
	// [Bit 13] Reserved (except for CS). L - 64-bit mode active (for CS only).
	LongMode Uint32
	// [Bit 14] D/B - Default operation size (0 = 16-bit segment; 1 = 32-bit segment).
	DefaultBig Uint32
	// [Bit 15] G - Granularity.
	Granularity Uint32
	// [Bit 16] Segment unusable (0 = usable; 1 = unusable).
	Unusable  Uint32
	Reserved2 Uint32
}
type VmxSegmentSelector struct {
	Selector   Uint16
	Attributes VmxSegmentAccessRightsType
	Limit      Uint32
	Base       Uint64
}
type DebuggerModifyEvents struct {
	Tag          Uint64
	KernelStatus Uint64
	TypeOfAction DebuggerModifyEventsType
	IsEnabled    Boolean
}
type DebuggerShortCircuitingEvent struct {
	KernelStatus      Uint64
	IsShortCircuiting Boolean
}
type DebuggerEventOptions struct {
	OptionalParam1 Uint64
	OptionalParam2 Uint64
	OptionalParam3 Uint64
	OptionalParam4 Uint64
	OptionalParam5 Uint64
	OptionalParam6 Uint64
}
type DebuggerGeneralEventDetail struct {
	CommandsEventList     ListEntry
	CreationTime          TimeT
	CoreId                Uint32
	ProcessId             Uint32
	IsEnabled             Boolean
	EnableShortCircuiting Boolean
	EventStage            VmmCallbackEventCallingStageType
	HasCustomOutput       Boolean
	OutputSourceTags      [5]Uint64
	CountOfActions        Uint32
	Tag                   Uint64
	EventType             VmmEventTypeEnum
	Options               DebuggerEventOptions
	CommandStringBuffer   unsafe.Pointer
	ConditionBufferSize   Uint32
}
type DebuggerGeneralAction struct {
	EventTag                Uint64
	ActionType              DebuggerEventActionTypeEnum
	ImmediateMessagePassing Boolean
	PreAllocatedBuffer      Uint32
	CustomCodeBufferSize    Uint32
	ScriptBufferSize        Uint32
	ScriptBufferPointer     Uint32
}
type DebuggerEventAndActionResult struct {
	IsSuccessful Boolean
	Error        Uint32
}
type HwdbgPortInformationItems struct {
	PortSize Uint32
}
type HwdbgInstanceInformation struct {
	Version                                    Uint32
	maximumNumberOfStages                      Uint32
	scriptVariableLength                       Uint32
	numberOfSupportedLocalAndGlobalVariables   Uint32
	numberOfSupportedTemporaryVariables        Uint32
	maximumNumberOfSupportedGetScriptOperators Uint32
	maximumNumberOfSupportedSetScriptOperators Uint32
	sharedMemorySize                           Uint32
	debuggerAreaOffset                         Uint32
	debuggeeAreaOffset                         Uint32
	numberOfPins                               Uint32
	numberOfPorts                              Uint32
	scriptCapabilities                         _HwdbgScriptCapabilities
	bramAddrWidth                              Uint32
	bramDataWidth                              Uint32
}
type _HwdbgScriptCapabilities struct {
	AssignLocalGlobalVar                        Uint64
	AssignRegisters                             Uint64
	AssignPseudoRegisters                       Uint64
	ConditionalStatementsAndComparisonOperators Uint64
	FuncOr                                      Uint64
	FuncXor                                     Uint64
	FuncAnd                                     Uint64
	FuncAsr                                     Uint64
	FuncAsl                                     Uint64
	FuncAdd                                     Uint64
	FuncSub                                     Uint64
	FuncMul                                     Uint64
	FuncDiv                                     Uint64
	FuncMod                                     Uint64
	FuncGt                                      Uint64
	FuncLt                                      Uint64
	FuncEgt                                     Uint64
	FuncElt                                     Uint64
	FuncEqual                                   Uint64
	FuncNeq                                     Uint64
	FuncJmp                                     Uint64
	FuncJz                                      Uint64
	FuncJnz                                     Uint64
	FuncMov                                     Uint64
	FuncPrintf                                  Uint64
}
type HwdbgScriptBuffer struct {
	scriptNumberOfSymbols Uint32
}
type DebuggerReadPageTableEntriesDetails struct {
	VirtualAddress      Uint64
	ProcessId           Uint32
	Pml4eVirtualAddress Uint64
	Pml4eValue          Uint64
	PdpteVirtualAddress Uint64
	PdpteValue          Uint64
	PdeVirtualAddress   Uint64
	PdeValue            Uint64
	PteVirtualAddress   Uint64
	PteValue            Uint64
	KernelStatus        Uint32
}
type DebuggerVa2paAndPa2vaCommands struct {
	VirtualAddress     Uint64
	PhysicalAddress    Uint64
	ProcessId          Uint32
	IsVirtual2Physical Boolean
	KernelStatus       Uint32
}
type DebuggerPageInRequest struct {
	VirtualAddressFrom Uint64
	VirtualAddressTo   Uint64
	ProcessId          Uint32
	PageFaultErrorCode Uint32
	KernelStatus       Uint32
}
type ReversingMachineReconstructMemoryRequest struct {
	ProcessId    Uint32
	Size         Uint32
	Mode         ReversingMachineReconstructMemoryMode
	Type         ReversingMachineReconstructMemoryType
	KernelStatus Uint32
}
type DebuggerDtCommandOptions struct {
	TypeName             *byte
	SizeOfTypeName       Uint64
	Address              Uint64
	IsStruct             Boolean
	BufferAddress        unsafe.Pointer
	TargetPid            Uint32
	AdditionalParameters *byte
}
type DebuggerPreallocCommand struct {
	Type         DebuggerPreallocCommandType
	Count        Uint32
	KernelStatus Uint32
}
type DebuggerPreactivateCommand struct {
	Type         DebuggerPreactivateCommandType
	KernelStatus Uint32
}
type DebuggerReadMemory struct {
	Pid            Uint32
	Address        Uint64
	Size           Uint32
	GetAddressMode Boolean
	AddressMode    DebuggerReadMemoryAddressMode
	MemoryType     DebuggerReadMemoryType
	ReadingType    DebuggerReadReadingType
	ReturnLength   Uint32
	KernelStatus   Uint32
}
type DebuggerFlushLoggingBuffers struct {
	KernelStatus                               Uint32
	CountOfMessagesThatSetAsReadFromVmxRoot    Uint32
	CountOfMessagesThatSetAsReadFromVmxNonRoot Uint32
}
type DebuggerDebuggerTestQueryBuffer struct {
	RequestType  DebuggerTestQueryState
	Context      Uint64
	KernelStatus Uint32
}
type DebuggerPerformKernelTests struct {
	KernelStatus Uint32
}
type DebuggerSendCommandExecutionFinishedSignal struct {
	KernelStatus Uint32
}
type DebuggeeSendGeneralPacketFromDebuggeeToDebugger struct {
	RequestedAction       DebuggerRemotePacketRequestedAction
	LengthOfBuffer        Uint32
	PauseDebuggeeWhenSent Boolean
	KernelResult          Uint32
}
type DebuggerSendUsermodeMessagesToDebugger struct {
	KernelStatus Uint32
	Length       Uint32
}
type DebuggerReadAndWriteOnMsr struct {
	Msr        Uint64
	CoreNumber Uint32
	ActionType DebuggerMsrActionType
	Value      Uint64
}
type DebuggerEditMemory struct {
	Result             Uint32
	Address            Uint64
	ProcessId          Uint32
	MemoryType         DebuggerEditMemoryType
	ByteSize           DebuggerEditMemoryByteSize
	CountOf64Chunks    Uint32
	FinalStructureSize Uint32
}
type DebuggerSearchMemory struct {
	Address            Uint64
	Length             Uint64
	ProcessId          Uint32
	MemoryType         DebuggerSearchMemoryType
	ByteSize           DebuggerSearchMemoryByteSize
	CountOf64Chunks    Uint32
	FinalStructureSize Uint32
}
type DebuggerHideAndTransparentDebuggerMode struct {
	IsHide                               Boolean
	CpuidAverage                         Uint64
	CpuidStandardDeviation               Uint64
	CpuidMedian                          Uint64
	RdtscAverage                         Uint64
	RdtscStandardDeviation               Uint64
	RdtscMedian                          Uint64
	TrueIfProcessIdAndFalseIfProcessName Boolean
	ProcId                               Uint32
	LengthOfProcessName                  Uint32
	KernelStatus                         Uint64
}
type DebuggerPrepareDebuggee struct {
	PortAddress       Uint32
	Baudrate          Uint32
	KernelBaseAddress Uint64
	Result            Uint32
	OsName            [256]Char
}
type DebuggeeChangeCorePacket struct {
	NewCore Uint32
	Result  Uint32
}
type DebuggerAttachDetachUserModeProcess struct {
	IsStartingNewProcess                      Boolean
	ProcessId                                 Uint32
	ThreadId                                  Uint32
	CheckCallbackAtFirstInstruction           Boolean
	Is32Bit                                   Boolean
	IsPaused                                  Boolean
	Action                                    DebuggerAttachDetachUserModeProcessActionType
	CountOfActiveDebuggingThreadsAndProcesses Uint32
	Token                                     Uint64
	Result                                    Uint64
}
type DebuggeeProcessListNeededDetails struct {
	PsActiveProcessHead      Uint64
	ImageFileNameOffset      Ulong
	UniquePidOffset          Ulong
	ActiveProcessLinksOffset Ulong
}
type DebuggeeThreadListNeededDetails struct {
	ThreadListHeadOffset     Uint32
	ThreadListEntryOffset    Uint32
	CidOffset                Uint32
	PsActiveProcessHead      Uint64
	ActiveProcessLinksOffset Ulong
	Process                  Uint64
}
type DebuggeeProcessListDetailsEntry struct {
	Eprocess      Uint64
	ProcessId     Uint32
	Cr3           Uint64
	ImageFileName [16]Uchar
}
type DebuggeeThreadListDetailsEntry struct {
	Eprocess      Uint64
	Ethread       Uint64
	ProcessId     Uint32
	ThreadId      Uint32
	ImageFileName [16]Uchar
}
type DebuggerQueryActiveProcessesOrThreads struct {
	ProcessListNeededDetails DebuggeeProcessListNeededDetails
	ThreadListNeededDetails  DebuggeeThreadListNeededDetails
	QueryType                DebuggerQueryActiveProcessesOrThreadsTypes
	QueryAction              DebuggerQueryActiveProcessesOrThreadsActions
	Count                    Uint32
	Result                   Uint64
}
type DebuggerSingleCallstackFrame struct {
	IsStackAddressValid   Boolean
	IsValidAddress        Boolean
	IsExecutable          Boolean
	Value                 Uint64
	InstructionBytesOnRip [7]Byte
}
type DebuggerCallstackRequest struct {
	Is32Bit       Boolean
	KernelStatus  Uint32
	DisplayMethod DebuggerCallstackDisplayMethod
	Size          Uint32
	FrameCount    Uint32
	BaseAddress   Uint64
	BufferSize    Uint64
}
type UsermodeDebuggingThreadOrProcessStateDetails struct {
	ProcessId Uint32
	ThreadId  Uint32
	IsProcess Boolean
}
type DebuggerEventActionRunScriptConfiguration struct {
	ScriptBuffer                Uint64
	ScriptLength                Uint32
	ScriptPointer               Uint32
	OptionalRequestedBufferSize Uint32
}
type DebuggerEventRequestBuffer struct {
	EnabledRequestBuffer Boolean
	RequestBufferSize    Uint32
	RequstBufferAddress  Uint64
}
type DebuggerEventRequestCustomCode struct {
	CustomCodeBufferSize        Uint32
	CustomCodeBufferAddress     unsafe.Pointer
	OptionalRequestedBufferSize Uint32
}
type DebuggerUdCommandAction struct {
	ActionType     DebuggerUdCommandActionType
	OptionalParam1 Uint64
	OptionalParam2 Uint64
	OptionalParam3 Uint64
	OptionalParam4 Uint64
}
type DebuggerUdCommandPacket struct {
	UdAction                    DebuggerUdCommandAction
	ProcessDebuggingDetailToken Uint64
	TargetThreadId              Uint32
	ApplyToAllPausedThreads     Boolean
	Result                      Uint32
}
type DebuggeeDetailsAndSwitchProcessPacket struct {
	ActionType            DebuggeeDetailsAndSwitchProcessType
	ProcessId             Uint32
	Process               Uint64
	IsSwitchByClkIntr     Boolean
	ProcessName           [16]Uchar
	ProcessListSymDetails DebuggeeProcessListNeededDetails
	Result                Uint32
}
type DebuggeeDetailsAndSwitchThreadPacket struct {
	ActionType            DebuggeeDetailsAndSwitchThreadType
	ThreadId              Uint32
	ProcessId             Uint32
	Thread                Uint64
	Process               Uint64
	CheckByClockInterrupt Boolean
	ProcessName           [16]Uchar
	ThreadListSymDetails  DebuggeeThreadListNeededDetails
	Result                Uint32
}
type DebuggeeStepPacket struct {
	StepType                  DebuggerRemoteSteppingRequest
	IsCurrentInstructionACall Boolean
	CallLength                Uint32
}
type DebuggeeFormatsPacket struct {
	Value  Uint64
	Result Uint32
}
type DebuggeeSymbolRequestPacket struct {
	ProcessId Uint32
}
type DebuggeeBpPacket struct {
	Address           Uint64
	Pid               Uint32
	Tid               Uint32
	Core              Uint32
	RemoveAfterHit    Boolean
	CheckForCallbacks Boolean
	Result            Uint32
}
type DebuggeeBpListOrModifyPacket struct {
	BreakpointId Uint64
	Request      DebuggeeBreakpointModificationRequest
	Result       Uint32
}
type DebuggeeScriptPacket struct {
	ScriptBufferSize    Uint32
	ScriptBufferPointer Uint32
	IsFormat            Boolean
	Result              Uint32
}
type DebuggeeResultOfSearchPacket struct {
	CountOfResults Uint32
	Result         Uint32
}
type DebuggeeRegisterReadDescription struct {
	RegisterId   Uint32
	Value        Uint64
	KernelStatus Uint32
}
type DebuggeeRegisterWriteDescription struct {
	RegisterId   Uint32
	Value        Uint64
	KernelStatus Uint32
}
type Symbol struct {
	Type         uint64
	Len          uint64
	VariableType uint64
	Value        uint64
}
type HwdbgShortSymbol struct {
	Type  uint64
	Value uint64
}
type SymbolBuffer struct {
	Head    Psymbol
	Pointer uint32
	Size    uint32
	Message *byte
}
type SymbolMap struct {
	Name *byte
	Type uint64
}
type ActionBuffer struct {
	Tag                       uint64
	CurrentAction             uint64
	ImmediatelySendTheResults byte
	Context                   uint64
	CallingStage              byte
}
type UserDefinedFunctionNode struct {
	Name            *byte
	Address         uint64
	VariableType    uint64
	ParameterBuffer PsymbolBuffer
	ParameterNumber uint64
	StackTempNumber uint64
	NextNode        *UserDefinedFunctionNode
}
type ModuleSymbolDetail struct {
	IsSymbolDetailsFound   Boolean
	IsLocalSymbolPath      Boolean
	IsSymbolPDBAvaliable   Boolean
	IsUserMode             Boolean
	Is32Bit                Boolean
	BaseAddress            Uint64
	FilePath               [260]byte
	ModuleSymbolPath       [260]byte
	ModuleSymbolGuidAndAge [60]byte
}
type UsermodeLoadedModuleSymbols struct {
	BaseAddress Uint64
	Entrypoint  Uint64
	FilePath    [260]Rune
}
type UsermodeLoadedModuleDetails struct {
	ProcessId        Uint32
	OnlyCountModules Boolean
	Is32Bit          Boolean
	ModulesCount     Uint32
	Result           Uint32
}
type DebuggerUpdateSymbolTable struct {
	TotalSymbols       Uint32
	CurrentSymbolIndex Uint32
	SymbolDetailPacket ModuleSymbolDetail
}
type DebuggeeSymbolUpdateResult struct {
	KernelStatus Uint64
}
type (
	_Int128T           = any
	_Uint128T          = any
	__NSConstantString = any
	SizeT              = uint64
	_BuiltinMsVaList   = *byte
	_BuiltinVaList     = *byte
	Rune               = int32
	WintT              = int32
	Long               = int64
	PsizeT             = *uint64
	TimeT              = uint64
	Ntstatus           = uint64
	VaList             = *byte
	PlistEntry         = *ListEntry
	PrlistEntry        = ListEntry
)

// ///////////////////////////////////////////////
type (
	Qword      = uint64
	Dword      = uint64
	Bool       = int32
	Byte       = uint8
	Word       = uint16
	Int        = int32
	Uint       = uint32
	Puint      = *uint32
	Ulong64    = uint64
	Pulong64   = *uint64
	Dword64    = uint64
	Pdword64   = *uint64
	Char       = byte
	Wchar      = Rune
	Uchar      = uint8
	Ushort     = uint16
	Ulong      = uint64
	Boolean    = Uchar
	Pboolean   = *Boolean
	Int8       = int8
	Pint8      = *int8
	Int16      = int16
	Pint16     = *int16
	Int32      = int32
	Pint32     = *int32
	Int64      = int64
	Pint64     = *int64
	Uint8      = uint8
	Puint8     = *uint8
	Uint16     = uint16
	Puint16    = *uint16
	Uint32     = uint32
	Puint32    = *uint32
	Uint64     = uint64
	Puint64    = *uint64
	PguestRegs = *GuestRegs
)

// @brief struct for extra registers
type PguestExtraRegisters = *GuestExtraRegisters

// @brief List of different variables
type PscriptEngineVariablesList = *ScriptEngineVariablesList

// @brief CR3 Structure
type Pcr3Type = *Cr3Type

// @brief The structure of remote packets in HyperDbg
type PdebuggerRemotePacket = *DebuggerRemotePacket

// @brief Callback type that can be used to be used
// as a custom ShowMessages function (by passing message as a parameter)
type SendMessageWithParamCallback = unsafe.Pointer

// @brief Callback type that can be used to be used
// as a custom ShowMessages function (using shared buffer)
type SendMessageWWithSharedBufferCallback = unsafe.Pointer

// @brief The structure of user-input packet in HyperDbg
type PdebuggeeUserInputPacket = *DebuggeeUserInputPacket

// @brief The structure of user-input packet in HyperDbg
type PdebuggeeEventAndActionHeaderForRemotePacket = *DebuggeeEventAndActionHeaderForRemotePacket

// @brief request to pause and halt the system
type PdebuggerPausePacketReceived = *DebuggerPausePacketReceived

// @brief The structure of detail of a triggered event in HyperDbg
//
// @details This structure is also used for transferring breakpoint ids, RIP as the context, etc.
type PdebuggerTriggeredEventDetails = *DebuggerTriggeredEventDetails

// @brief The structure of pausing packet in kHyperDbg
type PdebuggeeKdPausedPacket = *DebuggeeKdPausedPacket

// @brief The structure of pausing packet in uHyperDbg
type PdebuggeeUdPausedPacket = *DebuggeeUdPausedPacket

// @brief The structure of message packet in HyperDbg
type PdebuggeeMessagePacket = *DebuggeeMessagePacket

// @brief Used to register event for transferring buffer between user-to-kernel
type PregisterNotifyBuffer = *RegisterNotifyBuffer

// @brief Used for sending direct VMCALLs on the VMX root-mode
type PdirectVmcallParameters = *DirectVmcallParameters

// @brief Temporary $context used in some EPT hook commands
type PeptHooksContext = *EptHooksContext

// @brief Setting details for EPT Hooks (!monitor)
type PeptHooksAddressDetailsForMemoryMonitor = *EptHooksAddressDetailsForMemoryMonitor

// @brief Setting details for EPT Hooks (!epthook2)
type PeptHooksAddressDetailsForEpthook2 = *EptHooksAddressDetailsForEpthook2

// @brief Details of unhooking single EPT hooks
type PeptSingleHookUnhookingDetails = *EptSingleHookUnhookingDetails

// @brief Describe segment selector in VMX
//
// @details This structure is copied from ia32.h to the SDK to
// be used as a data type for functions
type VmxSegmentAccessRightsType = any

// @brief Segment selector
type PvmxSegmentSelector = *VmxSegmentSelector

// @brief request for modifying events (enable/disable/clear)
type PdebuggerModifyEvents = *DebuggerModifyEvents

// @brief request for performing a short-circuiting event
type PdebuggerShortCircuitingEvent = *DebuggerShortCircuitingEvent

// @brief request for performing a short-circuiting event
type PdebuggerEventOptions = *DebuggerEventOptions

// @brief Each command is like the following struct, it also used for
// tracing works in user mode and sending it to the kernl mode
//
// @details THIS IS NOT WHAT HYPERDBG SAVES FOR EVENTS IN KERNEL-MODE
type PdebuggerGeneralEventDetail = *DebuggerGeneralEventDetail

// @brief Each event can have multiple actions
//
// @details THIS STRUCTURE IS ONLY USED IN USER MODE
// WE USE SEPARATE STRUCTURE FOR ACTIONS IN
// KERNEL MODE
type PdebuggerGeneralAction = *DebuggerGeneralAction

// @brief Status of register buffers
type PdebuggerEventAndActionResult = *DebuggerEventAndActionResult

// @brief The structure of port information (each item) in hwdbg
type (
	PhwdbgPortInformationItems = *HwdbgPortInformationItems
	PhwdbgInstanceInformation  = *HwdbgInstanceInformation
)

// @brief The structure of script buffer in hwdbg
type PhwdbgScriptBuffer = *HwdbgScriptBuffer

// @brief request for !pte command
type PdebuggerReadPageTableEntriesDetails = *DebuggerReadPageTableEntriesDetails

// @brief requests for !va2pa and !pa2va commands
type PdebuggerVa2paAndPa2vaCommands = *DebuggerVa2paAndPa2vaCommands

// @brief requests for the '.pagein' command
type PdebuggerPageInRequest = *DebuggerPageInRequest

// @brief requests for !rev command
type PreversingMachineReconstructMemoryRequest = *ReversingMachineReconstructMemoryRequest

// @brief requests options for dt and struct command
type PdebuggerDtCommandOptions = *DebuggerDtCommandOptions

// @brief requests for the 'prealloc' command
type PdebuggerPreallocCommand = *DebuggerPreallocCommand

// @brief requests for the 'preactivate' command
type PdebuggerPreactivateCommand = *DebuggerPreactivateCommand

// @brief request for reading virtual and physical memory
type PdebuggerReadMemory = *DebuggerReadMemory

// @brief request for flushing buffers
type PdebuggerFlushLoggingBuffers = *DebuggerFlushLoggingBuffers

// @brief request for test query buffers
type PdebuggerDebuggerTestQueryBuffer = *DebuggerDebuggerTestQueryBuffer

// @brief request performing kernel tests
type PdebuggerPerformKernelTests = *DebuggerPerformKernelTests

// @brief request for send a signal that command execution finished
type PdebuggerSendCommandExecutionFinishedSignal = *DebuggerSendCommandExecutionFinishedSignal

// @brief request for send general packets from debuggee to debugger
type PdebuggeeSendGeneralPacketFromDebuggeeToDebugger = *DebuggeeSendGeneralPacketFromDebuggeeToDebugger

// @brief request for send a user-mode message to debugger
type PdebuggerSendUsermodeMessagesToDebugger = *DebuggerSendUsermodeMessagesToDebugger

// @brief request to read or write on MSRs
type PdebuggerReadAndWriteOnMsr = *DebuggerReadAndWriteOnMsr

// @brief request for edit virtual and physical memory
type PdebuggerEditMemory = *DebuggerEditMemory

// @brief request for searching memory
type PdebuggerSearchMemory = *DebuggerSearchMemory

// @brief request for enable or disable transparent-mode
type PdebuggerHideAndTransparentDebuggerMode = *DebuggerHideAndTransparentDebuggerMode

// @brief request to make this computer to a debuggee
type PdebuggerPrepareDebuggee = *DebuggerPrepareDebuggee

// @brief The structure of changing core packet in HyperDbg
type PdebuggeeChangeCorePacket = *DebuggeeChangeCorePacket

// @brief request for attaching user-mode process
type PdebuggerAttachDetachUserModeProcess = *DebuggerAttachDetachUserModeProcess

// @brief The structure of needed information to get the details
// of the process from nt!_EPROCESS and location of needed variables
type PdebuggeeProcessListNeededDetails = *DebuggeeProcessListNeededDetails

// @brief The structure of needed information to get the details
// of the thread from nt!_ETHREAD and location of needed variables
type PdebuggeeThreadListNeededDetails = *DebuggeeThreadListNeededDetails

// @brief The structure showing list of processes (details of each
// entry)
type PdebuggeeProcessListDetailsEntry = *DebuggeeProcessListDetailsEntry

// @brief The structure showing list of threads (details of each
// entry)
type PdebuggeeThreadListDetailsEntry = *DebuggeeThreadListDetailsEntry

// @brief request for query count of active processes and threads
type PdebuggerQueryActiveProcessesOrThreads = *DebuggerQueryActiveProcessesOrThreads

// @brief The structure for saving the callstack frame of one parameter
type PdebuggerSingleCallstackFrame = *DebuggerSingleCallstackFrame

// @brief request for callstack frames
type (
	PdebuggerCallstackRequest                     = *DebuggerCallstackRequest
	PusermodeDebuggingThreadOrProcessStateDetails = *UsermodeDebuggingThreadOrProcessStateDetails
)

// @brief Used for run the script
type PdebuggerEventActionRunScriptConfiguration = *DebuggerEventActionRunScriptConfiguration

// @brief used in the case of requesting a "request buffer"
type PdebuggerEventRequestBuffer = *DebuggerEventRequestBuffer

// @brief used in the case of custom code requests to the debugger
type PdebuggerEventRequestCustomCode = *DebuggerEventRequestCustomCode

// @brief Description of user-mode debugging actions
type PdebuggerUdCommandAction = *DebuggerUdCommandAction

// @brief The structure of command packet in uHyperDbg
type PdebuggerUdCommandPacket = *DebuggerUdCommandPacket

// @brief The structure of changing process and show process
// packet in HyperDbg
type PdebuggeeDetailsAndSwitchProcessPacket = *DebuggeeDetailsAndSwitchProcessPacket

// @brief The structure of changing thead and show thread
// packet in HyperDbg
type PdebuggeeDetailsAndSwitchThreadPacket = *DebuggeeDetailsAndSwitchThreadPacket

// @brief The structure of stepping packet in HyperDbg
type PdebuggeeStepPacket = *DebuggeeStepPacket

// @brief The structure of .formats result packet in HyperDbg
type PdebuggeeFormatsPacket = *DebuggeeFormatsPacket

// @brief The structure of .sym reload packet in HyperDbg
type PdebuggeeSymbolRequestPacket = *DebuggeeSymbolRequestPacket

// @brief The structure of bp command packet in HyperDbg
type PdebuggeeBpPacket = *DebuggeeBpPacket

// @brief The structure of breakpoint modification requests packet in HyperDbg
type PdebuggeeBpListOrModifyPacket = *DebuggeeBpListOrModifyPacket

// @brief The structure of script packet in HyperDbg
type PdebuggeeScriptPacket = *DebuggeeScriptPacket

// @brief The structure of result of search packet in HyperDbg
type PdebuggeeResultOfSearchPacket = *DebuggeeResultOfSearchPacket

// @brief Register Descriptor Structure to use in r command.
type PdebuggeeRegisterReadDescription = *DebuggeeRegisterReadDescription

// @brief Register Descriptor Structure to write on registers.
type (
	PdebuggeeRegisterWriteDescription = *DebuggeeRegisterWriteDescription
	Psymbol                           = *Symbol
	PhwdbgShortSymbol                 = *HwdbgShortSymbol
	PsymbolBuffer                     = *SymbolBuffer
	PsymbolMap                        = *SymbolMap
	PactionBuffer                     = *ActionBuffer
	PuserDefinedFunctionNode          = *UserDefinedFunctionNode
)

// @brief structures for sending and saving details
// about each module and symbols details
type (
	PmoduleSymbolDetail          = *ModuleSymbolDetail
	PusermodeLoadedModuleSymbols = *UsermodeLoadedModuleSymbols
	PusermodeLoadedModuleDetails = *UsermodeLoadedModuleDetails
)

// @brief Callback type that should be used to add
// list of Addresses to ObjectNames
type SymbolMapCallback = unsafe.Pointer

// @brief request to add new symbol detail or update a previous
// symbol table entry
type PdebuggerUpdateSymbolTable = *DebuggerUpdateSymbolTable

// @brief request that shows, symbol reload process is finished
type PdebuggeeSymbolUpdateResult = *DebuggeeSymbolUpdateResult

var __imp_hyperdbg_u_detect_vmx_support bindlib.PreloadProc

// Gengo init function.
func init() {
	__imp_hyperdbg_u_detect_vmx_support = GengoLibrary.ImportNow("hyperdbg_u_detect_vmx_support")
	__imp_hyperdbg_u_read_vendor_string = GengoLibrary.ImportNow("hyperdbg_u_read_vendor_string")
	__imp_hyperdbg_u_load_vmm = GengoLibrary.ImportNow("hyperdbg_u_load_vmm")
	__imp_hyperdbg_u_unload_vmm = GengoLibrary.ImportNow("hyperdbg_u_unload_vmm")
	__imp_hyperdbg_u_install_vmm_driver = GengoLibrary.ImportNow("hyperdbg_u_install_vmm_driver")
	__imp_hyperdbg_u_uninstall_vmm_driver = GengoLibrary.ImportNow("hyperdbg_u_uninstall_vmm_driver")
	__imp_hyperdbg_u_stop_vmm_driver = GengoLibrary.ImportNow("hyperdbg_u_stop_vmm_driver")
	__imp_hyperdbg_u_interpreter = GengoLibrary.ImportNow("hyperdbg_u_interpreter")
	__imp_hyperdbg_u_show_signature = GengoLibrary.ImportNow("hyperdbg_u_show_signature")
	__imp_hyperdbg_u_set_text_message_callback = GengoLibrary.ImportNow("hyperdbg_u_set_text_message_callback")
	__imp_hyperdbg_u_set_text_message_callback_using_shared_buffer = GengoLibrary.ImportNow("hyperdbg_u_set_text_message_callback_using_shared_buffer")
	__imp_hyperdbg_u_unset_text_message_callback = GengoLibrary.ImportNow("hyperdbg_u_unset_text_message_callback")
	__imp_hyperdbg_u_script_read_file_and_execute_commandline = GengoLibrary.ImportNow("hyperdbg_u_script_read_file_and_execute_commandline")
	__imp_hyperdbg_u_continue_previous_command = GengoLibrary.ImportNow("hyperdbg_u_continue_previous_command")
	__imp_hyperdbg_u_check_multiline_command = GengoLibrary.ImportNow("hyperdbg_u_check_multiline_command")
	__imp_hyperdbg_u_set_custom_driver_path = GengoLibrary.ImportNow("hyperdbg_u_set_custom_driver_path")
	__imp_hyperdbg_u_use_default_driver_path = GengoLibrary.ImportNow("hyperdbg_u_use_default_driver_path")
	__imp_hyperdbg_u_connect_local_debugger = GengoLibrary.ImportNow("hyperdbg_u_connect_local_debugger")
	__imp_hyperdbg_u_connect_remote_debugger = GengoLibrary.ImportNow("hyperdbg_u_connect_remote_debugger")
	__imp_hyperdbg_u_connect_remote_debugger_using_com_port = GengoLibrary.ImportNow("hyperdbg_u_connect_remote_debugger_using_com_port")
	__imp_hyperdbg_u_connect_remote_debugger_using_named_pipe = GengoLibrary.ImportNow("hyperdbg_u_connect_remote_debugger_using_named_pipe")
	__imp_hyperdbg_u_connect_current_debugger_using_com_port = GengoLibrary.ImportNow("hyperdbg_u_connect_current_debugger_using_com_port")
	__imp_hyperdbg_u_get_kernel_base = GengoLibrary.ImportNow("hyperdbg_u_get_kernel_base")
	__imp_hyperdbg_u_read_memory = GengoLibrary.ImportNow("hyperdbg_u_read_memory")
	__imp_hyperdbg_u_show_memory_or_disassemble = GengoLibrary.ImportNow("hyperdbg_u_show_memory_or_disassemble")
	__imp_hyperdbg_u_write_memory = GengoLibrary.ImportNow("hyperdbg_u_write_memory")
	__imp_hyperdbg_u_read_all_registers = GengoLibrary.ImportNow("hyperdbg_u_read_all_registers")
	__imp_hyperdbg_u_read_target_register = GengoLibrary.ImportNow("hyperdbg_u_read_target_register")
	__imp_hyperdbg_u_write_target_register = GengoLibrary.ImportNow("hyperdbg_u_write_target_register")
	__imp_hyperdbg_u_show_all_registers = GengoLibrary.ImportNow("hyperdbg_u_show_all_registers")
	__imp_hyperdbg_u_show_target_register = GengoLibrary.ImportNow("hyperdbg_u_show_target_register")
	__imp_hyperdbg_u_continue_debuggee = GengoLibrary.ImportNow("hyperdbg_u_continue_debuggee")
	__imp_hyperdbg_u_pause_debuggee = GengoLibrary.ImportNow("hyperdbg_u_pause_debuggee")
	__imp_hyperdbg_u_set_breakpoint = GengoLibrary.ImportNow("hyperdbg_u_set_breakpoint")
	__imp_hyperdbg_u_start_process = GengoLibrary.ImportNow("hyperdbg_u_start_process")
	__imp_hyperdbg_u_start_process_with_args = GengoLibrary.ImportNow("hyperdbg_u_start_process_with_args")
	__imp_hyperdbg_u_assemble_get_length = GengoLibrary.ImportNow("hyperdbg_u_assemble_get_length")
	__imp_hyperdbg_u_assemble = GengoLibrary.ImportNow("hyperdbg_u_assemble")
	__imp_ScriptEngineParse = GengoLibrary.ImportNow("ScriptEngineParse")
	__imp_PrintSymbolBuffer = GengoLibrary.ImportNow("PrintSymbolBuffer")
	__imp_PrintSymbol = GengoLibrary.ImportNow("PrintSymbol")
	__imp_RemoveSymbolBuffer = GengoLibrary.ImportNow("RemoveSymbolBuffer")
	__imp_FuncGetNumberOfOperands = GengoLibrary.ImportNow("FuncGetNumberOfOperands")
	__imp_ScriptEngineSetHwdbgInstanceInfo = GengoLibrary.ImportNow("ScriptEngineSetHwdbgInstanceInfo")
	__imp_ScriptEngineSetTextMessageCallback = GengoLibrary.ImportNow("ScriptEngineSetTextMessageCallback")
	__imp_ScriptEngineSymbolAbortLoading = GengoLibrary.ImportNow("ScriptEngineSymbolAbortLoading")
	__imp_ScriptEngineConvertNameToAddress = GengoLibrary.ImportNow("ScriptEngineConvertNameToAddress")
	__imp_ScriptEngineLoadFileSymbol = GengoLibrary.ImportNow("ScriptEngineLoadFileSymbol")
	__imp_ScriptEngineUnloadAllSymbols = GengoLibrary.ImportNow("ScriptEngineUnloadAllSymbols")
	__imp_ScriptEngineUnloadModuleSymbol = GengoLibrary.ImportNow("ScriptEngineUnloadModuleSymbol")
	__imp_ScriptEngineSearchSymbolForMask = GengoLibrary.ImportNow("ScriptEngineSearchSymbolForMask")
	__imp_ScriptEngineGetFieldOffset = GengoLibrary.ImportNow("ScriptEngineGetFieldOffset")
	__imp_ScriptEngineGetDataTypeSize = GengoLibrary.ImportNow("ScriptEngineGetDataTypeSize")
	__imp_ScriptEngineCreateSymbolTableForDisassembler = GengoLibrary.ImportNow("ScriptEngineCreateSymbolTableForDisassembler")
	__imp_ScriptEngineConvertFileToPdbPath = GengoLibrary.ImportNow("ScriptEngineConvertFileToPdbPath")
	__imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails = GengoLibrary.ImportNow("ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails")
	__imp_ScriptEngineSymbolInitLoad = GengoLibrary.ImportNow("ScriptEngineSymbolInitLoad")
	__imp_ScriptEngineShowDataBasedOnSymbolTypes = GengoLibrary.ImportNow("ScriptEngineShowDataBasedOnSymbolTypes")
	__imp_SymSetTextMessageCallback = GengoLibrary.ImportNow("SymSetTextMessageCallback")
	__imp_SymbolAbortLoading = GengoLibrary.ImportNow("SymbolAbortLoading")
	__imp_SymConvertNameToAddress = GengoLibrary.ImportNow("SymConvertNameToAddress")
	__imp_SymLoadFileSymbol = GengoLibrary.ImportNow("SymLoadFileSymbol")
	__imp_SymUnloadAllSymbols = GengoLibrary.ImportNow("SymUnloadAllSymbols")
	__imp_SymUnloadModuleSymbol = GengoLibrary.ImportNow("SymUnloadModuleSymbol")
	__imp_SymSearchSymbolForMask = GengoLibrary.ImportNow("SymSearchSymbolForMask")
	__imp_SymGetFieldOffset = GengoLibrary.ImportNow("SymGetFieldOffset")
	__imp_SymGetDataTypeSize = GengoLibrary.ImportNow("SymGetDataTypeSize")
	__imp_SymCreateSymbolTableForDisassembler = GengoLibrary.ImportNow("SymCreateSymbolTableForDisassembler")
	__imp_SymConvertFileToPdbPath = GengoLibrary.ImportNow("SymConvertFileToPdbPath")
	__imp_SymConvertFileToPdbFileAndGuidAndAgeDetails = GengoLibrary.ImportNow("SymConvertFileToPdbFileAndGuidAndAgeDetails")
	__imp_SymbolInitLoad = GengoLibrary.ImportNow("SymbolInitLoad")
	__imp_SymShowDataBasedOnSymbolTypes = GengoLibrary.ImportNow("SymShowDataBasedOnSymbolTypes")
	__imp_SymQuerySizeof = GengoLibrary.ImportNow("SymQuerySizeof")
	__imp_SymCastingQueryForFiledsAndTypes = GengoLibrary.ImportNow("SymCastingQueryForFiledsAndTypes")
	bindlib.Validate((*ListEntry)(nil), 16, 8, "Flink", 0, "Blink", 8)
	bindlib.Validate((*GuestRegs)(nil), 128, 8, "Rax", 0, "Rcx", 8, "Rdx", 16, "Rbx", 24, "Rsp", 32, "Rbp", 40, "Rsi", 48, "Rdi", 56, "R8", 64, "R9", 72, "R10", 80, "R11", 88, "R12", 96, "R13", 104, "R14", 112, "R15", 120)
	bindlib.Validate((*GuestExtraRegisters)(nil), 32, 8, "Cs", 0, "Ds", 2, "Fs", 4, "Gs", 6, "Es", 8, "Ss", 10, "Rflags", 16, "Rip", 24)
	bindlib.Validate((*ScriptEngineVariablesList)(nil), 24, 8, "TempList", 0, "GlobalVariablesList", 8, "LocalVariablesList", 16)
	bindlib.Validate((*Cr3Type)(nil), 8, 8)
	bindlib.Validate((*Anon192_5)(nil), 8, 8)
	bindlib.Validate((*Anon196_9)(nil), 8, 8, "Pcid", 0, "PageFrameNumber", 1, "Reserved1", 6, "Reserved_2", 7, "PcidInvalidate", 7)
	bindlib.Validate((*DebuggerRemotePacket)(nil), 24, 8, "Checksum", 0, "Indicator", 8, "TypeOfThePacket", 16, "RequestedActionOfThePacket", 20)
	bindlib.Validate((*DebuggeeUserInputPacket)(nil), 12, 4, "CommandLen", 0, "IgnoreFinishedSignal", 4, "Result", 8)
	bindlib.Validate((*DebuggeeEventAndActionHeaderForRemotePacket)(nil), 4, 4, "Length", 0)
	bindlib.Validate((*DebuggerPausePacketReceived)(nil), 4, 4, "Result", 0)
	bindlib.Validate((*DebuggerTriggeredEventDetails)(nil), 24, 8, "Tag", 0, "Context", 8, "Stage", 16)
	bindlib.Validate((*DebuggeeKdPausedPacket)(nil), 72, 8, "Rip", 0, "IsProcessorOn32BitMode", 8, "IgnoreDisassembling", 9, "PausingReason", 12, "CurrentCore", 16, "EventTag", 24, "EventCallingStage", 32, "Rflags", 40, "InstructionBytesOnRip", 48, "ReadInstructionLen", 64)
	bindlib.Validate((*DebuggeeUdPausedPacket)(nil), 200, 8, "Rip", 0, "ProcessDebuggingToken", 8, "Is32Bit", 16, "PausingReason", 20, "ProcessId", 24, "ThreadId", 28, "Rflags", 32, "EventTag", 40, "EventCallingStage", 48, "InstructionBytesOnRip", 52, "ReadInstructionLen", 68, "GuestRegs", 72)
	bindlib.Validate((*DebuggeeMessagePacket)(nil), 4100, 4, "OperationCode", 0, "Message", 4)
	bindlib.Validate((*RegisterNotifyBuffer)(nil), 16, 8, "Type", 0, "hEvent", 8)
	bindlib.Validate((*DirectVmcallParameters)(nil), 24, 8, "OptionalParam1", 0, "OptionalParam2", 8, "OptionalParam3", 16)
	bindlib.Validate((*EptHooksContext)(nil), 24, 8, "HookingTag", 0, "PhysicalAddress", 8, "VirtualAddress", 16)
	bindlib.Validate((*EptHooksAddressDetailsForMemoryMonitor)(nil), 32, 8, "StartAddress", 0, "EndAddress", 8, "SetHookForRead", 16, "SetHookForWrite", 17, "SetHookForExec", 18, "MemoryType", 20, "Tag", 24)
	bindlib.Validate((*EptHooksAddressDetailsForEpthook2)(nil), 16, 8, "TargetAddress", 0, "HookFunction", 8)
	bindlib.Validate((*EptSingleHookUnhookingDetails)(nil), 24, 8, "CallerNeedsToRestoreEntryAndInvalidateEpt", 0, "RemoveBreakpointInterception", 1, "PhysicalAddress", 8, "OriginalEntry", 16)
	bindlib.Validate((*Anon1444_9)(nil), 4, 4)
	bindlib.Validate((*Anon1446_5)(nil), 4, 4, "Type", 0, "DescriptorType", 0, "DescriptorPrivilegeLevel", 0, "Present", 0, "Reserved1", 1, "AvailableBit", 1, "LongMode", 1, "DefaultBig", 1, "Granularity", 1, "Unusable", 2, "Reserved2", 2)
	bindlib.Validate((*VmxSegmentSelector)(nil), 24, 8, "Selector", 0, "Attributes", 4, "Limit", 8, "Base", 16)
	bindlib.Validate((*DebuggerModifyEvents)(nil), 24, 8, "Tag", 0, "KernelStatus", 8, "TypeOfAction", 16, "IsEnabled", 20)
	bindlib.Validate((*DebuggerShortCircuitingEvent)(nil), 16, 8, "KernelStatus", 0, "IsShortCircuiting", 8)
	bindlib.Validate((*DebuggerEventOptions)(nil), 48, 8, "OptionalParam1", 0, "OptionalParam2", 8, "OptionalParam3", 16, "OptionalParam4", 24, "OptionalParam5", 32, "OptionalParam6", 40)
	bindlib.Validate((*DebuggerGeneralEventDetail)(nil), 176, 8, "CommandsEventList", 0, "CreationTime", 16, "CoreId", 24, "ProcessId", 28, "IsEnabled", 32, "EnableShortCircuiting", 33, "EventStage", 36, "HasCustomOutput", 40, "OutputSourceTags", 48, "CountOfActions", 88, "Tag", 96, "EventType", 104, "Options", 112, "CommandStringBuffer", 160, "ConditionBufferSize", 168)
	bindlib.Validate((*DebuggerGeneralAction)(nil), 32, 8, "EventTag", 0, "ActionType", 8, "ImmediateMessagePassing", 12, "PreAllocatedBuffer", 16, "CustomCodeBufferSize", 20, "ScriptBufferSize", 24, "ScriptBufferPointer", 28)
	bindlib.Validate((*DebuggerEventAndActionResult)(nil), 8, 4, "IsSuccessful", 0, "Error", 4)
	bindlib.Validate((*HwdbgPortInformationItems)(nil), 4, 4, "PortSize", 0)
	bindlib.Validate((*HwdbgInstanceInformation)(nil), 64, 4, "Version", 0, "maximumNumberOfStages", 4, "scriptVariableLength", 8, "numberOfSupportedLocalAndGlobalVariables", 12, "numberOfSupportedTemporaryVariables", 16, "maximumNumberOfSupportedGetScriptOperators", 20, "maximumNumberOfSupportedSetScriptOperators", 24, "sharedMemorySize", 28, "debuggerAreaOffset", 32, "debuggeeAreaOffset", 36, "numberOfPins", 40, "numberOfPorts", 44, "scriptCapabilities", 48, "bramAddrWidth", 56, "bramDataWidth", 60)
	bindlib.Validate((*_HwdbgScriptCapabilities)(nil), 8, 4, "AssignLocalGlobalVar", 0, "AssignRegisters", 0, "AssignPseudoRegisters", 0, "ConditionalStatementsAndComparisonOperators", 0, "FuncOr", 0, "FuncXor", 0, "FuncAnd", 0, "FuncAsr", 0, "FuncAsl", 1, "FuncAdd", 1, "FuncSub", 1, "FuncMul", 1, "FuncDiv", 1, "FuncMod", 1, "FuncGt", 1, "FuncLt", 1, "FuncEgt", 2, "FuncElt", 2, "FuncEqual", 2, "FuncNeq", 2, "FuncJmp", 2, "FuncJz", 2, "FuncJnz", 2, "FuncMov", 2, "FuncPrintf", 3)
	bindlib.Validate((*HwdbgScriptBuffer)(nil), 4, 4, "scriptNumberOfSymbols", 0)
	bindlib.Validate((*DebuggerReadPageTableEntriesDetails)(nil), 88, 8, "VirtualAddress", 0, "ProcessId", 8, "Pml4eVirtualAddress", 16, "Pml4eValue", 24, "PdpteVirtualAddress", 32, "PdpteValue", 40, "PdeVirtualAddress", 48, "PdeValue", 56, "PteVirtualAddress", 64, "PteValue", 72, "KernelStatus", 80)
	bindlib.Validate((*DebuggerVa2paAndPa2vaCommands)(nil), 32, 8, "VirtualAddress", 0, "PhysicalAddress", 8, "ProcessId", 16, "IsVirtual2Physical", 20, "KernelStatus", 24)
	bindlib.Validate((*DebuggerPageInRequest)(nil), 32, 8, "VirtualAddressFrom", 0, "VirtualAddressTo", 8, "ProcessId", 16, "PageFaultErrorCode", 20, "KernelStatus", 24)
	bindlib.Validate((*ReversingMachineReconstructMemoryRequest)(nil), 20, 4, "ProcessId", 0, "Size", 4, "Mode", 8, "Type", 12, "KernelStatus", 16)
	bindlib.Validate((*DebuggerDtCommandOptions)(nil), 56, 8, "TypeName", 0, "SizeOfTypeName", 8, "Address", 16, "IsStruct", 24, "BufferAddress", 32, "TargetPid", 40, "AdditionalParameters", 48)
	bindlib.Validate((*DebuggerPreallocCommand)(nil), 12, 4, "Type", 0, "Count", 4, "KernelStatus", 8)
	bindlib.Validate((*DebuggerPreactivateCommand)(nil), 8, 4, "Type", 0, "KernelStatus", 4)
	bindlib.Validate((*DebuggerReadMemory)(nil), 48, 8, "Pid", 0, "Address", 8, "Size", 16, "GetAddressMode", 20, "AddressMode", 24, "MemoryType", 28, "ReadingType", 32, "ReturnLength", 36, "KernelStatus", 40)
	bindlib.Validate((*DebuggerFlushLoggingBuffers)(nil), 12, 4, "KernelStatus", 0, "CountOfMessagesThatSetAsReadFromVmxRoot", 4, "CountOfMessagesThatSetAsReadFromVmxNonRoot", 8)
	bindlib.Validate((*DebuggerDebuggerTestQueryBuffer)(nil), 24, 8, "RequestType", 0, "Context", 8, "KernelStatus", 16)
	bindlib.Validate((*DebuggerPerformKernelTests)(nil), 4, 4, "KernelStatus", 0)
	bindlib.Validate((*DebuggerSendCommandExecutionFinishedSignal)(nil), 4, 4, "KernelStatus", 0)
	bindlib.Validate((*DebuggeeSendGeneralPacketFromDebuggeeToDebugger)(nil), 16, 4, "RequestedAction", 0, "LengthOfBuffer", 4, "PauseDebuggeeWhenSent", 8, "KernelResult", 12)
	bindlib.Validate((*DebuggerSendUsermodeMessagesToDebugger)(nil), 8, 4, "KernelStatus", 0, "Length", 4)
	bindlib.Validate((*DebuggerReadAndWriteOnMsr)(nil), 24, 8, "Msr", 0, "CoreNumber", 8, "ActionType", 12, "Value", 16)
	bindlib.Validate((*DebuggerEditMemory)(nil), 40, 8, "Result", 0, "Address", 8, "ProcessId", 16, "MemoryType", 20, "ByteSize", 24, "CountOf64Chunks", 28, "FinalStructureSize", 32)
	bindlib.Validate((*DebuggerSearchMemory)(nil), 40, 8, "Address", 0, "Length", 8, "ProcessId", 16, "MemoryType", 20, "ByteSize", 24, "CountOf64Chunks", 28, "FinalStructureSize", 32)
	bindlib.Validate((*DebuggerHideAndTransparentDebuggerMode)(nil), 80, 8, "IsHide", 0, "CpuidAverage", 8, "CpuidStandardDeviation", 16, "CpuidMedian", 24, "RdtscAverage", 32, "RdtscStandardDeviation", 40, "RdtscMedian", 48, "TrueIfProcessIdAndFalseIfProcessName", 56, "ProcId", 60, "LengthOfProcessName", 64, "KernelStatus", 72)
	bindlib.Validate((*DebuggerPrepareDebuggee)(nil), 280, 8, "PortAddress", 0, "Baudrate", 4, "KernelBaseAddress", 8, "Result", 16, "OsName", 20)
	bindlib.Validate((*DebuggeeChangeCorePacket)(nil), 8, 4, "NewCore", 0, "Result", 4)
	bindlib.Validate((*DebuggerAttachDetachUserModeProcess)(nil), 40, 8, "IsStartingNewProcess", 0, "ProcessId", 4, "ThreadId", 8, "CheckCallbackAtFirstInstruction", 12, "Is32Bit", 13, "IsPaused", 14, "Action", 16, "CountOfActiveDebuggingThreadsAndProcesses", 20, "Token", 24, "Result", 32)
	bindlib.Validate((*DebuggeeProcessListNeededDetails)(nil), 24, 8, "PsActiveProcessHead", 0, "ImageFileNameOffset", 8, "UniquePidOffset", 12, "ActiveProcessLinksOffset", 16)
	bindlib.Validate((*DebuggeeThreadListNeededDetails)(nil), 40, 8, "ThreadListHeadOffset", 0, "ThreadListEntryOffset", 4, "CidOffset", 8, "PsActiveProcessHead", 16, "ActiveProcessLinksOffset", 24, "Process", 32)
	bindlib.Validate((*DebuggeeProcessListDetailsEntry)(nil), 40, 8, "Eprocess", 0, "ProcessId", 8, "Cr3", 16, "ImageFileName", 24)
	bindlib.Validate((*DebuggeeThreadListDetailsEntry)(nil), 40, 8, "Eprocess", 0, "Ethread", 8, "ProcessId", 16, "ThreadId", 20, "ImageFileName", 24)
	bindlib.Validate((*DebuggerQueryActiveProcessesOrThreads)(nil), 88, 8, "ProcessListNeededDetails", 0, "ThreadListNeededDetails", 24, "QueryType", 64, "QueryAction", 68, "Count", 72, "Result", 80)
	bindlib.Validate((*DebuggerSingleCallstackFrame)(nil), 24, 8, "IsStackAddressValid", 0, "IsValidAddress", 1, "IsExecutable", 2, "Value", 8, "InstructionBytesOnRip", 16)
	bindlib.Validate((*DebuggerCallstackRequest)(nil), 40, 8, "Is32Bit", 0, "KernelStatus", 4, "DisplayMethod", 8, "Size", 12, "FrameCount", 16, "BaseAddress", 24, "BufferSize", 32)
	bindlib.Validate((*UsermodeDebuggingThreadOrProcessStateDetails)(nil), 12, 4, "ProcessId", 0, "ThreadId", 4, "IsProcess", 8)
	bindlib.Validate((*DebuggerEventActionRunScriptConfiguration)(nil), 24, 8, "ScriptBuffer", 0, "ScriptLength", 8, "ScriptPointer", 12, "OptionalRequestedBufferSize", 16)
	bindlib.Validate((*DebuggerEventRequestBuffer)(nil), 16, 8, "EnabledRequestBuffer", 0, "RequestBufferSize", 4, "RequstBufferAddress", 8)
	bindlib.Validate((*DebuggerEventRequestCustomCode)(nil), 24, 8, "CustomCodeBufferSize", 0, "CustomCodeBufferAddress", 8, "OptionalRequestedBufferSize", 16)
	bindlib.Validate((*DebuggerUdCommandAction)(nil), 40, 8, "ActionType", 0, "OptionalParam1", 8, "OptionalParam2", 16, "OptionalParam3", 24, "OptionalParam4", 32)
	bindlib.Validate((*DebuggerUdCommandPacket)(nil), 64, 8, "UdAction", 0, "ProcessDebuggingDetailToken", 40, "TargetThreadId", 48, "ApplyToAllPausedThreads", 52, "Result", 56)
	bindlib.Validate((*DebuggeeDetailsAndSwitchProcessPacket)(nil), 72, 8, "ActionType", 0, "ProcessId", 4, "Process", 8, "IsSwitchByClkIntr", 16, "ProcessName", 17, "ProcessListSymDetails", 40, "Result", 64)
	bindlib.Validate((*DebuggeeDetailsAndSwitchThreadPacket)(nil), 104, 8, "ActionType", 0, "ThreadId", 4, "ProcessId", 8, "Thread", 16, "Process", 24, "CheckByClockInterrupt", 32, "ProcessName", 33, "ThreadListSymDetails", 56, "Result", 96)
	bindlib.Validate((*DebuggeeStepPacket)(nil), 12, 4, "StepType", 0, "IsCurrentInstructionACall", 4, "CallLength", 8)
	bindlib.Validate((*DebuggeeFormatsPacket)(nil), 16, 8, "Value", 0, "Result", 8)
	bindlib.Validate((*DebuggeeSymbolRequestPacket)(nil), 4, 4, "ProcessId", 0)
	bindlib.Validate((*DebuggeeBpPacket)(nil), 32, 8, "Address", 0, "Pid", 8, "Tid", 12, "Core", 16, "RemoveAfterHit", 20, "CheckForCallbacks", 21, "Result", 24)
	bindlib.Validate((*DebuggeeBpListOrModifyPacket)(nil), 16, 8, "BreakpointId", 0, "Request", 8, "Result", 12)
	bindlib.Validate((*DebuggeeScriptPacket)(nil), 16, 4, "ScriptBufferSize", 0, "ScriptBufferPointer", 4, "IsFormat", 8, "Result", 12)
	bindlib.Validate((*DebuggeeResultOfSearchPacket)(nil), 8, 4, "CountOfResults", 0, "Result", 4)
	bindlib.Validate((*DebuggeeRegisterReadDescription)(nil), 24, 8, "RegisterId", 0, "Value", 8, "KernelStatus", 16)
	bindlib.Validate((*DebuggeeRegisterWriteDescription)(nil), 24, 8, "RegisterId", 0, "Value", 8, "KernelStatus", 16)
	bindlib.Validate((*Symbol)(nil), 32, 8, "Type", 0, "Len", 8, "VariableType", 16, "Value", 24)
	bindlib.Validate((*HwdbgShortSymbol)(nil), 16, 8, "Type", 0, "Value", 8)
	bindlib.Validate((*SymbolBuffer)(nil), 24, 8, "Head", 0, "Pointer", 8, "Size", 12, "Message", 16)
	bindlib.Validate((*SymbolMap)(nil), 16, 8, "Name", 0, "Type", 8)
	bindlib.Validate((*ActionBuffer)(nil), 40, 8, "Tag", 0, "CurrentAction", 8, "ImmediatelySendTheResults", 16, "Context", 24, "CallingStage", 32)
	bindlib.Validate((*UserDefinedFunctionNode)(nil), 56, 8, "Name", 0, "Address", 8, "VariableType", 16, "ParameterBuffer", 24, "ParameterNumber", 32, "StackTempNumber", 40, "NextNode", 48)
	bindlib.Validate((*ModuleSymbolDetail)(nil), 600, 8, "IsSymbolDetailsFound", 0, "IsLocalSymbolPath", 1, "IsSymbolPDBAvaliable", 2, "IsUserMode", 3, "Is32Bit", 4, "BaseAddress", 8, "FilePath", 16, "ModuleSymbolPath", 276, "ModuleSymbolGuidAndAge", 536)
	bindlib.Validate((*UsermodeLoadedModuleSymbols)(nil), 1056, 8, "BaseAddress", 0, "Entrypoint", 8, "FilePath", 16)
	bindlib.Validate((*UsermodeLoadedModuleDetails)(nil), 16, 4, "ProcessId", 0, "OnlyCountModules", 4, "Is32Bit", 5, "ModulesCount", 8, "Result", 12)
	bindlib.Validate((*DebuggerUpdateSymbolTable)(nil), 608, 8, "TotalSymbols", 0, "CurrentSymbolIndex", 4, "SymbolDetailPacket", 8)
	bindlib.Validate((*DebuggeeSymbolUpdateResult)(nil), 8, 8, "KernelStatus", 0)
}

func DetectVmxSupport() Boolean {
	__res := bindlib.CCall0(__imp_hyperdbg_u_detect_vmx_support.Addr())
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_read_vendor_string bindlib.PreloadProc

func ReadVendorString(b *Char) {
	bindlib.CCall1(__imp_hyperdbg_u_read_vendor_string.Addr(), bindlib.MarshallSyscall(b))
}

var __imp_hyperdbg_u_load_vmm bindlib.PreloadProc

func LoadVmm() Int {
	__res := bindlib.CCall0(__imp_hyperdbg_u_load_vmm.Addr())
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_unload_vmm bindlib.PreloadProc

func UnloadVmm() Int {
	__res := bindlib.CCall0(__imp_hyperdbg_u_unload_vmm.Addr())
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_install_vmm_driver bindlib.PreloadProc

func InstallVmmDriver() Int {
	__res := bindlib.CCall0(__imp_hyperdbg_u_install_vmm_driver.Addr())
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_uninstall_vmm_driver bindlib.PreloadProc

func UninstallVmmDriver() Int {
	__res := bindlib.CCall0(__imp_hyperdbg_u_uninstall_vmm_driver.Addr())
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_stop_vmm_driver bindlib.PreloadProc

func StopVmmDriver() Int {
	__res := bindlib.CCall0(__imp_hyperdbg_u_stop_vmm_driver.Addr())
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_interpreter bindlib.PreloadProc

func Interpreter(command *Char) Int {
	__res := bindlib.CCall1(__imp_hyperdbg_u_interpreter.Addr(), bindlib.MarshallSyscall(command))
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_show_signature bindlib.PreloadProc

func ShowSignature() { bindlib.CCall0(__imp_hyperdbg_u_show_signature.Addr()) }

var __imp_hyperdbg_u_set_text_message_callback bindlib.PreloadProc

func SetTextMessageCallback(handler unsafe.Pointer) {
	bindlib.CCall1(__imp_hyperdbg_u_set_text_message_callback.Addr(), bindlib.MarshallSyscall(handler))
}

var __imp_hyperdbg_u_set_text_message_callback_using_shared_buffer bindlib.PreloadProc

func SetTextMessageCallbackUsingSharedBuffer(handler unsafe.Pointer) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_hyperdbg_u_set_text_message_callback_using_shared_buffer.Addr(), bindlib.MarshallSyscall(handler))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_hyperdbg_u_unset_text_message_callback bindlib.PreloadProc

func UnsetTextMessageCallback() { bindlib.CCall0(__imp_hyperdbg_u_unset_text_message_callback.Addr()) }

var __imp_hyperdbg_u_script_read_file_and_execute_commandline bindlib.PreloadProc

func ScriptReadFileAndExecuteCommandline(argc Int, argv **Char) Int {
	__res := bindlib.CCall2(__imp_hyperdbg_u_script_read_file_and_execute_commandline.Addr(), bindlib.MarshallSyscall(argc), bindlib.MarshallSyscall(argv))
	return bindlib.UnmarshallSyscall[Int](__res)
}

var __imp_hyperdbg_u_continue_previous_command bindlib.PreloadProc

func ContinuePreviousCommand() Boolean {
	__res := bindlib.CCall0(__imp_hyperdbg_u_continue_previous_command.Addr())
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_check_multiline_command bindlib.PreloadProc

func CheckMultilineCommand(current_command *Char, reset Boolean) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_check_multiline_command.Addr(), bindlib.MarshallSyscall(current_command), bindlib.MarshallSyscall(reset))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_set_custom_driver_path bindlib.PreloadProc

func SetCustomDriverPath(driver_file_path *Char, driver_name *Char) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_set_custom_driver_path.Addr(), bindlib.MarshallSyscall(driver_file_path), bindlib.MarshallSyscall(driver_name))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_use_default_driver_path bindlib.PreloadProc

func UseDefaultDriverPath() { bindlib.CCall0(__imp_hyperdbg_u_use_default_driver_path.Addr()) }

var __imp_hyperdbg_u_connect_local_debugger bindlib.PreloadProc

func ConnectLocalDebugger() { bindlib.CCall0(__imp_hyperdbg_u_connect_local_debugger.Addr()) }

var __imp_hyperdbg_u_connect_remote_debugger bindlib.PreloadProc

func ConnectRemoteDebugger(ip *Char, port *Char) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_connect_remote_debugger.Addr(), bindlib.MarshallSyscall(ip), bindlib.MarshallSyscall(port))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_connect_remote_debugger_using_com_port bindlib.PreloadProc

func ConnectRemoteDebuggerUsingComPort(port_name *Char, baudrate Dword, pause_after_connection Boolean) Boolean {
	__res := bindlib.CCall3(__imp_hyperdbg_u_connect_remote_debugger_using_com_port.Addr(), bindlib.MarshallSyscall(port_name), bindlib.MarshallSyscall(baudrate), bindlib.MarshallSyscall(pause_after_connection))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_connect_remote_debugger_using_named_pipe bindlib.PreloadProc

func ConnectRemoteDebuggerUsingNamedPipe(named_pipe *Char, pause_after_connection Boolean) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_connect_remote_debugger_using_named_pipe.Addr(), bindlib.MarshallSyscall(named_pipe), bindlib.MarshallSyscall(pause_after_connection))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_connect_current_debugger_using_com_port bindlib.PreloadProc

func ConnectCurrentDebuggerUsingComPort(port_name *Char, baudrate Dword) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_connect_current_debugger_using_com_port.Addr(), bindlib.MarshallSyscall(port_name), bindlib.MarshallSyscall(baudrate))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_get_kernel_base bindlib.PreloadProc

func GetKernelBase() Uint64 {
	__res := bindlib.CCall0(__imp_hyperdbg_u_get_kernel_base.Addr())
	return bindlib.UnmarshallSyscall[Uint64](__res)
}

var __imp_hyperdbg_u_read_memory bindlib.PreloadProc

func ReadMemory(target_address Uint64, memory_type DebuggerReadMemoryType, reading_Type DebuggerReadReadingType, pid Uint32, size Uint32, get_address_mode Boolean, address_mode *DebuggerReadMemoryAddressMode, target_buffer_to_store *Byte, return_length *Uint32) Boolean {
	__res := bindlib.CCall9(__imp_hyperdbg_u_read_memory.Addr(), bindlib.MarshallSyscall(target_address), bindlib.MarshallSyscall(memory_type), bindlib.MarshallSyscall(reading_Type), bindlib.MarshallSyscall(pid), bindlib.MarshallSyscall(size), bindlib.MarshallSyscall(get_address_mode), bindlib.MarshallSyscall(address_mode), bindlib.MarshallSyscall(target_buffer_to_store), bindlib.MarshallSyscall(return_length))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_show_memory_or_disassemble bindlib.PreloadProc

func ShowMemoryOrDisassemble(style DebuggerShowMemoryStyle, address Uint64, memory_type DebuggerReadMemoryType, reading_type DebuggerReadReadingType, pid Uint32, size Uint32, dt_details PdebuggerDtCommandOptions) {
	bindlib.CCall7(__imp_hyperdbg_u_show_memory_or_disassemble.Addr(), bindlib.MarshallSyscall(style), bindlib.MarshallSyscall(address), bindlib.MarshallSyscall(memory_type), bindlib.MarshallSyscall(reading_type), bindlib.MarshallSyscall(pid), bindlib.MarshallSyscall(size), bindlib.MarshallSyscall(dt_details))
}

var __imp_hyperdbg_u_write_memory bindlib.PreloadProc

func WriteMemory(destination_address unsafe.Pointer, memory_type DebuggerEditMemoryType, process_id Uint32, source_address unsafe.Pointer, number_of_bytes Uint32) Boolean {
	__res := bindlib.CCall5(__imp_hyperdbg_u_write_memory.Addr(), bindlib.MarshallSyscall(destination_address), bindlib.MarshallSyscall(memory_type), bindlib.MarshallSyscall(process_id), bindlib.MarshallSyscall(source_address), bindlib.MarshallSyscall(number_of_bytes))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_read_all_registers bindlib.PreloadProc

func ReadAllRegisters(guest_registers unsafe.Pointer, extra_registers unsafe.Pointer) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_read_all_registers.Addr(), bindlib.MarshallSyscall(guest_registers), bindlib.MarshallSyscall(extra_registers))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_read_target_register bindlib.PreloadProc

func ReadTargetRegister(register_id RegsEnum, target_register *Uint64) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_read_target_register.Addr(), bindlib.MarshallSyscall(register_id), bindlib.MarshallSyscall(target_register))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_write_target_register bindlib.PreloadProc

func WriteTargetRegister(register_id RegsEnum, value Uint64) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_write_target_register.Addr(), bindlib.MarshallSyscall(register_id), bindlib.MarshallSyscall(value))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_show_all_registers bindlib.PreloadProc

func ShowAllRegisters() Boolean {
	__res := bindlib.CCall0(__imp_hyperdbg_u_show_all_registers.Addr())
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_show_target_register bindlib.PreloadProc

func ShowTargetRegister(register_id RegsEnum) Boolean {
	__res := bindlib.CCall1(__imp_hyperdbg_u_show_target_register.Addr(), bindlib.MarshallSyscall(register_id))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_continue_debuggee bindlib.PreloadProc

func ContinueDebuggee() { bindlib.CCall0(__imp_hyperdbg_u_continue_debuggee.Addr()) }

var __imp_hyperdbg_u_pause_debuggee bindlib.PreloadProc

func PauseDebuggee() { bindlib.CCall0(__imp_hyperdbg_u_pause_debuggee.Addr()) }

var __imp_hyperdbg_u_set_breakpoint bindlib.PreloadProc

func SetBreakpoint(address Uint64, pid Uint32, tid Uint32, core_numer Uint32) {
	bindlib.CCall4(__imp_hyperdbg_u_set_breakpoint.Addr(), bindlib.MarshallSyscall(address), bindlib.MarshallSyscall(pid), bindlib.MarshallSyscall(tid), bindlib.MarshallSyscall(core_numer))
}

var __imp_hyperdbg_u_start_process bindlib.PreloadProc

func StartProcess(path *Wchar) Boolean {
	__res := bindlib.CCall1(__imp_hyperdbg_u_start_process.Addr(), bindlib.MarshallSyscall(path))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_start_process_with_args bindlib.PreloadProc

func StartProcessWithArgs(path *Wchar, arguments *Wchar) Boolean {
	__res := bindlib.CCall2(__imp_hyperdbg_u_start_process_with_args.Addr(), bindlib.MarshallSyscall(path), bindlib.MarshallSyscall(arguments))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_assemble_get_length bindlib.PreloadProc

func AssembleGetLength(assembly_code *Char, start_address Uint64, length *Uint32) Boolean {
	__res := bindlib.CCall3(__imp_hyperdbg_u_assemble_get_length.Addr(), bindlib.MarshallSyscall(assembly_code), bindlib.MarshallSyscall(start_address), bindlib.MarshallSyscall(length))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_hyperdbg_u_assemble bindlib.PreloadProc

func Assemble(assembly_code *Char, start_address Uint64, buffer_to_store_assembled_data unsafe.Pointer, buffer_size Uint32) Boolean {
	__res := bindlib.CCall4(__imp_hyperdbg_u_assemble.Addr(), bindlib.MarshallSyscall(assembly_code), bindlib.MarshallSyscall(start_address), bindlib.MarshallSyscall(buffer_to_store_assembled_data), bindlib.MarshallSyscall(buffer_size))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineParse bindlib.PreloadProc

func ScriptEngineParse(str *byte) unsafe.Pointer {
	__res := bindlib.CCall1(__imp_ScriptEngineParse.Addr(), bindlib.MarshallSyscall(str))
	return bindlib.UnmarshallSyscall[unsafe.Pointer](__res)
}

var __imp_PrintSymbolBuffer bindlib.PreloadProc

func PrintSymbolBuffer(SymbolBuffer unsafe.Pointer) {
	bindlib.CCall1(__imp_PrintSymbolBuffer.Addr(), bindlib.MarshallSyscall(SymbolBuffer))
}

var __imp_PrintSymbol bindlib.PreloadProc

func PrintSymbol(Symbol unsafe.Pointer) {
	bindlib.CCall1(__imp_PrintSymbol.Addr(), bindlib.MarshallSyscall(Symbol))
}

var __imp_RemoveSymbolBuffer bindlib.PreloadProc

func RemoveSymbolBuffer(SymbolBuffer unsafe.Pointer) {
	bindlib.CCall1(__imp_RemoveSymbolBuffer.Addr(), bindlib.MarshallSyscall(SymbolBuffer))
}

var __imp_FuncGetNumberOfOperands bindlib.PreloadProc

func FuncGetNumberOfOperands(FuncType Uint64, NumberOfGetOperands *Uint32, NumberOfSetOperands *Uint32) Boolean {
	__res := bindlib.CCall3(__imp_FuncGetNumberOfOperands.Addr(), bindlib.MarshallSyscall(FuncType), bindlib.MarshallSyscall(NumberOfGetOperands), bindlib.MarshallSyscall(NumberOfSetOperands))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineSetHwdbgInstanceInfo bindlib.PreloadProc

func ScriptEngineSetHwdbgInstanceInfo(InstancInfo *HwdbgInstanceInformation) Boolean {
	__res := bindlib.CCall1(__imp_ScriptEngineSetHwdbgInstanceInfo.Addr(), bindlib.MarshallSyscall(InstancInfo))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineSetTextMessageCallback bindlib.PreloadProc

func ScriptEngineSetTextMessageCallback(Handler unsafe.Pointer) {
	bindlib.CCall1(__imp_ScriptEngineSetTextMessageCallback.Addr(), bindlib.MarshallSyscall(Handler))
}

var __imp_ScriptEngineSymbolAbortLoading bindlib.PreloadProc

func ScriptEngineSymbolAbortLoading() { bindlib.CCall0(__imp_ScriptEngineSymbolAbortLoading.Addr()) }

var __imp_ScriptEngineConvertNameToAddress bindlib.PreloadProc

func ScriptEngineConvertNameToAddress(FunctionOrVariableName *byte, WasFound Pboolean) Uint64 {
	__res := bindlib.CCall2(__imp_ScriptEngineConvertNameToAddress.Addr(), bindlib.MarshallSyscall(FunctionOrVariableName), bindlib.MarshallSyscall(WasFound))
	return bindlib.UnmarshallSyscall[Uint64](__res)
}

var __imp_ScriptEngineLoadFileSymbol bindlib.PreloadProc

func ScriptEngineLoadFileSymbol(BaseAddress Uint64, PdbFileName *byte, CustomModuleName *byte) Uint32 {
	__res := bindlib.CCall3(__imp_ScriptEngineLoadFileSymbol.Addr(), bindlib.MarshallSyscall(BaseAddress), bindlib.MarshallSyscall(PdbFileName), bindlib.MarshallSyscall(CustomModuleName))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_ScriptEngineUnloadAllSymbols bindlib.PreloadProc

func ScriptEngineUnloadAllSymbols() Uint32 {
	__res := bindlib.CCall0(__imp_ScriptEngineUnloadAllSymbols.Addr())
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_ScriptEngineUnloadModuleSymbol bindlib.PreloadProc

func ScriptEngineUnloadModuleSymbol(ModuleName *byte) Uint32 {
	__res := bindlib.CCall1(__imp_ScriptEngineUnloadModuleSymbol.Addr(), bindlib.MarshallSyscall(ModuleName))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_ScriptEngineSearchSymbolForMask bindlib.PreloadProc

func ScriptEngineSearchSymbolForMask(SearchMask *byte) Uint32 {
	__res := bindlib.CCall1(__imp_ScriptEngineSearchSymbolForMask.Addr(), bindlib.MarshallSyscall(SearchMask))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_ScriptEngineGetFieldOffset bindlib.PreloadProc

func ScriptEngineGetFieldOffset(TypeName *Char, FieldName *Char, FieldOffset *Uint32) Boolean {
	__res := bindlib.CCall3(__imp_ScriptEngineGetFieldOffset.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(FieldName), bindlib.MarshallSyscall(FieldOffset))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineGetDataTypeSize bindlib.PreloadProc

func ScriptEngineGetDataTypeSize(TypeName *Char, TypeSize *Uint64) Boolean {
	__res := bindlib.CCall2(__imp_ScriptEngineGetDataTypeSize.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(TypeSize))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineCreateSymbolTableForDisassembler bindlib.PreloadProc

func ScriptEngineCreateSymbolTableForDisassembler(CallbackFunction unsafe.Pointer) Boolean {
	__res := bindlib.CCall1(__imp_ScriptEngineCreateSymbolTableForDisassembler.Addr(), bindlib.MarshallSyscall(CallbackFunction))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineConvertFileToPdbPath bindlib.PreloadProc

func ScriptEngineConvertFileToPdbPath(LocalFilePath *byte, ResultPath *byte) Boolean {
	__res := bindlib.CCall2(__imp_ScriptEngineConvertFileToPdbPath.Addr(), bindlib.MarshallSyscall(LocalFilePath), bindlib.MarshallSyscall(ResultPath))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails bindlib.PreloadProc

func ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails(LocalFilePath *byte, PdbFilePath *byte, GuidAndAgeDetails *byte, Is32BitModule Boolean) Boolean {
	__res := bindlib.CCall4(__imp_ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails.Addr(), bindlib.MarshallSyscall(LocalFilePath), bindlib.MarshallSyscall(PdbFilePath), bindlib.MarshallSyscall(GuidAndAgeDetails), bindlib.MarshallSyscall(Is32BitModule))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineSymbolInitLoad bindlib.PreloadProc

func ScriptEngineSymbolInitLoad(BufferToStoreDetails unsafe.Pointer, StoredLength Uint32, DownloadIfAvailable Boolean, SymbolPath *byte, IsSilentLoad Boolean) Boolean {
	__res := bindlib.CCall5(__imp_ScriptEngineSymbolInitLoad.Addr(), bindlib.MarshallSyscall(BufferToStoreDetails), bindlib.MarshallSyscall(StoredLength), bindlib.MarshallSyscall(DownloadIfAvailable), bindlib.MarshallSyscall(SymbolPath), bindlib.MarshallSyscall(IsSilentLoad))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_ScriptEngineShowDataBasedOnSymbolTypes bindlib.PreloadProc

func ScriptEngineShowDataBasedOnSymbolTypes(TypeName *byte, Address Uint64, IsStruct Boolean, BufferAddress unsafe.Pointer, AdditionalParameters *byte) Boolean {
	__res := bindlib.CCall5(__imp_ScriptEngineShowDataBasedOnSymbolTypes.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(Address), bindlib.MarshallSyscall(IsStruct), bindlib.MarshallSyscall(BufferAddress), bindlib.MarshallSyscall(AdditionalParameters))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymSetTextMessageCallback bindlib.PreloadProc

func SymSetTextMessageCallback(Handler unsafe.Pointer) {
	bindlib.CCall1(__imp_SymSetTextMessageCallback.Addr(), bindlib.MarshallSyscall(Handler))
}

var __imp_SymbolAbortLoading bindlib.PreloadProc

func SymbolAbortLoading() { bindlib.CCall0(__imp_SymbolAbortLoading.Addr()) }

var __imp_SymConvertNameToAddress bindlib.PreloadProc

func SymConvertNameToAddress(FunctionOrVariableName *byte, WasFound Pboolean) Uint64 {
	__res := bindlib.CCall2(__imp_SymConvertNameToAddress.Addr(), bindlib.MarshallSyscall(FunctionOrVariableName), bindlib.MarshallSyscall(WasFound))
	return bindlib.UnmarshallSyscall[Uint64](__res)
}

var __imp_SymLoadFileSymbol bindlib.PreloadProc

func SymLoadFileSymbol(BaseAddress Uint64, PdbFileName *byte, CustomModuleName *byte) Uint32 {
	__res := bindlib.CCall3(__imp_SymLoadFileSymbol.Addr(), bindlib.MarshallSyscall(BaseAddress), bindlib.MarshallSyscall(PdbFileName), bindlib.MarshallSyscall(CustomModuleName))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_SymUnloadAllSymbols bindlib.PreloadProc

func SymUnloadAllSymbols() Uint32 {
	__res := bindlib.CCall0(__imp_SymUnloadAllSymbols.Addr())
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_SymUnloadModuleSymbol bindlib.PreloadProc

func SymUnloadModuleSymbol(ModuleName *byte) Uint32 {
	__res := bindlib.CCall1(__imp_SymUnloadModuleSymbol.Addr(), bindlib.MarshallSyscall(ModuleName))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_SymSearchSymbolForMask bindlib.PreloadProc

func SymSearchSymbolForMask(SearchMask *byte) Uint32 {
	__res := bindlib.CCall1(__imp_SymSearchSymbolForMask.Addr(), bindlib.MarshallSyscall(SearchMask))
	return bindlib.UnmarshallSyscall[Uint32](__res)
}

var __imp_SymGetFieldOffset bindlib.PreloadProc

func SymGetFieldOffset(TypeName *Char, FieldName *Char, FieldOffset *Uint32) Boolean {
	__res := bindlib.CCall3(__imp_SymGetFieldOffset.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(FieldName), bindlib.MarshallSyscall(FieldOffset))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymGetDataTypeSize bindlib.PreloadProc

func SymGetDataTypeSize(TypeName *Char, TypeSize *Uint64) Boolean {
	__res := bindlib.CCall2(__imp_SymGetDataTypeSize.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(TypeSize))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymCreateSymbolTableForDisassembler bindlib.PreloadProc

func SymCreateSymbolTableForDisassembler(CallbackFunction unsafe.Pointer) Boolean {
	__res := bindlib.CCall1(__imp_SymCreateSymbolTableForDisassembler.Addr(), bindlib.MarshallSyscall(CallbackFunction))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymConvertFileToPdbPath bindlib.PreloadProc

func SymConvertFileToPdbPath(LocalFilePath *byte, ResultPath *byte) Boolean {
	__res := bindlib.CCall2(__imp_SymConvertFileToPdbPath.Addr(), bindlib.MarshallSyscall(LocalFilePath), bindlib.MarshallSyscall(ResultPath))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymConvertFileToPdbFileAndGuidAndAgeDetails bindlib.PreloadProc

func SymConvertFileToPdbFileAndGuidAndAgeDetails(LocalFilePath *byte, PdbFilePath *byte, GuidAndAgeDetails *byte, Is32BitModule Boolean) Boolean {
	__res := bindlib.CCall4(__imp_SymConvertFileToPdbFileAndGuidAndAgeDetails.Addr(), bindlib.MarshallSyscall(LocalFilePath), bindlib.MarshallSyscall(PdbFilePath), bindlib.MarshallSyscall(GuidAndAgeDetails), bindlib.MarshallSyscall(Is32BitModule))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymbolInitLoad bindlib.PreloadProc

func SymbolInitLoad(BufferToStoreDetails unsafe.Pointer, StoredLength Uint32, DownloadIfAvailable Boolean, SymbolPath *byte, IsSilentLoad Boolean) Boolean {
	__res := bindlib.CCall5(__imp_SymbolInitLoad.Addr(), bindlib.MarshallSyscall(BufferToStoreDetails), bindlib.MarshallSyscall(StoredLength), bindlib.MarshallSyscall(DownloadIfAvailable), bindlib.MarshallSyscall(SymbolPath), bindlib.MarshallSyscall(IsSilentLoad))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymShowDataBasedOnSymbolTypes bindlib.PreloadProc

func SymShowDataBasedOnSymbolTypes(TypeName *byte, Address Uint64, IsStruct Boolean, BufferAddress unsafe.Pointer, AdditionalParameters *byte) Boolean {
	__res := bindlib.CCall5(__imp_SymShowDataBasedOnSymbolTypes.Addr(), bindlib.MarshallSyscall(TypeName), bindlib.MarshallSyscall(Address), bindlib.MarshallSyscall(IsStruct), bindlib.MarshallSyscall(BufferAddress), bindlib.MarshallSyscall(AdditionalParameters))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymQuerySizeof bindlib.PreloadProc

func SymQuerySizeof(StructNameOrTypeName *byte, SizeOfField *Uint32) Boolean {
	__res := bindlib.CCall2(__imp_SymQuerySizeof.Addr(), bindlib.MarshallSyscall(StructNameOrTypeName), bindlib.MarshallSyscall(SizeOfField))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

var __imp_SymCastingQueryForFiledsAndTypes bindlib.PreloadProc

func SymCastingQueryForFiledsAndTypes(StructName *byte, FiledOfStructName *byte, IsStructNamePointerOrNot Pboolean, IsFiledOfStructNamePointerOrNot Pboolean, NewStructOrTypeName **byte, OffsetOfFieldFromTop *Uint32, SizeOfField *Uint32) Boolean {
	__res := bindlib.CCall7(__imp_SymCastingQueryForFiledsAndTypes.Addr(), bindlib.MarshallSyscall(StructName), bindlib.MarshallSyscall(FiledOfStructName), bindlib.MarshallSyscall(IsStructNamePointerOrNot), bindlib.MarshallSyscall(IsFiledOfStructNamePointerOrNot), bindlib.MarshallSyscall(NewStructOrTypeName), bindlib.MarshallSyscall(OffsetOfFieldFromTop), bindlib.MarshallSyscall(SizeOfField))
	return bindlib.UnmarshallSyscall[Boolean](__res)
}

func (s Anon192_5) Flags() Uint64 {
	return bindlib.ReadBitcast[Uint64](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon192_5) SetFlags(v Uint64) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

func (s Anon192_5) Fields() Anon196_9 {
	return bindlib.ReadBitcast[Anon196_9](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon192_5) SetFields(v Anon196_9) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

func (s Anon1444_9) Fields() Anon1446_5 {
	return bindlib.ReadBitcast[Anon1446_5](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon1444_9) SetFields(v Anon1446_5) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

func (s Anon1444_9) AsUInt() Uint32 {
	return bindlib.ReadBitcast[Uint32](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon1444_9) SetAsUInt(v Uint32) {
	bindlib.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}
