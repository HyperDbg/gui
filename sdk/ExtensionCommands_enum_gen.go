package sdk

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type ExtensionCommandsKind byte

const (
	CpuidKind ExtensionCommandsKind = iota
	CrwriteKind
	DrKind
	EpthookKind
	Epthook2Kind
	ExceptionKind
	HideKind
	InterruptKind
	IoinKind
	IooutKind
	MeasureKind
	ModeKind
	MonitorKind
	MsrreadKind
	MsrwriteKind
	Pa2vaKind
	PmcKind
	PteKind
	RevKind
	SyscallSysretKind
	TraceKind
	TrackKind
	TscKind
	UnhideKind
	Va2paKind
	VmcallKind
	InvalidExtensionCommandsKind
)

func ConvertInteger2ExtensionCommandsKind[T constraints.Integer](v T) ExtensionCommandsKind {
	return ExtensionCommandsKind(v)
}

func (k ExtensionCommandsKind) AssertKind(kinds string) ExtensionCommandsKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidExtensionCommandsKind
}

func (k ExtensionCommandsKind) String() string {
	switch k {
	case CpuidKind:
		return "Cpuid"
	case CrwriteKind:
		return "Crwrite"
	case DrKind:
		return "Dr"
	case EpthookKind:
		return "Epthook"
	case Epthook2Kind:
		return "Epthook2"
	case ExceptionKind:
		return "Exception"
	case HideKind:
		return "Hide"
	case InterruptKind:
		return "Interrupt"
	case IoinKind:
		return "Ioin"
	case IooutKind:
		return "Ioout"
	case MeasureKind:
		return "Measure"
	case ModeKind:
		return "Mode"
	case MonitorKind:
		return "Monitor"
	case MsrreadKind:
		return "Msrread"
	case MsrwriteKind:
		return "Msrwrite"
	case Pa2vaKind:
		return "Pa2va"
	case PmcKind:
		return "Pmc"
	case PteKind:
		return "Pte"
	case RevKind:
		return "Rev"
	case SyscallSysretKind:
		return "SyscallSysret"
	case TraceKind:
		return "Trace"
	case TrackKind:
		return "Track"
	case TscKind:
		return "Tsc"
	case UnhideKind:
		return "Unhide"
	case Va2paKind:
		return "Va2pa"
	case VmcallKind:
		return "Vmcall"
	default:
		return "InvalidExtensionCommandsKind"
	}
}

func (k ExtensionCommandsKind) Keys() []string {
	return []string{
		"Cpuid",
		"Crwrite",
		"Dr",
		"Epthook",
		"Epthook2",
		"Exception",
		"Hide",
		"Interrupt",
		"Ioin",
		"Ioout",
		"Measure",
		"Mode",
		"Monitor",
		"Msrread",
		"Msrwrite",
		"Pa2va",
		"Pmc",
		"Pte",
		"Rev",
		"SyscallSysret",
		"Trace",
		"Track",
		"Tsc",
		"Unhide",
		"Va2pa",
		"Vmcall",
	}
}

func (k ExtensionCommandsKind) Kinds() []ExtensionCommandsKind {
	return []ExtensionCommandsKind{
		CpuidKind,
		CrwriteKind,
		DrKind,
		EpthookKind,
		Epthook2Kind,
		ExceptionKind,
		HideKind,
		InterruptKind,
		IoinKind,
		IooutKind,
		MeasureKind,
		ModeKind,
		MonitorKind,
		MsrreadKind,
		MsrwriteKind,
		Pa2vaKind,
		PmcKind,
		PteKind,
		RevKind,
		SyscallSysretKind,
		TraceKind,
		TrackKind,
		TscKind,
		UnhideKind,
		Va2paKind,
		VmcallKind,
	}
}

func (k ExtensionCommandsKind) SvgFileName() string {
	switch k {
	case CpuidKind:
		return "Cpuid"
	case CrwriteKind:
		return "Crwrite"
	case DrKind:
		return "Dr"
	case EpthookKind:
		return "Epthook"
	case Epthook2Kind:
		return "Epthook2"
	case ExceptionKind:
		return "Exception"
	case HideKind:
		return "Hide"
	case InterruptKind:
		return "Interrupt"
	case IoinKind:
		return "Ioin"
	case IooutKind:
		return "Ioout"
	case MeasureKind:
		return "Measure"
	case ModeKind:
		return "Mode"
	case MonitorKind:
		return "Monitor"
	case MsrreadKind:
		return "Msrread"
	case MsrwriteKind:
		return "Msrwrite"
	case Pa2vaKind:
		return "Pa2va"
	case PmcKind:
		return "Pmc"
	case PteKind:
		return "Pte"
	case RevKind:
		return "Rev"
	case SyscallSysretKind:
		return "SyscallSysret"
	case TraceKind:
		return "Trace"
	case TrackKind:
		return "Track"
	case TscKind:
		return "Tsc"
	case UnhideKind:
		return "Unhide"
	case Va2paKind:
		return "Va2pa"
	case VmcallKind:
		return "Vmcall"
	default:
		return "InvalidExtensionCommandsKind"
	}
}
