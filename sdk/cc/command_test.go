package cc

import (
	"encoding/json"
	"testing"

	"github.com/ddkwork/golibrary/mylog"
	"github.com/ddkwork/golibrary/stream"
)

type Command struct {
	Name        string   `json:"Name"`
	Description string   `json:"Description"`
	Syntax      []string `json:"Syntax"`
	Examples    []string `json:"Examples"`
	Notes       string   `json:"Notes"`
}

type Commands struct {
	Debugging []Command
	Extension []Command
	Hwdbg     []Command
	Meta      []Command
}

func TestUnmarshalCommandJson(t *testing.T) {
	type AutoGenerated [][]struct {
		Name        string   `json:"Name"`
		Description string   `json:"Description"`
		Syntax      []string `json:"Syntax"`
		Examples    []string `json:"Examples"`
		Notes       []any    `json:"Notes"`
		FullName    string   `json:"FullName"`
	}
	generated := AutoGenerated{}
	// mylog.Check(json.Unmarshal(stream.NewBuffer(src).Bytes(), &generated))
	mylog.Check(json.Unmarshal(stream.NewBuffer("sina.json").Bytes(), &generated)) // ok
	mylog.Struct(generated)
}

var src = `
[
    {
        "Name": "Bc",
        "Description": "bc : clears a breakpoint using breakpoint id.\n\n",
        "Syntax": ["bc [BreakpointId (hex)]"],
        "Examples": ["bc 0", "bc 2"],
        "Notes": [],
        "FullName": "Bc:ClearsBreakpointBreakpointId."
    },
    {
        "Name": "Bd",
        "Description": "bd : disables a breakpoint using breakpoint id.\n\n",
        "Syntax": ["bd [BreakpointId (hex)]"],
        "Examples": ["bd 0", "bd 2"],
        "Notes": [],
        "FullName": "Bd:DisablesBreakpointBreakpointId."
    },
    {
        "Name": "Be",
        "Description": "be : enables a breakpoint using breakpoint id.\n\n",
        "Syntax": ["be [BreakpointId (hex)]"],
        "Examples": ["be 0", "be 2"],
        "Notes": [],
        "FullName": "Be:EnablesBreakpointBreakpointId."
    },
    {
        "Name": "Bl",
        "Description": "bl : lists all the enabled and disabled breakpoints.\n\n",
        "Syntax": ["bl"],
        "Examples": [],
        "Notes": [],
        "FullName": "Bl:ListsAllEnabledAndDisabledBreakpoints."
    },
    {
        "Name": "Bp",
        "Description": "bp : puts a breakpoint (0xcc).\n",
        "Syntax": ["bp [Address (hex)] [pid ProcessId (hex)] [tid ThreadId (hex)] [core CoreId (hex)]"],
        "Examples": [
            "bp nt!ExAllocatePoolWithTag",
            "bp nt!ExAllocatePoolWithTag+5",
            "bp nt!ExAllocatePoolWithTag+@rcx+rbx",
            "bp fffff8077356f010",
            "bp fffff8077356f010 pid 0x4",
            "bp fffff8077356f010 tid 0x1000",
            "bp fffff8077356f010 pid 0x4 core 2"
        ],
        "Notes": ["'bp' is not an event, if you want to use an event version "],
        "FullName": "Bp:PutsBreakpoint(0xcc)."
    },
    {
        "Name": "Core",
        "Description": "~ : shows and changes the operating processor.\n\n",
        "Syntax": ["~", "~ [CoreNumber (hex)]"],
        "Examples": ["~ ", "~ 2 "],
        "Notes": [],
        "FullName": "~:ShowsAndChangesOperatingProcessor."
    },
    {
        "Name": "Cpu",
        "Description": "cpu : collects a report from cpu features.\n\n",
        "Syntax": ["cpu "],
        "Examples": [
            "dt nt!_EPROCESS",
            "dt nt!_EPROCESS fffff8077356f010",
            "dt nt!_EPROCESS $proc",
            "dt nt!_KPROCESS @rax+@rbx+c0",
            "!dt nt!_EPROCESS 1f0300",
            "dt nt!_MY_STRUCT 7ff00040 pid 1420",
            "dt nt!_EPROCESS $proc inline all",
            "dt nt!_EPROCESS fffff8077356f010 inline no"
        ],
        "Notes": [],
        "FullName": "Cpu:CollectsReportFromCpuFeatures."
    }
]
`
