[
    {
        "Name": "k, kd, kq",
        "Description": "Shows the callstack of the thread.",
        "Syntax": [
            "k",
            "kd",
            "kq",
            "k [base StackAddress (hex)] [l Length (hex)]",
            "kd [base StackAddress (hex)] [l Length (hex)]",
            "kq [base StackAddress (hex)] [l Length (hex)]"
        ],
        "Examples": [
            "k",
            "k l 100",
            "kd base 0x77356f010",
            "kq base fffff8077356f010",
            "kq base @rbx-10",
            "kq base fffff8077356f010 l 100"
        ],
        "Notes": ""
    },
    {
        "Name": "lm",
        "Description": "Lists user/kernel modules' base address, size, name and path.",
        "Syntax": "lm [m Name (string)] [pid ProcessId (hex)] [Filter (string)]",
        "Examples": [
            "lm",
            "lm km",
            "lm um",
            "lm m nt",
            "lm km m ntos",
            "lm um m kernel32",
            "lm um m kernel32 pid 1240"
        ],
        "Notes": ""
    },
    {
        "Name": "load",
        "Description": "Installs the drivers and load the modules.",
        "Syntax": "load [ModuleName (string)]",
        "Examples": [
            "load vmm"
        ],
        "Notes": ""
    },
    {
        "Name": "output",
        "Description": "Creates an output instance that can be used in event forwarding.",
        "Syntax": [
            "output [create Name (string)] [file|namedpipe|tcp Address (string)]",
            "output [open|close Name (string)]"
        ],
        "Examples": [
            "output create MyOutputName1 file c:\\rev\\output.txt",
            "output create MyOutputName2 tcp 192.168.1.10:8080",
            "output create MyOutputName3 namedpipe \\\\.\\Pipe\\HyperDbgOutput",
            "output create MyOutputName1 module c:\\rev\\event_forwarding.dll",
            "output open MyOutputName1",
            "output close MyOutputName1"
        ],
        "Notes": ""
    },
    {
        "Name": "p",
        "Description": "Executes a single instruction (step) and optionally displays the resulting values of all registers and flags.",
        "Syntax": [
            "p",
            "p [Count (hex)]",
            "pr",
            "pr [Count (hex)]"
        ],
        "Examples": [
            "p",
            "pr",
            "pr 1f"
        ],
        "Notes": ""
    },
    {
        "Name": "pause",
        "Description": "Pauses the kernel events.",
        "Syntax": "pause",
        "Examples": [],
        "Notes": ""
    },
    {
        "Name": "preactivate",
        "Description": "Preactivates a special functionality.",
        "Syntax": "preactivate [Type (string)]",
        "Examples": [
            "preactivate mode"
        ],
        "Notes": "Type of activations:\n- mode: used for preactivation of the '!mode' event"
    },
    {
        "Name": "prealloc",
        "Description": "Pre-allocates buffer for special purposes.",
        "Syntax": "prealloc [Type (string)] [Count (hex)]",
        "Examples": [
            "prealloc thread-interception 8",
            "prealloc monitor 10",
            "prealloc epthook 5",
            "prealloc epthook2 3",
            "prealloc regular-event 12",
            "prealloc big-safe-buffert 1"
        ],
        "Notes": "Type of allocations:\n- thread-interception: used for pre-allocations of the thread holders for the thread interception mechanism\n- monitor: used for pre-allocations of the '!monitor' EPT hooks\n- epthook: used for pre-allocations of the '!epthook' EPT hooks\n- epthook2: used for pre-allocations of the '!epthook2' EPT hooks\n- regular-event: used for pre-allocations of regular instant events\n- big-event: used for pre-allocations of big instant events\n- regular-safe-buffer: used for pre-allocations of the regular event safe buffers ($buffer) for instant events\n- big-safe-buffer: used for pre-allocations of the big event safe buffers ($buffer) for instant events"
    },
    {
        "Name": "print",
        "Description": "Evaluates expressions.",
        "Syntax": "print [Expression (string)]",
        "Examples": [
            "print dq(poi(@rcx))"
        ],
        "Notes": ""
    },
    {
        "Name": "r",
        "Description": "Reads or modifies registers.",
        "Syntax": [
            "r",
            "r [Register (string)] [= Expr (string)]"
        ],
        "Examples": [
            "r",
            "r @rax",
            "r rax",
            "r rax = 0x55",
            "r rax = @rbx + @rcx + 0n10"
        ],
        "Notes": ""
    },
    {
        "Name": "rdmsr",
        "Description": "Reads a model-specific register (MSR).",
        "Syntax": "rdmsr [Msr (hex)] [core CoreNumber (hex)]",
        "Examples": [
            "rdmsr c0000082",
            "rdmsr c0000082 core 2"
        ],
        "Notes": ""
    },
    {
        "Name": "sb, !sb, sd, !sd, sq, !sq",
        "Description": "Searches a contiguous memory for a special byte pattern.",
        "Syntax": [
            "sb [StartAddress (hex)] [l Length (hex)] [BytePattern (hex)] [pid ProcessId (hex)]",
            "sd [StartAddress (hex)] [l Length (hex)] [BytePattern (hex)] [pid ProcessId (hex)]",
            "sq [StartAddress (hex)] [l Length (hex)] [BytePattern (hex)] [pid ProcessId (hex)]"
        ],
        "Examples": [
            "sb nt!ExAllocatePoolWithTag 90 85 95 l ffff",
            "sb nt!ExAllocatePoolWithTag+5 90 85 95 l ffff",
            "sb @rcx+5 90 85 95 l ffff",
            "sb fffff8077356f010 90 85 95 l ffff",
            "sd fffff8077356f010 90423580 l ffff pid 1c0",
            "!sq 100000 9090909090909090 l ffff",
            "!sq @rdx+r12 9090909090909090 l ffff",
            "!sq 100000 9090909090909090 9090909090909090 9090909090909090 l ffffff"
        ],
        "Notes": "If you want to search in physical (address) memory then add '!' at the start of the command"
    },
    {
        "Name": "settings",
        "Description": "Queries, sets, or changes a value for a special settings option.",
        "Syntax": [
            "settings [OptionName (string)]",
            "settings [OptionName (string)] [Value (hex)]",
            "settings [OptionName (string)] [Value (string)]",
            "settings [OptionName (string)] [on|off]"
        ],
        "Examples": [
            "settings autounpause",
            "settings autounpause on",
            "settings autounpause off",
            "settings addressconversion on",
            "settings addressconversion off",
            "settings autoflush on",
            "settings autoflush off",
            "settings syntax intel",
            "settings syntax att",
            "settings syntax masm"
        ],
        "Notes": ""
    },
    {
        "Name": "sleep",
        "Description": "Sleeps the debugger; this command is used in scripts, it doesn't breaks the debugger but the debugger still shows the buffers received from kernel.",
        "Syntax": "sleep [MillisecondsTime (hex)]",
        "Examples": [],
        "Notes": ""
    },
    {
        "Name": "t",
        "Description": "Executes a single instruction (step-in) and optionally displays the resulting values of all registers and flags.",
        "Syntax": [
            "t",
            "t [Count (hex)]",
            "tr",
            "tr [Count (hex)]"
        ],
        "Examples": [
            "t",
            "tr",
            "tr 1f"
        ],
        "Notes": ""
    },
    {
        "Name": "test",
        "Description": "Tests essential features of HyperDbg in current machine.",
        "Syntax": "test [Task (string)]",
        "Examples": [
            "test",
            "test query",
            "test trap-status",
            "test pool",
            "test query",
            "test breakpoint on",
            "test breakpoint off",
            "test trap on",
            "test trap off"
        ],
        "Notes": ""
    },
    {
        "Name": "unload",
        "Description": "Unloads the kernel modules and uninstalls the drivers.",
        "Syntax": "unload [remove] [ModuleName (string)]",
        "Examples": [
            "unload vmm",
            "unload remove vmm"
        ],
        "Notes": ""
    },
    {
        "Name": "x",
        "Description": "Searches and shows symbols (wildcard) and corresponding addresses.",
        "Syntax": "x [Module!Name (wildcard string)]",
        "Examples": [
            "x nt!ExAllocatePoolWithTag",
            "x nt!ExAllocatePool*",
            "x nt!*"
        ],
        "Notes": ""
    }
]

