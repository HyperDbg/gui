

#include <windows.h>

#include <dia2.h>

#include <set>
#include <unordered_set>
#include <unordered_map>





























































































































































































































struct _SYMBOL
{



	enum SymTagEnum      Tag;





	enum DataKind        DataKind;





	BasicType            BaseType;




	DWORD                TypeId;




	DWORD                Size;




	BOOL                 IsConst;




	BOOL                 IsVolatile;




	CHAR*                Name;

	union
	{
		SYMBOL_ENUM        Enum;
		SYMBOL_TYPEDEF     Typedef;
		SYMBOL_POINTER     Pointer;
		SYMBOL_ARRAY       Array;
		SYMBOL_FUNCTION    Function;
		SYMBOL_FUNCTIONARG FunctionArg;
		SYMBOL_UDT         Udt;
	} u;
};

class SymbolModule;

using SymbolMap     = std::unordered_map<DWORD, SYMBOL*>;
using SymbolNameMap = std::unordered_map<std::string, SYMBOL*>;
using SymbolSet     = std::unordered_set<SYMBOL*>;
using FunctionSet   = std::set<std::string>;

class PDB
{
	public:



		PDB();




		PDB(
			IN const CHAR* Path
			);




		~PDB();






		BOOL
		Open(
			IN const CHAR* Path
			);




		BOOL
		IsOpened() const;




		const CHAR*
		GetPath() const;




		VOID
		Close();




		DWORD
		GetMachineType() const;




		CV_CFL_LANG
		GetLanguage() const;






		const SYMBOL*
		GetSymbolByName(
			IN const CHAR* SymbolName
			);






		const SYMBOL*
		GetSymbolByTypeId(
			IN DWORD TypeId
			);




		const SymbolMap&
		GetSymbolMap() const;




		const SymbolNameMap&
		GetSymbolNameMap() const;




		const FunctionSet&
		GetFunctionSet() const;







		static
		const CHAR*
		GetBasicTypeString(
			IN BasicType BaseType,
			IN DWORD Size,
			IN BOOL UseStdInt = FALSE
			);







		static
		const CHAR*
		GetBasicTypeString(
			IN const SYMBOL* Symbol,
			IN BOOL UseStdInt = FALSE
			);







		static
		const CHAR*
		GetUdtKindString(
			IN UdtKind Kind
			);





		static
		BOOL
		IsUnnamedSymbol(
			const SYMBOL* Symbol
			);

	private:
		SymbolModule* m_Impl;
};







