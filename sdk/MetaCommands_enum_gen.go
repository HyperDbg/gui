package sdk

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type MetaCommandsKind byte

const (
	AttachKind MetaCommandsKind = iota
	ClsKind
	ConnectKind
	DebugKind
	DetachKind
	DisconnectKind
	DumpKind
	FormatsKind
	HelpKind
	KillKind
	ListenKind
	LogcloseKind
	LogopenKind
	PageinKind
	PeKind
	ProcessKind
	RestartKind
	ScriptKind
	StartKind
	StatusKind
	SwitchKind
	SymKind
	SympathKind
	ThreadKind
	InvalidMetaCommandsKind
)

func ConvertInteger2MetaCommandsKind[T constraints.Integer](v T) MetaCommandsKind {
	return MetaCommandsKind(v)
}

func (k MetaCommandsKind) AssertKind(kinds string) MetaCommandsKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidMetaCommandsKind
}

func (k MetaCommandsKind) String() string {
	switch k {
	case AttachKind:
		return "Attach"
	case ClsKind:
		return "Cls"
	case ConnectKind:
		return "Connect"
	case DebugKind:
		return "Debug"
	case DetachKind:
		return "Detach"
	case DisconnectKind:
		return "Disconnect"
	case DumpKind:
		return "Dump"
	case FormatsKind:
		return "Formats"
	case HelpKind:
		return "Help"
	case KillKind:
		return "Kill"
	case ListenKind:
		return "Listen"
	case LogcloseKind:
		return "Logclose"
	case LogopenKind:
		return "Logopen"
	case PageinKind:
		return "Pagein"
	case PeKind:
		return "Pe"
	case ProcessKind:
		return "Process"
	case RestartKind:
		return "Restart"
	case ScriptKind:
		return "Script"
	case StartKind:
		return "Start"
	case StatusKind:
		return "Status"
	case SwitchKind:
		return "Switch"
	case SymKind:
		return "Sym"
	case SympathKind:
		return "Sympath"
	case ThreadKind:
		return "Thread"
	default:
		return "InvalidMetaCommandsKind"
	}
}

func (k MetaCommandsKind) Keys() []string {
	return []string{
		"Attach",
		"Cls",
		"Connect",
		"Debug",
		"Detach",
		"Disconnect",
		"Dump",
		"Formats",
		"Help",
		"Kill",
		"Listen",
		"Logclose",
		"Logopen",
		"Pagein",
		"Pe",
		"Process",
		"Restart",
		"Script",
		"Start",
		"Status",
		"Switch",
		"Sym",
		"Sympath",
		"Thread",
	}
}

func (k MetaCommandsKind) Kinds() []MetaCommandsKind {
	return []MetaCommandsKind{
		AttachKind,
		ClsKind,
		ConnectKind,
		DebugKind,
		DetachKind,
		DisconnectKind,
		DumpKind,
		FormatsKind,
		HelpKind,
		KillKind,
		ListenKind,
		LogcloseKind,
		LogopenKind,
		PageinKind,
		PeKind,
		ProcessKind,
		RestartKind,
		ScriptKind,
		StartKind,
		StatusKind,
		SwitchKind,
		SymKind,
		SympathKind,
		ThreadKind,
	}
}

func (k MetaCommandsKind) SvgFileName() string {
	switch k {
	case AttachKind:
		return "Attach"
	case ClsKind:
		return "Cls"
	case ConnectKind:
		return "Connect"
	case DebugKind:
		return "Debug"
	case DetachKind:
		return "Detach"
	case DisconnectKind:
		return "Disconnect"
	case DumpKind:
		return "Dump"
	case FormatsKind:
		return "Formats"
	case HelpKind:
		return "Help"
	case KillKind:
		return "Kill"
	case ListenKind:
		return "Listen"
	case LogcloseKind:
		return "Logclose"
	case LogopenKind:
		return "Logopen"
	case PageinKind:
		return "Pagein"
	case PeKind:
		return "Pe"
	case ProcessKind:
		return "Process"
	case RestartKind:
		return "Restart"
	case ScriptKind:
		return "Script"
	case StartKind:
		return "Start"
	case StatusKind:
		return "Status"
	case SwitchKind:
		return "Switch"
	case SymKind:
		return "Sym"
	case SympathKind:
		return "Sympath"
	case ThreadKind:
		return "Thread"
	default:
		return "InvalidMetaCommandsKind"
	}
}
