package user_level



type (
	ThreadHolder interface {
		ThreadHolderAllocateThreadHoldingBuffers() (ok bool)                     //col:34
		ThreadHolderGetProcessThreadDetailsByProcessIdAndThreadId() (ok bool)    //col:59
		ThreadHolderGetProcessFirstThreadDetailsByProcessId() (ok bool)          //col:84
		ThreadHolderGetProcessDebuggingDetailsByThreadId() (ok bool)             //col:110
		ThreadHolderFindOrCreateThreadDebuggingDetail() (ok bool)                //col:204
		ThreadHolderFreeHoldingStructures() (ok bool)                            //col:241
		ThreadHolderQueryDetailsOfActiveDebuggingThreadsAndProcesses() (ok bool) //col:285
	}
	threadHolder struct{}
)

func NewThreadHolder() ThreadHolder { return &threadHolder{} }

func (t *threadHolder) ThreadHolderAllocateThreadHoldingBuffers() (ok bool) { //col:34









































	return true
}


func (t *threadHolder) ThreadHolderGetProcessThreadDetailsByProcessIdAndThreadId() (ok bool) { //col:59




























	return true
}


func (t *threadHolder) ThreadHolderGetProcessFirstThreadDetailsByProcessId() (ok bool) { //col:84




























	return true
}


func (t *threadHolder) ThreadHolderGetProcessDebuggingDetailsByThreadId() (ok bool) { //col:110





























	return true
}


func (t *threadHolder) ThreadHolderFindOrCreateThreadDebuggingDetail() (ok bool) { //col:204




































































































	return true
}


func (t *threadHolder) ThreadHolderFreeHoldingStructures() (ok bool) { //col:241










































	return true
}


func (t *threadHolder) ThreadHolderQueryDetailsOfActiveDebuggingThreadsAndProcesses() (ok bool) { //col:285
















































	return true
}


