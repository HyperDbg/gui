package phnt

//binding\codespace\gui\sdk\HyperDbgDev\hyperdbg\dependencies\phnt\ntioapi.h.back

func CTL_CODE(deviceType, function, methods, access uint32) uint32 {
	return ((deviceType) << 16) | ((access) << 14) | ((function) << 2) | (methods)
}

const (
	FILE_DEVICE_UNKNOWN = windef.FILE_DEVICE_UNKNOWN
	METHOD_BUFFERED     = windef.METHOD_BUFFERED
	FILE_ANY_ACCESS     = windef.FILE_ANY_ACCESS
)

var (
	_NTIOAPI_H = //col:1
	FILE_SUPERSEDE = 0x00000000 //col:2
FILE_OPEN = 0x00000001          //col:3
FILE_CREATE = 0x00000002        //col:4
FILE_OPEN_IF = 0x00000003   //col:5
FILE_OVERWRITE = 0x00000004 //col:6
FILE_OVERWRITE_IF = 0x00000005        //col:7
FILE_MAXIMUM_DISPOSITION = 0x00000005 //col:8
FILE_DIRECTORY_FILE = 0x00000001      //col:9
FILE_WRITE_THROUGH = 0x00000002   //col:10
FILE_SEQUENTIAL_ONLY = 0x00000004 //col:11
FILE_NO_INTERMEDIATE_BUFFERING = 0x00000008 //col:12
FILE_SYNCHRONOUS_IO_ALERT = 0x00000010      //col:13
FILE_SYNCHRONOUS_IO_NONALERT = 0x00000020   //col:14
FILE_NON_DIRECTORY_FILE = 0x00000040     //col:15
FILE_CREATE_TREE_CONNECTION = 0x00000080 //col:16
FILE_COMPLETE_IF_OPLOCKED = 0x00000100 //col:17
FILE_NO_EA_KNOWLEDGE = 0x00000200      //col:18
FILE_OPEN_FOR_RECOVERY = 0x00000400    //col:19
FILE_RANDOM_ACCESS = 0x00000800   //col:20
FILE_DELETE_ON_CLOSE = 0x00001000 //col:21
FILE_OPEN_BY_FILE_ID = 0x00002000        //col:22
FILE_OPEN_FOR_BACKUP_INTENT = 0x00004000 //col:23
FILE_NO_COMPRESSION = 0x00008000         //col:24
FILE_OPEN_REQUIRING_OPLOCK = 0x00010000 //col:25
FILE_DISALLOW_EXCLUSIVE = 0x00020000    //col:26
FILE_SESSION_AWARE = 0x00040000      //col:27
FILE_RESERVE_OPFILTER = 0x00100000   //col:28
FILE_OPEN_REPARSE_POINT = 0x00200000 //col:29
FILE_OPEN_NO_RECALL = 0x00400000            //col:30
FILE_OPEN_FOR_FREE_SPACE_QUERY = 0x00800000 //col:31
FILE_COPY_STRUCTURED_STORAGE = 0x00000041 //col:32
FILE_STRUCTURED_STORAGE = 0x00000441      //col:33
FILE_SUPERSEDED = 0x00000000              //col:34
FILE_OPENED = 0x00000001  //col:35
FILE_CREATED = 0x00000002 //col:36
FILE_OVERWRITTEN = 0x00000003    //col:37
FILE_EXISTS = 0x00000004         //col:38
FILE_DOES_NOT_EXIST = 0x00000005 //col:39
FILE_WRITE_TO_END_OF_FILE = 0xffffffff      //col:40
FILE_USE_FILE_POINTER_POSITION = 0xfffffffe //col:41
FILE_BYTE_ALIGNMENT = 0x00000000 //col:42
FILE_WORD_ALIGNMENT = 0x00000001 //col:43
FILE_LONG_ALIGNMENT = 0x00000003 //col:44
FILE_QUAD_ALIGNMENT = 0x00000007 //col:45
FILE_OCTA_ALIGNMENT = 0x0000000f //col:46
FILE_32_BYTE_ALIGNMENT = 0x0000001f  //col:47
FILE_64_BYTE_ALIGNMENT = 0x0000003f  //col:48
FILE_128_BYTE_ALIGNMENT = 0x0000007f //col:49
FILE_256_BYTE_ALIGNMENT = 0x000000ff //col:50
FILE_512_BYTE_ALIGNMENT = 0x000001ff //col:51
MAXIMUM_FILENAME_LENGTH = 256 //col:52
FILE_NEED_EA = 0x00000080     //col:53
FILE_EA_TYPE_BINARY = 0xfffe  //col:54
FILE_EA_TYPE_ASCII = 0xfffd  //col:55
FILE_EA_TYPE_BITMAP = 0xfffb //col:56
FILE_EA_TYPE_METAFILE = 0xfffa //col:57
FILE_EA_TYPE_ICON = 0xfff9     //col:58
FILE_EA_TYPE_EA = 0xffee       //col:59
FILE_EA_TYPE_MVMT = 0xffdf //col:60
FILE_EA_TYPE_MVST = 0xffde //col:61
FILE_EA_TYPE_ASN1 = 0xffdd        //col:62
FILE_EA_TYPE_FAMILY_IDS = 0xff01  //col:63
FILE_REMOVABLE_MEDIA = 0x00000001 //col:64
FILE_READ_ONLY_DEVICE = 0x00000002 //col:65
FILE_FLOPPY_DISKETTE = 0x00000004  //col:66
FILE_WRITE_ONCE_MEDIA = 0x00000008  //col:67
FILE_REMOTE_DEVICE = 0x00000010     //col:68
FILE_DEVICE_IS_MOUNTED = 0x00000020 //col:69
FILE_VIRTUAL_VOLUME = 0x00000040            //col:70
FILE_AUTOGENERATED_DEVICE_NAME = 0x00000080 //col:71
FILE_DEVICE_SECURE_OPEN = 0x00000100        //col:72
FILE_CHARACTERISTIC_PNP_DEVICE = 0x00000800 //col:73
FILE_CHARACTERISTIC_TS_DEVICE = 0x00001000  //col:74
FILE_CHARACTERISTIC_WEBDAV_DEVICE = 0x00002000 //col:75
FILE_CHARACTERISTIC_CSV = 0x00010000           //col:76
FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL = 0x00020000 //col:77
FILE_PORTABLE_DEVICE = 0x00040000                     //col:78
FILE_REMOTE_DEVICE_VSMB = 0x00080000                  //col:79
FILE_DEVICE_REQUIRE_SECURITY_CHECK = 0x00100000 //col:80
FILE_PIPE_BYTE_STREAM_TYPE = 0x00000000         //col:81
FILE_PIPE_MESSAGE_TYPE = 0x00000001          //col:82
FILE_PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000 //col:83
FILE_PIPE_REJECT_REMOTE_CLIENTS = 0x00000002 //col:84
FILE_PIPE_TYPE_VALID_MASK = 0x00000003 //col:85
FILE_PIPE_QUEUE_OPERATION = 0x00000000 //col:86
FILE_PIPE_COMPLETE_OPERATION = 0x00000001 //col:87
FILE_PIPE_BYTE_STREAM_MODE = 0x00000000   //col:88
FILE_PIPE_MESSAGE_MODE = 0x00000001       //col:89
FILE_PIPE_INBOUND = 0x00000000  //col:90
FILE_PIPE_OUTBOUND = 0x00000001 //col:91
FILE_PIPE_FULL_DUPLEX = 0x00000002        //col:92
FILE_PIPE_DISCONNECTED_STATE = 0x00000001 //col:93
FILE_PIPE_LISTENING_STATE = 0x00000002    //col:94
FILE_PIPE_CONNECTED_STATE = 0x00000003 //col:95
FILE_PIPE_CLOSING_STATE = 0x00000004   //col:96
FILE_PIPE_CLIENT_END = 0x00000000          //col:97
FILE_PIPE_SERVER_END = 0x00000001          //col:98
FILE_PIPE_UNLIMITED_INSTANCES = 0xffffffff //col:99
MAILSLOT_SIZE_AUTO = 0                               //col:100
FLAGS_END_OF_FILE_INFO_EX_EXTEND_PAGING = 0x00000001 //col:101
FLAGS_END_OF_FILE_INFO_EX_NO_EXTRA_PAGING_EXTEND = 0x00000002 //col:102
FLAGS_END_OF_FILE_INFO_EX_TIME_CONSTRAINED = 0x00000004       //col:103
FLAGS_DELAY_REASONS_LOG_FILE_FULL = 0x00000001                //col:104
FLAGS_DELAY_REASONS_BITMAP_SCANNED = 0x00000002 //col:105
FILE_LINK_REPLACE_IF_EXISTS = 0x00000001        //col:106
FILE_LINK_POSIX_SEMANTICS = 0x00000002                      //col:107
FILE_LINK_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008 //col:108
FILE_LINK_NO_INCREASE_AVAILABLE_SPACE = 0x00000010          //col:109
FILE_LINK_NO_DECREASE_AVAILABLE_SPACE = 0x00000020 //col:110
FILE_LINK_PRESERVE_AVAILABLE_SPACE = 0x00000030    //col:111
FILE_LINK_IGNORE_READONLY_ATTRIBUTE = 0x00000040 //col:112
FILE_LINK_FORCE_RESIZE_TARGET_SR = 0x00000080    //col:113
FILE_LINK_FORCE_RESIZE_SOURCE_SR = 0x00000100    //col:114
FILE_LINK_FORCE_RESIZE_SR = 0x00000180     //col:115
FILE_RENAME_REPLACE_IF_EXISTS = 0x00000001 //col:116
FILE_RENAME_POSIX_SEMANTICS = 0x00000002                      //col:117
FILE_RENAME_SUPPRESS_PIN_STATE_INHERITANCE = 0x00000004       //col:118
FILE_RENAME_SUPPRESS_STORAGE_RESERVE_INHERITANCE = 0x00000008 //col:119
FILE_RENAME_NO_INCREASE_AVAILABLE_SPACE = 0x00000010 //col:120
FILE_RENAME_NO_DECREASE_AVAILABLE_SPACE = 0x00000020 //col:121
FILE_RENAME_PRESERVE_AVAILABLE_SPACE = 0x00000030  //col:122
FILE_RENAME_IGNORE_READONLY_ATTRIBUTE = 0x00000040 //col:123
FILE_RENAME_FORCE_RESIZE_TARGET_SR = 0x00000080    //col:124
FILE_RENAME_FORCE_RESIZE_SOURCE_SR = 0x00000100 //col:125
FILE_RENAME_FORCE_RESIZE_SR = 0x00000180        //col:126
FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 0x1 //col:127
FILE_SKIP_SET_EVENT_ON_HANDLE = 0x2        //col:128
FILE_SKIP_SET_USER_EVENT_ON_FAST_IO = 0x4  //col:129
CHECKSUM_ENFORCEMENT_OFF = 0x00000001 //col:130
LX_FILE_METADATA_HAS_UID = 0x1        //col:131
LX_FILE_METADATA_HAS_GID = 0x2       //col:132
LX_FILE_METADATA_HAS_MODE = 0x4      //col:133
LX_FILE_METADATA_HAS_DEVICE_ID = 0x8 //col:134
LX_FILE_CASE_SENSITIVE_DIR = 0x10            //col:135
FILE_CS_FLAG_CASE_SENSITIVE_DIR = 0x00000001 //col:136
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_WRITELOCKED = 0x00000001        //col:137
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_TO_TX = 0x00000002      //col:138
FILE_ID_GLOBAL_TX_DIR_INFO_FLAG_VISIBLE_OUTSIDE_TX = 0x00000004 //col:139
FILE_VC_QUOTA_NONE = 0x00000000  //col:140
FILE_VC_QUOTA_TRACK = 0x00000001 //col:141
FILE_VC_QUOTA_ENFORCE = 0x00000002          //col:142
FILE_VC_QUOTA_MASK = 0x00000003             //col:143
FILE_VC_CONTENT_INDEX_DISABLED = 0x00000008 //col:144
FILE_VC_LOG_QUOTA_THRESHOLD = 0x00000010 //col:145
FILE_VC_LOG_QUOTA_LIMIT = 0x00000020     //col:146
FILE_VC_LOG_VOLUME_THRESHOLD = 0x00000040 //col:147
FILE_VC_LOG_VOLUME_LIMIT = 0x00000080     //col:148
FILE_VC_QUOTAS_INCOMPLETE = 0x00000100    //col:149
FILE_VC_QUOTAS_REBUILDING = 0x00000200 //col:150
FILE_VC_VALID_MASK = 0x000003ff        //col:151
SSINFO_FLAGS_ALIGNED_DEVICE = 0x00000001              //col:152
SSINFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 0x00000002 //col:153
SSINFO_OFFSET_UNKNOWN = 0xffffffff                    //col:154
FLUSH_FLAGS_FILE_DATA_ONLY = 0x00000001 //col:155
FLUSH_FLAGS_NO_SYNC = 0x00000002        //col:156
FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 0x00000004 //col:157
FILE_QUERY_RESTART_SCAN = 0x00000001         //col:158
FILE_QUERY_RETURN_SINGLE_ENTRY = 0x00000002  //col:159
FILE_QUERY_INDEX_SPECIFIED = 0x00000004             //col:160
FILE_QUERY_RETURN_ON_DISK_ENTRIES_ONLY = 0x00000008 //col:161
FILE_QUERY_NO_CURSOR_UPDATE = 0x00000010 //col:162
IO_COMPLETION_QUERY_STATE = 0x0001       //col:163
IO_COMPLETION_MODIFY_STATE = 0x0002      //col:164
IO_COMPLETION_ALL_ACCESS = (IO_COMPLETION_QUERY_STATE|IO_COMPLETION_MODIFY_STATE|STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE
) //col:165
SYMLINK_FLAG_RELATIVE = 0x00000001 //col:166
SYMLINK_DIRECTORY = 0x80000000     //col:167
SYMLINK_FILE = 0x40000000                                                                  //col:168
REPARSE_DATA_BUFFER_HEADER_SIZE = UFIELD_OFFSET(REPARSE_DATA_BUFFER, GenericReparseBuffer) //col:169
DEVICE_NAMED_PIPE L"DeviceNamedPipe" = FSCTL_PIPE_ASSIGN_EVENT             CTL_CODE(FILE_DEVICE_NAMED_PIPE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:170
FSCTL_PIPE_ASSIGN_EVENT = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:171
FSCTL_PIPE_DISCONNECT = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 1, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:172
FSCTL_PIPE_LISTEN = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:173
FSCTL_PIPE_PEEK = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 3, METHOD_BUFFERED, FILE_READ_DATA) //col:174
FSCTL_PIPE_QUERY_EVENT =              CTL_CODE(FILE_DEVICE_NAMED_PIPE, 4, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:175
FSCTL_PIPE_TRANSCEIVE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 5, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA) //col:176
FSCTL_PIPE_WAIT = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 6, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:177
FSCTL_PIPE_IMPERSONATE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 7, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:178
FSCTL_PIPE_SET_CLIENT_PROCESS = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 8, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:179
FSCTL_PIPE_QUERY_CLIENT_PROCESS = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 9, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:180
FSCTL_PIPE_GET_PIPE_ATTRIBUTE =       CTL_CODE(FILE_DEVICE_NAMED_PIPE, 10, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:181
FSCTL_PIPE_SET_PIPE_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 11, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:182
FSCTL_PIPE_GET_CONNECTION_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:183
FSCTL_PIPE_SET_CONNECTION_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:184
FSCTL_PIPE_GET_HANDLE_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:185
FSCTL_PIPE_SET_HANDLE_ATTRIBUTE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 15, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:186
FSCTL_PIPE_FLUSH = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 16, METHOD_BUFFERED, FILE_WRITE_DATA) //col:187
FSCTL_PIPE_DISABLE_IMPERSONATE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 17, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:188
FSCTL_PIPE_SILO_ARRIVAL = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 18, METHOD_BUFFERED, FILE_WRITE_DATA) //col:189
FSCTL_PIPE_CREATE_SYMLINK = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 19, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) //col:190
FSCTL_PIPE_DELETE_SYMLINK =           CTL_CODE(FILE_DEVICE_NAMED_PIPE, 20, METHOD_BUFFERED, FILE_SPECIAL_ACCESS) //col:191
FSCTL_PIPE_QUERY_CLIENT_PROCESS_V2 = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 21, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:192
FSCTL_PIPE_INTERNAL_READ = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2045, METHOD_BUFFERED, FILE_READ_DATA) //col:193
FSCTL_PIPE_INTERNAL_WRITE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2046, METHOD_BUFFERED, FILE_WRITE_DATA) //col:194
FSCTL_PIPE_INTERNAL_TRANSCEIVE = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2047, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA) //col:195
FSCTL_PIPE_INTERNAL_READ_OVFLOW = CTL_CODE(FILE_DEVICE_NAMED_PIPE, 2048, METHOD_BUFFERED, FILE_READ_DATA) //col:196
FILE_PIPE_READ_DATA = 0x00000000    //col:197
FILE_PIPE_WRITE_SPACE = 0x00000001  //col:198
FILE_PIPE_COMPUTER_NAME_LENGTH = 15 //col:199
FILE_PIPE_SYMLINK_FLAG_GLOBAL = 0x1   //col:200
FILE_PIPE_SYMLINK_FLAG_RELATIVE = 0x2 //col:201
FILE_PIPE_SYMLINK_VALID_FLAGS = (FILE_PIPE_SYMLINK_FLAG_GLOBAL | FILE_PIPE_SYMLINK_FLAG_RELATIVE) //col:202
MAILSLOT_CLASS_FIRSTCLASS = 1                                                                     //col:204
MAILSLOT_CLASS_SECONDCLASS = 2 //col:205
FSCTL_MAILSLOT_PEEK = CTL_CODE(FILE_DEVICE_MAILSLOT, 0, METHOD_NEITHER, FILE_READ_DATA) //col:206
MOUNTMGR_DEVICE_NAME L"DeviceMountPointManager" = MOUNTMGRCONTROLTYPE 0x0000006D //col:207
MOUNTMGRCONTROLTYPE = 0x0000006D                                                 //col:208
MOUNTMGRCONTROLTYPE = 0x0000006D //col:209
MOUNTDEVCONTROLTYPE = 0x0000004D //col:210
IOCTL_MOUNTMGR_CREATE_POINT = CTL_CODE(MOUNTMGRCONTROLTYPE, 0, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:211
IOCTL_MOUNTMGR_DELETE_POINTS = CTL_CODE(MOUNTMGRCONTROLTYPE, 1, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:212
IOCTL_MOUNTMGR_QUERY_POINTS = CTL_CODE(MOUNTMGRCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:213
IOCTL_MOUNTMGR_DELETE_POINTS_DBONLY = CTL_CODE(MOUNTMGRCONTROLTYPE, 3, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:214
IOCTL_MOUNTMGR_NEXT_DRIVE_LETTER = CTL_CODE(MOUNTMGRCONTROLTYPE, 4, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:215
IOCTL_MOUNTMGR_AUTO_DL_ASSIGNMENTS = CTL_CODE(MOUNTMGRCONTROLTYPE, 5, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:216
IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_CREATED = CTL_CODE(MOUNTMGRCONTROLTYPE, 6, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:217
IOCTL_MOUNTMGR_VOLUME_MOUNT_POINT_DELETED = CTL_CODE(MOUNTMGRCONTROLTYPE, 7, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:218
IOCTL_MOUNTMGR_CHANGE_NOTIFY = CTL_CODE(MOUNTMGRCONTROLTYPE, 8, METHOD_BUFFERED, FILE_READ_ACCESS) //col:219
IOCTL_MOUNTMGR_KEEP_LINKS_WHEN_OFFLINE = CTL_CODE(MOUNTMGRCONTROLTYPE, 9, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS) //col:220
IOCTL_MOUNTMGR_CHECK_UNPROCESSED_VOLUMES = CTL_CODE(MOUNTMGRCONTROLTYPE, 10, METHOD_BUFFERED, FILE_READ_ACCESS) //col:221
IOCTL_MOUNTMGR_VOLUME_ARRIVAL_NOTIFICATION = CTL_CODE(MOUNTMGRCONTROLTYPE, 11, METHOD_BUFFERED, FILE_READ_ACCESS) //col:222
IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATH =        CTL_CODE(MOUNTMGRCONTROLTYPE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:223
IOCTL_MOUNTMGR_QUERY_DOS_VOLUME_PATHS = CTL_CODE(MOUNTMGRCONTROLTYPE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:224
IOCTL_MOUNTDEV_QUERY_DEVICE_NAME = CTL_CODE(MOUNTDEVCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS) //col:225
MOUNTMGR_IS_DRIVE_LETTER(s) ( = (s)->Length == 28 && (s)->Buffer[0] == '' && (s)->Buffer[1] == 'D' && (s)->Buffer[2] == 'o' && (s)->Buffer[3] == 's' && (s)->Buffer[4] == 'D' && (s)->Buffer[5] == 'e' && (s)->Buffer[6] == 'v' && (s)->Buffer[7] == 'i' && (s)->Buffer[8] == 'c' && (s)->Buffer[9] == 'e' && (s)->Buffer[10] == 's' && (s)->Buffer[11] == '' && (s)->Buffer[12] >= 'A' && (s)->Buffer[12] <= 'Z' && (s)->Buffer[13] == ':') //col:226
MOUNTMGR_IS_VOLUME_NAME(s) ( = ((s)->Length == 96 || ((s)->Length == 98 && (s)->Buffer[48] == '')) && (s)->Buffer[0] == '' && ((s)->Buffer[1] == '?' || (s)->Buffer[1] == '') && (s)->Buffer[2] == '?' && (s)->Buffer[3] == '' && (s)->Buffer[4] == 'V' && (s)->Buffer[5] == 'o' && (s)->Buffer[6] == 'l' && (s)->Buffer[7] == 'u' && (s)->Buffer[8] == 'm' && (s)->Buffer[9] == 'e' && (s)->Buffer[10] == '{' && (s)->Buffer[19] == '-' && (s)->Buffer[24] == '-' && (s)->Buffer[29] == '-' && (s)->Buffer[34] == '-' && (s)->Buffer[47] == '}') //col:243
MOUNTMGR_IS_DOS_VOLUME_NAME(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '') MOUNTMGR_IS_DOS_VOLUME_NAME_WB(s) ( MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 98 && (s)->Buffer[1] == '') MOUNTMGR_IS_NT_VOLUME_NAME(s) ( MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '?') //col:261
MOUNTMGR_IS_DOS_VOLUME_NAME_WB(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 98 && (s)->Buffer[1] == '') MOUNTMGR_IS_NT_VOLUME_NAME(s) ( MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '?') //col:265
MOUNTMGR_IS_NT_VOLUME_NAME(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 96 && (s)->Buffer[1] == '?') //col:269
MOUNTMGR_IS_NT_VOLUME_NAME_WB(s) ( = MOUNTMGR_IS_VOLUME_NAME(s) && (s)->Length == 98 && (s)->Buffer[1] == '?') //col:273
)

const (
	FileDirectoryInformation                     = 1  //col:3
	FileFullDirectoryInformation                 = 2  //col:4
	FileBothDirectoryInformation                 = 3  //col:5
	FileBasicInformation                         = 4  //col:6
	FileStandardInformation                      = 5  //col:7
	FileInternalInformation                      = 6  //col:8
	FileEaInformation                            = 7  //col:9
	FileAccessInformation                        = 8  //col:10
	FileNameInformation                          = 9  //col:11
	FileRenameInformation                        = 10 //col:12
	FileLinkInformation                          = 11 //col:13
	FileNamesInformation                         = 12 //col:14
	FileDispositionInformation                   = 13 //col:15
	FilePositionInformation                      = 14 //col:16
	FileFullEaInformation                        = 15 //col:17
	FileModeInformation                          = 16 //col:18
	FileAlignmentInformation                     = 17 //col:19
	FileAllInformation                           = 18 //col:20
	FileAllocationInformation                    = 19 //col:21
	FileEndOfFileInformation                     = 20 //col:22
	FileAlternateNameInformation                 = 21 //col:23
	FileStreamInformation                        = 22 //col:24
	FilePipeInformation                          = 23 //col:25
	FilePipeLocalInformation                     = 24 //col:26
	FilePipeRemoteInformation                    = 25 //col:27
	FileMailslotQueryInformation                 = 26 //col:28
	FileMailslotSetInformation                   = 27 //col:29
	FileCompressionInformation                   = 28 //col:30
	FileObjectIdInformation                      = 29 //col:31
	FileCompletionInformation                    = 30 //col:32
	FileMoveClusterInformation                   = 31 //col:33
	FileQuotaInformation                         = 32 //col:34
	FileReparsePointInformation                  = 33 //col:35
	FileNetworkOpenInformation                   = 34 //col:36
	FileAttributeTagInformation                  = 35 //col:37
	FileTrackingInformation                      = 36 //col:38
	FileIdBothDirectoryInformation               = 37 //col:39
	FileIdFullDirectoryInformation               = 38 //col:40
	FileValidDataLengthInformation               = 39 //col:41
	FileShortNameInformation                     = 40 //col:42
	FileIoCompletionNotificationInformation      = 41 //col:43
	FileIoStatusBlockRangeInformation            = 42 //col:44
	FileIoPriorityHintInformation                = 43 //col:45
	FileSfioReserveInformation                   = 44 //col:46
	FileSfioVolumeInformation                    = 45 //col:47
	FileHardLinkInformation                      = 46 //col:48
	FileProcessIdsUsingFileInformation           = 47 //col:49
	FileNormalizedNameInformation                = 48 //col:50
	FileNetworkPhysicalNameInformation           = 49 //col:51
	FileIdGlobalTxDirectoryInformation           = 50 //col:52
	FileIsRemoteDeviceInformation                = 51 //col:53
	FileUnusedInformation                        = 52 //col:54
	FileNumaNodeInformation                      = 53 //col:55
	FileStandardLinkInformation                  = 54 //col:56
	FileRemoteProtocolInformation                = 55 //col:57
	FileRenameInformationBypassAccessCheck       = 56 //col:58
	FileLinkInformationBypassAccessCheck         = 57 //col:59
	FileVolumeNameInformation                    = 58 //col:60
	FileIdInformation                            = 59 //col:61
	FileIdExtdDirectoryInformation               = 60 //col:62
	FileReplaceCompletionInformation             = 61 //col:63
	FileHardLinkFullIdInformation                = 62 //col:64
	FileIdExtdBothDirectoryInformation           = 63 //col:65
	FileDispositionInformationEx                 = 64 //col:66
	FileRenameInformationEx                      = 65 //col:67
	FileRenameInformationExBypassAccessCheck     = 66 //col:68
	FileDesiredStorageClassInformation           = 67 //col:69
	FileStatInformation                          = 68 //col:70
	FileMemoryPartitionInformation               = 69 //col:71
	FileStatLxInformation                        = 70 //col:72
	FileCaseSensitiveInformation                 = 71 //col:73
	FileLinkInformationEx                        = 72 //col:74
	FileLinkInformationExBypassAccessCheck       = 73 //col:75
	FileStorageReserveIdInformation              = 74 //col:76
	FileCaseSensitiveInformationForceAccessCheck = 75 //col:77
	FileKnownFolderInformation                   = 76 //col:78
	FileMaximumInformation                       = 77 //col:79
)

const (
	IoPriorityVeryLow  = 0 //col:83
	IoPriorityLow      = 2 //col:84
	IoPriorityNormal   = 3 //col:85
	IoPriorityHigh     = 4 //col:86
	IoPriorityCritical = 5 //col:87
	MaxIoPriorityTypes = 6 //col:88
)

const (
	KnownFolderNone      = 1 //col:92
	KnownFolderDesktop   = 2 //col:93
	KnownFolderDocuments = 3 //col:94
	KnownFolderDownloads = 4 //col:95
	KnownFolderMusic     = 5 //col:96
	KnownFolderPictures  = 6 //col:97
	KnownFolderVideos    = 7 //col:98
	KnownFolderOther     = 8 //col:99
	KnownFolderMax       = 7 //col:100
)

const (
	FileFsVolumeInformation       = 1  //col:104
	FileFsLabelInformation        = 2  //col:105
	FileFsSizeInformation         = 3  //col:106
	FileFsDeviceInformation       = 4  //col:107
	FileFsAttributeInformation    = 5  //col:108
	FileFsControlInformation      = 6  //col:109
	FileFsFullSizeInformation     = 7  //col:110
	FileFsObjectIdInformation     = 8  //col:111
	FileFsDriverPathInformation   = 9  //col:112
	FileFsVolumeFlagsInformation  = 10 //col:113
	FileFsSectorSizeInformation   = 11 //col:114
	FileFsDataCopyInformation     = 12 //col:115
	FileFsMetadataSizeInformation = 13 //col:116
	FileFsFullSizeInformationEx   = 14 //col:117
	FileFsMaximumInformation      = 15 //col:118
)

const (
	DirectoryNotifyInformation         = 1 //col:122
	DirectoryNotifyExtendedInformation = 2 //col:123
	DirectoryNotifyFullInformation     = 3 //col:124
	DirectoryNotifyMaximumInformation  = 4 //col:125
)

const (
	IoCompletionBasicInformation = 1 //col:129
)

const (
	IoSessionEventIgnore       = 1 //col:133
	IoSessionEventCreated      = 2 //col:134
	IoSessionEventTerminated   = 3 //col:135
	IoSessionEventConnected    = 4 //col:136
	IoSessionEventDisconnected = 5 //col:137
	IoSessionEventLogon        = 6 //col:138
	IoSessionEventLogoff       = 7 //col:139
	IoSessionEventMax          = 8 //col:140
)

const (
	IoSessionStateCreated              = 1 //col:144
	IoSessionStateInitialized          = 2 //col:145
	IoSessionStateConnected            = 3 //col:146
	IoSessionStateDisconnected         = 4 //col:147
	IoSessionStateDisconnectedLoggedOn = 5 //col:148
	IoSessionStateLoggedOn             = 6 //col:149
	IoSessionStateLoggedOff            = 7 //col:150
	IoSessionStateTerminated           = 8 //col:151
	IoSessionStateMax                  = 9 //col:152
)

const (
	InterfaceTypeUndefined = -1 //col:156
	Internal               = 0  //col:157
	Isa                    = 1  //col:158
	Eisa                   = 2  //col:159
	MicroChannel           = 3  //col:160
	TurboChannel           = 4  //col:161
	PCIBus                 = 5  //col:162
	VMEBus                 = 6  //col:163
	NuBus                  = 7  //col:164
	PCMCIABus              = 8  //col:165
	CBus                   = 9  //col:166
	MPIBus                 = 10 //col:167
	MPSABus                = 11 //col:168
	ProcessorInternal      = 12 //col:169
	InternalPowerBus       = 13 //col:170
	PNPISABus              = 14 //col:171
	PNPBus                 = 15 //col:172
	Vmcs                   = 16 //col:173
	ACPIBus                = 17 //col:174
	MaximumInterfaceType   = 20 //col:175
)

const (
	Width8Bits      = 1 //col:179
	Width16Bits     = 2 //col:180
	Width32Bits     = 3 //col:181
	Width64Bits     = 4 //col:182
	WidthNoWrap     = 5 //col:183
	MaximumDmaWidth = 6 //col:184
)

const (
	Compatible      = 1 //col:188
	TypeA           = 2 //col:189
	TypeB           = 3 //col:190
	TypeC           = 4 //col:191
	TypeF           = 5 //col:192
	MaximumDmaSpeed = 6 //col:193
)

const (
	ConfigurationSpaceUndefined = -1 //col:197
	Cmos                        = 2  //col:198
	EisaConfiguration           = 3  //col:199
	Pos                         = 4  //col:200
	CbusConfiguration           = 5  //col:201
	PCIConfiguration            = 6  //col:202
	VMEConfiguration            = 7  //col:203
	NuBusConfiguration          = 8  //col:204
	PCMCIAConfiguration         = 9  //col:205
	MPIConfiguration            = 10 //col:206
	MPSAConfiguration           = 11 //col:207
	PNPISAConfiguration         = 12 //col:208
	SgiInternalConfiguration    = 13 //col:209
	MaximumBusDataType          = 14 //col:210
)

type IO_STATUS_BLOCK struct {
	Union   union    //col:3
	Status  NTSTATUS //col:5
	Pointer PVOID    //col:6
}

type FILE_IO_COMPLETION_INFORMATION struct {
	KeyContext    PVOID           //col:12
	ApcContext    PVOID           //col:13
	IoStatusBlock IO_STATUS_BLOCK //col:14
}

type FILE_BASIC_INFORMATION struct {
	CreationTime   LARGE_INTEGER //col:18
	LastAccessTime LARGE_INTEGER //col:19
	LastWriteTime  LARGE_INTEGER //col:20
	ChangeTime     LARGE_INTEGER //col:21
	FileAttributes uint32        //col:22
}

type FILE_STANDARD_INFORMATION struct {
	AllocationSize LARGE_INTEGER //col:26
	EndOfFile      LARGE_INTEGER //col:27
	NumberOfLinks  uint32        //col:28
	DeletePending  bool          //col:29
	Directory      bool          //col:30
}

type FILE_STANDARD_INFORMATION_EX struct {
	AllocationSize    LARGE_INTEGER //col:34
	EndOfFile         LARGE_INTEGER //col:35
	NumberOfLinks     uint32        //col:36
	DeletePending     bool          //col:37
	Directory         bool          //col:38
	AlternateStream   bool          //col:39
	MetadataAttribute bool          //col:40
}

type FILE_INTERNAL_INFORMATION struct {
	IndexNumber LARGE_INTEGER //col:44
}

type FILE_EA_INFORMATION struct {
	EaSize uint32 //col:48
}

type FILE_ACCESS_INFORMATION struct {
	AccessFlags ACCESS_MASK //col:52
}

type FILE_POSITION_INFORMATION struct {
	CurrentByteOffset LARGE_INTEGER //col:56
}

type FILE_MODE_INFORMATION struct {
	Mode uint32 //col:60
}

type FILE_ALIGNMENT_INFORMATION struct {
	AlignmentRequirement uint32 //col:64
}

type FILE_NAME_INFORMATION struct {
	FileNameLength uint32   //col:68
	FileName       [1]WCHAR //col:69
}

type FILE_ALL_INFORMATION struct {
	BasicInformation     FILE_BASIC_INFORMATION     //col:73
	StandardInformation  FILE_STANDARD_INFORMATION  //col:74
	InternalInformation  FILE_INTERNAL_INFORMATION  //col:75
	EaInformation        FILE_EA_INFORMATION        //col:76
	AccessInformation    FILE_ACCESS_INFORMATION    //col:77
	PositionInformation  FILE_POSITION_INFORMATION  //col:78
	ModeInformation      FILE_MODE_INFORMATION      //col:79
	AlignmentInformation FILE_ALIGNMENT_INFORMATION //col:80
	NameInformation      FILE_NAME_INFORMATION      //col:81
}

type FILE_NETWORK_OPEN_INFORMATION struct {
	CreationTime   LARGE_INTEGER //col:85
	LastAccessTime LARGE_INTEGER //col:86
	LastWriteTime  LARGE_INTEGER //col:87
	ChangeTime     LARGE_INTEGER //col:88
	AllocationSize LARGE_INTEGER //col:89
	EndOfFile      LARGE_INTEGER //col:90
	FileAttributes uint32        //col:91
}

type FILE_ATTRIBUTE_TAG_INFORMATION struct {
	FileAttributes uint32 //col:95
	ReparseTag     uint32 //col:96
}

type FILE_ALLOCATION_INFORMATION struct {
	AllocationSize LARGE_INTEGER //col:100
}

type FILE_COMPRESSION_INFORMATION struct {
	CompressedFileSize   LARGE_INTEGER //col:104
	CompressionFormat    USHORT        //col:105
	CompressionUnitShift uint8         //col:106
	ChunkShift           uint8         //col:107
	ClusterShift         uint8         //col:108
	Reserved             [3]uint8      //col:109
}

type FILE_DISPOSITION_INFORMATION struct {
	DeleteFile bool //col:113
}

type FILE_END_OF_FILE_INFORMATION struct {
	EndOfFile LARGE_INTEGER //col:117
}

type FILE_END_OF_FILE_INFORMATION_EX struct {
	EndOfFile          LARGE_INTEGER //col:121
	PagingFileSizeInMM LARGE_INTEGER //col:122
	PagingFileMaxSize  LARGE_INTEGER //col:123
	Flags              uint32        //col:124
}

type FILE_VALID_DATA_LENGTH_INFORMATION struct {
	ValidDataLength LARGE_INTEGER //col:128
}

type FILE_LINK_INFORMATION struct {
	#if (PhntVersion>=PhntRedstone5) #if (PHNT_VERSION >= PHNT_REDSTONE5) //col:132
	Union union                                                           //col:133
	ReplaceIfExists bool                                                  //col:135
	Flags uint32                                                          //col:136
}

type FILE_LINK_INFORMATION_EX struct {
	Flags          uint32   //col:147
	RootDirectory  HANDLE   //col:148
	FileNameLength uint32   //col:149
	FileName       [1]WCHAR //col:150
}

type FILE_MOVE_CLUSTER_INFORMATION struct {
	ClusterCount   uint32   //col:154
	RootDirectory  HANDLE   //col:155
	FileNameLength uint32   //col:156
	FileName       [1]WCHAR //col:157
}

type FILE_RENAME_INFORMATION struct {
	ReplaceIfExists bool     //col:161
	RootDirectory   HANDLE   //col:162
	FileNameLength  uint32   //col:163
	FileName        [1]WCHAR //col:164
}

type FILE_RENAME_INFORMATION_EX struct {
	Flags          uint32   //col:168
	RootDirectory  HANDLE   //col:169
	FileNameLength uint32   //col:170
	FileName       [1]WCHAR //col:171
}

type FILE_STREAM_INFORMATION struct {
	NextEntryOffset      uint32        //col:175
	StreamNameLength     uint32        //col:176
	StreamSize           LARGE_INTEGER //col:177
	StreamAllocationSize LARGE_INTEGER //col:178
	StreamName           [1]WCHAR      //col:179
}

type FILE_TRACKING_INFORMATION struct {
	DestinationFile         HANDLE  //col:183
	ObjectInformationLength uint32  //col:184
	ObjectInformation       [1]int8 //col:185
}

type FILE_COMPLETION_INFORMATION struct {
	Port HANDLE //col:189
	Key  PVOID  //col:190
}

type FILE_PIPE_INFORMATION struct {
	ReadMode       uint32 //col:194
	CompletionMode uint32 //col:195
}

type FILE_PIPE_LOCAL_INFORMATION struct {
	NamedPipeType          uint32 //col:199
	NamedPipeConfiguration uint32 //col:200
	MaximumInstances       uint32 //col:201
	CurrentInstances       uint32 //col:202
	InboundQuota           uint32 //col:203
	ReadDataAvailable      uint32 //col:204
	OutboundQuota          uint32 //col:205
	WriteQuotaAvailable    uint32 //col:206
	NamedPipeState         uint32 //col:207
	NamedPipeEnd           uint32 //col:208
}

type FILE_PIPE_REMOTE_INFORMATION struct {
	CollectDataTime        LARGE_INTEGER //col:212
	MaximumCollectionCount uint32        //col:213
}

type FILE_MAILSLOT_QUERY_INFORMATION struct {
	MaximumMessageSize uint32        //col:217
	MailslotQuota      uint32        //col:218
	NextMessageSize    uint32        //col:219
	MessagesAvailable  uint32        //col:220
	ReadTimeout        LARGE_INTEGER //col:221
}

type FILE_MAILSLOT_SET_INFORMATION struct {
	ReadTimeout PLARGE_INTEGER //col:225
}

type FILE_REPARSE_POINT_INFORMATION struct {
	FileReference LONGLONG //col:229
	Tag           uint32   //col:230
}

type FILE_LINK_ENTRY_INFORMATION struct {
	NextEntryOffset uint32   //col:234
	ParentFileId    LONGLONG //col:235
	FileNameLength  uint32   //col:236
	FileName        [1]WCHAR //col:237
}

type FILE_LINKS_INFORMATION struct {
	BytesNeeded     uint32                      //col:241
	EntriesReturned uint32                      //col:242
	Entry           FILE_LINK_ENTRY_INFORMATION //col:243
}

type FILE_NETWORK_PHYSICAL_NAME_INFORMATION struct {
	FileNameLength uint32   //col:247
	FileName       [1]WCHAR //col:248
}

type FILE_STANDARD_LINK_INFORMATION struct {
	NumberOfAccessibleLinks uint32 //col:252
	TotalNumberOfLinks      uint32 //col:253
	DeletePending           bool   //col:254
	Directory               bool   //col:255
}

type FILE_SFIO_RESERVE_INFORMATION struct {
	RequestsPerPeriod      uint32 //col:259
	Period                 uint32 //col:260
	RetryFailures          bool   //col:261
	Discardable            bool   //col:262
	RequestSize            uint32 //col:263
	NumOutstandingRequests uint32 //col:264
}

type FILE_SFIO_VOLUME_INFORMATION struct {
	MaximumRequestsPerPeriod uint32 //col:268
	MinimumPeriod            uint32 //col:269
	MinimumTransferSize      uint32 //col:270
}

type FILE_IO_PRIORITY_HINT_INFORMATION_EX struct {
	PriorityHint     IO_PRIORITY_HINT //col:274
	BoostOutstanding bool             //col:275
}

type FILE_IO_COMPLETION_NOTIFICATION_INFORMATION struct {
	Flags uint32 //col:279
}

type FILE_PROCESS_IDS_USING_FILE_INFORMATION struct {
	NumberOfProcessIdsInList uint32       //col:283
	ProcessIdList            [1]ULONG_PTR //col:284
}

type FILE_IS_REMOTE_DEVICE_INFORMATION struct {
	IsRemote bool //col:288
}

type FILE_NUMA_NODE_INFORMATION struct {
	NodeNumber USHORT //col:292
}

type FILE_IOSTATUSBLOCK_RANGE_INFORMATION struct {
	IoStatusBlockRange PUCHAR //col:296
	Length             uint32 //col:297
}

type FILE_REMOTE_PROTOCOL_INFORMATION struct {
	StructureVersion     USHORT //col:301
	StructureSize        USHORT //col:302
	Protocol             uint32 //col:303
	ProtocolMajorVersion USHORT //col:304
	ProtocolMinorVersion USHORT //col:305
	ProtocolRevision     USHORT //col:306
	Reserved             USHORT //col:307
	Flags                uint32 //col:308
	Struct               struct //col:309
		Reserved [8]uint32      //col:311
	}


	type FILE_INTEGRITY_STREAM_INFORMATION struct{
	ChecksumAlgorithm USHORT //col:349
	ChecksumChunkShift uint8 //col:350
	ClusterShift uint8       //col:351
	Flags uint32 //col:352
	}


	type FILE_VOLUME_NAME_INFORMATION struct{
	DeviceNameLength uint32 //col:356
	DeviceName[1] WCHAR     //col:357
	}


	type FILE_ID_INFORMATION struct{
	VolumeSerialNumber ULONGLONG //col:361
	FileId FILE_ID_128           //col:362
	}


	type FILE_ID_EXTD_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:366
	FileIndex uint32           //col:367
	CreationTime LARGE_INTEGER //col:368
	LastAccessTime LARGE_INTEGER //col:369
	LastWriteTime LARGE_INTEGER  //col:370
	ChangeTime LARGE_INTEGER     //col:371
	EndOfFile LARGE_INTEGER      //col:372
	AllocationSize LARGE_INTEGER //col:373
	FileAttributes uint32        //col:374
	FileNameLength uint32        //col:375
	EaSize uint32          //col:376
	ReparsePointTag uint32 //col:377
	FileId FILE_ID_128     //col:378
	FileName[1] WCHAR //col:379
	}


	type FILE_LINK_ENTRY_FULL_ID_INFORMATION struct{
	NextEntryOffset uint32   //col:383
	ParentFileId FILE_ID_128 //col:384
	FileNameLength uint32    //col:385
	FileName[1] WCHAR //col:386
	}


	type FILE_LINKS_FULL_ID_INFORMATION  struct{
	BytesNeeded uint32                        //col:390
	EntriesReturned uint32                    //col:391
	Entry FILE_LINK_ENTRY_FULL_ID_INFORMATION //col:392
	}


	type FILE_ID_EXTD_BOTH_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:396
	FileIndex uint32           //col:397
	CreationTime LARGE_INTEGER //col:398
	LastAccessTime LARGE_INTEGER //col:399
	LastWriteTime LARGE_INTEGER  //col:400
	ChangeTime LARGE_INTEGER     //col:401
	EndOfFile LARGE_INTEGER      //col:402
	AllocationSize LARGE_INTEGER //col:403
	FileAttributes uint32        //col:404
	FileNameLength uint32        //col:405
	EaSize uint32          //col:406
	ReparsePointTag uint32 //col:407
	FileId FILE_ID_128     //col:408
	ShortNameLength CCHAR //col:409
	ShortName[12] WCHAR   //col:410
	FileName[1] WCHAR //col:411
	}


	type FILE_STAT_INFORMATION struct{
	FileId LARGE_INTEGER         //col:415
	CreationTime LARGE_INTEGER   //col:416
	LastAccessTime LARGE_INTEGER //col:417
	LastWriteTime LARGE_INTEGER  //col:418
	ChangeTime LARGE_INTEGER     //col:419
	AllocationSize LARGE_INTEGER //col:420
	EndOfFile LARGE_INTEGER //col:421
	FileAttributes uint32   //col:422
	ReparseTag uint32       //col:423
	NumberOfLinks uint32    //col:424
	EffectiveAccess ACCESS_MASK //col:425
	}


	type FILE_MEMORY_PARTITION_INFORMATION struct{
	OwnerPartitionHandle HANDLE //col:429
	Union union                 //col:430
	Struct struct               //col:432
	NoCrossPartitionAccess uint8 //col:434
	Spare[3] uint8               //col:435
	}


	type FILE_STAT_LX_INFORMATION struct{
	FileId LARGE_INTEGER         //col:442
	CreationTime LARGE_INTEGER   //col:443
	LastAccessTime LARGE_INTEGER //col:444
	LastWriteTime LARGE_INTEGER  //col:445
	ChangeTime LARGE_INTEGER     //col:446
	AllocationSize LARGE_INTEGER //col:447
	EndOfFile LARGE_INTEGER //col:448
	FileAttributes uint32   //col:449
	ReparseTag uint32       //col:450
	NumberOfLinks uint32    //col:451
	EffectiveAccess ACCESS_MASK //col:452
	LxFlags uint32              //col:453
	LxUid uint32                //col:454
	LxGid uint32           //col:455
	LxMode uint32          //col:456
	LxDeviceIdMajor uint32 //col:457
	LxDeviceIdMinor uint32 //col:458
	}


	type FILE_CASE_SENSITIVE_INFORMATION struct{
	Flags uint32 //col:462
	}


	type FILE_KNOWN_FOLDER_INFORMATION struct{
	Type FILE_KNOWN_FOLDER_TYPE //col:466
	}


	type FILE_DIRECTORY_INFORMATION struct{
	NextEntryOffset uint32     //col:470
	FileIndex uint32           //col:471
	CreationTime LARGE_INTEGER //col:472
	LastAccessTime LARGE_INTEGER //col:473
	LastWriteTime LARGE_INTEGER  //col:474
	ChangeTime LARGE_INTEGER     //col:475
	EndOfFile LARGE_INTEGER      //col:476
	AllocationSize LARGE_INTEGER //col:477
	FileAttributes uint32        //col:478
	FileNameLength uint32        //col:479
	FileName[1] WCHAR //col:480
	}


	type FILE_FULL_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:484
	FileIndex uint32           //col:485
	CreationTime LARGE_INTEGER //col:486
	LastAccessTime LARGE_INTEGER //col:487
	LastWriteTime LARGE_INTEGER  //col:488
	ChangeTime LARGE_INTEGER     //col:489
	EndOfFile LARGE_INTEGER      //col:490
	AllocationSize LARGE_INTEGER //col:491
	FileAttributes uint32        //col:492
	FileNameLength uint32        //col:493
	EaSize uint32     //col:494
	FileName[1] WCHAR //col:495
	}


	type FILE_ID_FULL_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:499
	FileIndex uint32           //col:500
	CreationTime LARGE_INTEGER //col:501
	LastAccessTime LARGE_INTEGER //col:502
	LastWriteTime LARGE_INTEGER  //col:503
	ChangeTime LARGE_INTEGER     //col:504
	EndOfFile LARGE_INTEGER      //col:505
	AllocationSize LARGE_INTEGER //col:506
	FileAttributes uint32        //col:507
	FileNameLength uint32        //col:508
	EaSize uint32        //col:509
	FileId LARGE_INTEGER //col:510
	FileName[1] WCHAR //col:511
	}


	type FILE_BOTH_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:515
	FileIndex uint32           //col:516
	CreationTime LARGE_INTEGER //col:517
	LastAccessTime LARGE_INTEGER //col:518
	LastWriteTime LARGE_INTEGER  //col:519
	ChangeTime LARGE_INTEGER     //col:520
	EndOfFile LARGE_INTEGER      //col:521
	AllocationSize LARGE_INTEGER //col:522
	FileAttributes uint32        //col:523
	FileNameLength uint32        //col:524
	EaSize uint32         //col:525
	ShortNameLength CCHAR //col:526
	ShortName[12] WCHAR //col:527
	FileName[1] WCHAR   //col:528
	}


	type FILE_ID_BOTH_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:532
	FileIndex uint32           //col:533
	CreationTime LARGE_INTEGER //col:534
	LastAccessTime LARGE_INTEGER //col:535
	LastWriteTime LARGE_INTEGER  //col:536
	ChangeTime LARGE_INTEGER     //col:537
	EndOfFile LARGE_INTEGER      //col:538
	AllocationSize LARGE_INTEGER //col:539
	FileAttributes uint32        //col:540
	FileNameLength uint32        //col:541
	EaSize uint32         //col:542
	ShortNameLength CCHAR //col:543
	ShortName[12] WCHAR  //col:544
	FileId LARGE_INTEGER //col:545
	FileName[1] WCHAR //col:546
	}


	type FILE_NAMES_INFORMATION struct{
	NextEntryOffset uint32 //col:550
	FileIndex uint32       //col:551
	FileNameLength uint32  //col:552
	FileName[1] WCHAR //col:553
	}


	type FILE_ID_GLOBAL_TX_DIR_INFORMATION struct{
	NextEntryOffset uint32     //col:557
	FileIndex uint32           //col:558
	CreationTime LARGE_INTEGER //col:559
	LastAccessTime LARGE_INTEGER //col:560
	LastWriteTime LARGE_INTEGER  //col:561
	ChangeTime LARGE_INTEGER     //col:562
	EndOfFile LARGE_INTEGER      //col:563
	AllocationSize LARGE_INTEGER //col:564
	FileAttributes uint32        //col:565
	FileNameLength uint32        //col:566
	FileId LARGE_INTEGER      //col:567
	LockingTransactionId GUID //col:568
	TxInfoFlags uint32        //col:569
	FileName[1] WCHAR //col:570
	}


	type FILE_OBJECTID_INFORMATION struct{
	FileReference LONGLONG //col:574
	ObjectId[16] uint8     //col:575
	Union union             //col:576
	Struct struct           //col:578
	BirthVolumeId[16] uint8 //col:580
	BirthObjectId[16] uint8 //col:581
	DomainId[16] uint8 //col:582
	}


	type FILE_FULL_EA_INFORMATION struct{
	NextEntryOffset uint32 //col:589
	Flags uint8            //col:590
	EaNameLength uint8     //col:591
	EaValueLength USHORT //col:592
	EaName[1] int8       //col:593
	}


	type FILE_GET_EA_INFORMATION struct{
	NextEntryOffset uint32 //col:597
	EaNameLength uint8     //col:598
	EaName[1] int8 //col:599
	}


	type FILE_GET_QUOTA_INFORMATION struct{
	NextEntryOffset uint32 //col:603
	SidLength uint32       //col:604
	Sid SID                //col:605
	}


	type FILE_QUOTA_INFORMATION struct{
	NextEntryOffset uint32   //col:609
	SidLength uint32         //col:610
	ChangeTime LARGE_INTEGER //col:611
	QuotaUsed LARGE_INTEGER      //col:612
	QuotaThreshold LARGE_INTEGER //col:613
	QuotaLimit LARGE_INTEGER     //col:614
	Sid SID //col:615
	}


	type FILE_FS_VOLUME_INFORMATION struct{
	VolumeCreationTime LARGE_INTEGER //col:619
	VolumeSerialNumber uint32        //col:620
	VolumeLabelLength uint32         //col:621
	SupportsObjects bool //col:622
	VolumeLabel[1] WCHAR //col:623
	}


	type FILE_FS_LABEL_INFORMATION struct{
	VolumeLabelLength uint32 //col:627
	VolumeLabel[1] WCHAR     //col:628
	}


	type FILE_FS_SIZE_INFORMATION struct{
	TotalAllocationUnits LARGE_INTEGER     //col:632
	AvailableAllocationUnits LARGE_INTEGER //col:633
	SectorsPerAllocationUnit uint32        //col:634
	BytesPerSector uint32 //col:635
	}


	type FILE_FS_CONTROL_INFORMATION struct{
	FreeSpaceStartFiltering LARGE_INTEGER //col:639
	FreeSpaceThreshold LARGE_INTEGER      //col:640
	FreeSpaceStopFiltering LARGE_INTEGER  //col:641
	DefaultQuotaThreshold LARGE_INTEGER //col:642
	DefaultQuotaLimit LARGE_INTEGER     //col:643
	FileSystemControlFlags uint32       //col:644
	}


	type FILE_FS_FULL_SIZE_INFORMATION struct{
	TotalAllocationUnits LARGE_INTEGER           //col:648
	CallerAvailableAllocationUnits LARGE_INTEGER //col:649
	ActualAvailableAllocationUnits LARGE_INTEGER //col:650
	SectorsPerAllocationUnit uint32 //col:651
	BytesPerSector uint32           //col:652
	}


	type FILE_FS_OBJECTID_INFORMATION struct{
	ObjectId[16] uint8 //col:656
	ExtendedInfo[48] uint8 //col:657
	}


	type FILE_FS_DEVICE_INFORMATION struct{
	DeviceType DEVICE_TYPE //col:661
	Characteristics uint32 //col:662
	}


	type FILE_FS_ATTRIBUTE_INFORMATION struct{
	FileSystemAttributes uint32     //col:666
	MaximumComponentNameLength LONG //col:667
	FileSystemNameLength uint32     //col:668
	FileSystemName[1] WCHAR //col:669
	}


	type FILE_FS_DRIVER_PATH_INFORMATION struct{
	DriverInPath bool       //col:673
	DriverNameLength uint32 //col:674
	DriverName[1] WCHAR //col:675
	}


	type FILE_FS_VOLUME_FLAGS_INFORMATION struct{
	Flags uint32 //col:679
	}


	type FILE_FS_SECTOR_SIZE_INFORMATION struct{
	LogicalBytesPerSector uint32                //col:683
	PhysicalBytesPerSectorForAtomicity uint32   //col:684
	PhysicalBytesPerSectorForPerformance uint32 //col:685
	FileSystemEffectivePhysicalBytesPerSectorForAtomicity uint32 //col:686
	Flags uint32                                                 //col:687
	ByteOffsetForSectorAlignment uint32                          //col:688
	ByteOffsetForPartitionAlignment uint32 //col:689
	}


	type FILE_FS_DATA_COPY_INFORMATION struct{
	NumberOfCopies uint32 //col:693
	}


	type FILE_FS_METADATA_SIZE_INFORMATION struct{
	TotalMetadataAllocationUnits LARGE_INTEGER //col:697
	SectorsPerAllocationUnit uint32            //col:698
	BytesPerSector uint32                      //col:699
	}


	type FILE_FS_FULL_SIZE_INFORMATION_EX struct{
	ActualTotalAllocationUnits ULONGLONG           //col:703
	ActualAvailableAllocationUnits ULONGLONG       //col:704
	ActualPoolUnavailableAllocationUnits ULONGLONG //col:705
	CallerTotalAllocationUnits ULONGLONG           //col:706
	CallerAvailableAllocationUnits ULONGLONG       //col:707
	CallerPoolUnavailableAllocationUnits ULONGLONG //col:708
	UsedAllocationUnits ULONGLONG                 //col:709
	TotalReservedAllocationUnits ULONGLONG        //col:710
	VolumeStorageReserveAllocationUnits ULONGLONG //col:711
	AvailableCommittedAllocationUnits ULONGLONG   //col:712
	PoolAvailableAllocationUnits ULONGLONG //col:713
	SectorsPerAllocationUnit uint32        //col:714
	BytesPerSector uint32                  //col:715
	}


	type IO_COMPLETION_BASIC_INFORMATION struct{
	Depth LONG //col:719
	}


	type REPARSE_DATA_BUFFER struct{
	ReparseTag uint32        //col:723
	ReparseDataLength USHORT //col:724
	Reserved USHORT          //col:725
	FieldSizeBytes(ReparseDataLength) _Field_size_bytes_(ReparseDataLength) //col:726
	Union union                 //col:727
	Struct struct               //col:729
	SubstituteNameOffset USHORT //col:731
	SubstituteNameLength USHORT //col:732
	PrintNameOffset USHORT //col:733
	PrintNameLength USHORT //col:734
	Flags uint32           //col:735
	PathBuffer[1] WCHAR //col:736
	}


	type FILE_PIPE_ASSIGN_EVENT_BUFFER struct{
	EventHandle HANDLE //col:754
	KeyValue uint32    //col:755
	}


	type FILE_PIPE_PEEK_BUFFER struct{
	NamedPipeState uint32    //col:759
	ReadDataAvailable uint32 //col:760
	NumberOfMessages uint32  //col:761
	MessageLength uint32 //col:762
	Data[1] int8         //col:763
	}


	type FILE_PIPE_EVENT_BUFFER struct{
	NamedPipeState uint32 //col:767
	EntryType uint32      //col:768
	ByteCount uint32      //col:769
	KeyValue uint32       //col:770
	NumberRequests uint32 //col:771
	}


	type FILE_PIPE_WAIT_FOR_BUFFER struct{
	Timeout LARGE_INTEGER //col:775
	NameLength uint32     //col:776
	TimeoutSpecified bool //col:777
	Name[1] WCHAR //col:778
	}


	type FILE_PIPE_CLIENT_PROCESS_BUFFER struct{
	#if !Defined(BuildWow6432) #if !defined(BUILD_WOW6432) //col:782
	ClientSession PVOID                                    //col:783
	ClientProcess PVOID     //col:784
	# else # else           //col:785
	ClientSession ULONGLONG //col:786
	ClientProcess ULONGLONG //col:787
	#endif #endif           //col:788
	}


	type FILE_PIPE_CLIENT_PROCESS_BUFFER_V2  struct{
	ClientSession ULONGLONG //col:792
	#if !Defined(BuildWow6432) #if !defined(BUILD_WOW6432) //col:793
	ClientProcess PVOID     //col:794
	# else # else           //col:795
	ClientProcess ULONGLONG //col:796
	#endif #endif //col:797
	}


	type FILE_PIPE_CLIENT_PROCESS_BUFFER_EX struct{
	#if !Defined(BuildWow6432) #if !defined(BUILD_WOW6432) //col:801
	ClientSession PVOID                                    //col:802
	ClientProcess PVOID     //col:803
	# else # else           //col:804
	ClientSession ULONGLONG //col:805
	ClientProcess ULONGLONG         //col:806
	#endif #endif                   //col:807
	ClientComputerNameLength USHORT //col:808
	ClientComputerBuffer[FILE_PIPE_COMPUTER_NAME_LENGTH WCHAR //col:809
	}


	type FILE_PIPE_SILO_ARRIVAL_INPUT struct{
	JobHandle HANDLE //col:813
	}


	type FILE_PIPE_CREATE_SYMLINK_INPUT struct{
	NameOffset USHORT           //col:817
	NameLength USHORT           //col:818
	SubstituteNameOffset USHORT //col:819
	SubstituteNameLength USHORT //col:820
	Flags uint32                //col:821
	}


	type FILE_PIPE_DELETE_SYMLINK_INPUT struct{
	NameOffset USHORT //col:825
	NameLength USHORT //col:826
	}


	type FILE_MAILSLOT_PEEK_BUFFER struct{
	ReadDataAvailable uint32 //col:830
	NumberOfMessages uint32  //col:831
	MessageLength uint32     //col:832
	}


	type MOUNTMGR_CREATE_POINT_INPUT struct{
	SymbolicLinkNameOffset USHORT //col:836
	SymbolicLinkNameLength USHORT //col:837
	DeviceNameOffset USHORT       //col:838
	DeviceNameLength USHORT //col:839
	}


	type MOUNTMGR_MOUNT_POINT struct{
	SymbolicLinkNameOffset uint32 //col:843
	SymbolicLinkNameLength USHORT //col:844
	Reserved1 USHORT              //col:845
	UniqueIdOffset uint32 //col:846
	UniqueIdLength USHORT //col:847
	Reserved2 USHORT      //col:848
	DeviceNameOffset uint32 //col:849
	DeviceNameLength USHORT //col:850
	Reserved3 USHORT        //col:851
	}


	type MOUNTMGR_MOUNT_POINTS struct{
	Size uint32                //col:855
	NumberOfMountPoints uint32 //col:856
	MountPoints[1] MOUNTMGR_MOUNT_POINT //col:857
	}


	type MOUNTMGR_DRIVE_LETTER_TARGET struct{
	DeviceNameLength USHORT //col:861
	DeviceName[1] WCHAR     //col:862
	}


	type MOUNTMGR_DRIVE_LETTER_INFORMATION struct{
	DriveLetterWasAssigned bool //col:866
	CurrentDriveLetter uint8    //col:867
	}


	type MOUNTMGR_VOLUME_MOUNT_POINT struct{
	SourceVolumeNameOffset USHORT //col:871
	SourceVolumeNameLength USHORT //col:872
	TargetVolumeNameOffset USHORT //col:873
	TargetVolumeNameLength USHORT //col:874
	}


	type MOUNTMGR_CHANGE_NOTIFY_INFO struct{
	EpicNumber uint32 //col:878
	}


	type MOUNTMGR_TARGET_NAME struct{
	DeviceNameLength USHORT //col:882
	DeviceName[1] WCHAR     //col:883
	}


	type MOUNTDEV_NAME struct{
	NameLength USHORT //col:887
	Name[1] WCHAR     //col:888
	}


	type MOUNTMGR_VOLUME_PATHS struct{
	MultiSzLength uint32 //col:892
	MultiSz[1] WCHAR     //col:893
	}



	type (
	Ntioapi interface{
	typedef_VOID_()(ok bool) //col:21
	NtCreateFile()(ok bool) //col:576
	}
	ntioapi struct{}
	)

	func NewNtioapi()Ntioapi{ return & ntioapi{} }

	func (n *ntioapi)typedef_VOID_()(ok bool){//col:21
	/*typedef VOID (NTAPI *PIO_APC_ROUTINE)(
	      _In_ PVOID ApcContext,
	      _In_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG Reserved
	      );
	  #if (PHNT_VERSION >= PHNT_REDSTONE5)
	  #endif
	  #if (PHNT_VERSION >= PHNT_19H1)
	  #endif
	  #if (PHNT_VERSION >= PHNT_REDSTONE)
	  #endif
	  #if (PHNT_VERSION >= PHNT_REDSTONE3)
	  #endif
	  #if (PHNT_VERSION >= PHNT_REDSTONE5)
	  #endif
	  #if (PHNT_VERSION >= PHNT_19H1)
	  #endif
	  typedef DECLSPEC_ALIGN(8) struct _FILE_IO_PRIORITY_HINT_INFORMATION
	  {
	      IO_PRIORITY_HINT PriorityHint;
	  } FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION;*/
	return true
	}

	func (n *ntioapi)NtCreateFile()(ok bool){//col:576
	/*NtCreateFile(
	      _Out_ PHANDLE FileHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_opt_ PLARGE_INTEGER AllocationSize,
	      _In_ ULONG FileAttributes,
	      _In_ ULONG ShareAccess,
	      _In_ ULONG CreateDisposition,
	      _In_ ULONG CreateOptions,
	      _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,
	      _In_ ULONG EaLength
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCreateNamedPipeFile(
	      _Out_ PHANDLE FileHandle,
	      _In_ ULONG DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG ShareAccess,
	      _In_ ULONG CreateDisposition,
	      _In_ ULONG CreateOptions,
	      _In_ ULONG NamedPipeType,
	      _In_ ULONG ReadMode,
	      _In_ ULONG CompletionMode,
	      _In_ ULONG MaximumInstances,
	      _In_ ULONG InboundQuota,
	      _In_ ULONG OutboundQuota,
	      _In_opt_ PLARGE_INTEGER DefaultTimeout
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCreateMailslotFile(
	      _Out_ PHANDLE FileHandle,
	      _In_ ULONG DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG CreateOptions,
	      _In_ ULONG MailslotQuota,
	      _In_ ULONG MaximumMessageSize,
	      _In_ PLARGE_INTEGER ReadTimeout
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtOpenFile(
	      _Out_ PHANDLE FileHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG ShareAccess,
	      _In_ ULONG OpenOptions
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtDeleteFile(
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtFlushBuffersFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock
	      );
	  #if (PHNT_VERSION >= PHNT_WIN8)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtFlushBuffersFileEx(
	      _In_ HANDLE FileHandle,
	      _In_ ULONG Flags,
	      _In_reads_bytes_(ParametersSize) PVOID Parameters,
	      _In_ ULONG ParametersSize,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID FileInformation,
	      _In_ ULONG Length,
	      _In_ FILE_INFORMATION_CLASS FileInformationClass
	      );
	  #if (PHNT_VERSION >= PHNT_REDSTONE2)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryInformationByName(
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID FileInformation,
	      _In_ ULONG Length,
	      _In_ FILE_INFORMATION_CLASS FileInformationClass
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_reads_bytes_(Length) PVOID FileInformation,
	      _In_ ULONG Length,
	      _In_ FILE_INFORMATION_CLASS FileInformationClass
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryDirectoryFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID FileInformation,
	      _In_ ULONG Length,
	      _In_ FILE_INFORMATION_CLASS FileInformationClass,
	      _In_ BOOLEAN ReturnSingleEntry,
	      _In_opt_ PUNICODE_STRING FileName,
	      _In_ BOOLEAN RestartScan
	      );
	  #if (PHNT_VERSION >= PHNT_REDSTONE3)
	  #if (PHNT_VERSION >= PHNT_REDSTONE5)
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryDirectoryFileEx(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID FileInformation,
	      _In_ ULONG Length,
	      _In_ FILE_INFORMATION_CLASS FileInformationClass,
	      _In_ ULONG QueryFlags,
	      _In_opt_ PUNICODE_STRING FileName
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryEaFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_ BOOLEAN ReturnSingleEntry,
	      _In_reads_bytes_opt_(EaListLength) PVOID EaList,
	      _In_ ULONG EaListLength,
	      _In_opt_ PULONG EaIndex,
	      _In_ BOOLEAN RestartScan
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetEaFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_reads_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryQuotaInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_ BOOLEAN ReturnSingleEntry,
	      _In_reads_bytes_opt_(SidListLength) PVOID SidList,
	      _In_ ULONG SidListLength,
	      _In_opt_ PSID StartSid,
	      _In_ BOOLEAN RestartScan
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetQuotaInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_reads_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryVolumeInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID FsInformation,
	      _In_ ULONG Length,
	      _In_ FSINFOCLASS FsInformationClass
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetVolumeInformationFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_reads_bytes_(Length) PVOID FsInformation,
	      _In_ ULONG Length,
	      _In_ FSINFOCLASS FsInformationClass
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCancelIoFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock
	      );
	  #if (PHNT_VERSION >= PHNT_VISTA)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCancelIoFileEx(
	      _In_ HANDLE FileHandle,
	      _In_opt_ PIO_STATUS_BLOCK IoRequestToCancel,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock
	      );
	  #endif
	  #if (PHNT_VERSION >= PHNT_VISTA)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCancelSynchronousIoFile(
	      _In_ HANDLE ThreadHandle,
	      _In_opt_ PIO_STATUS_BLOCK IoRequestToCancel,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtDeviceIoControlFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG IoControlCode,
	      _In_reads_bytes_opt_(InputBufferLength) PVOID InputBuffer,
	      _In_ ULONG InputBufferLength,
	      _Out_writes_bytes_opt_(OutputBufferLength) PVOID OutputBuffer,
	      _In_ ULONG OutputBufferLength
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtFsControlFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ ULONG FsControlCode,
	      _In_reads_bytes_opt_(InputBufferLength) PVOID InputBuffer,
	      _In_ ULONG InputBufferLength,
	      _Out_writes_bytes_opt_(OutputBufferLength) PVOID OutputBuffer,
	      _In_ ULONG OutputBufferLength
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtReadFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_opt_ PLARGE_INTEGER ByteOffset,
	      _In_opt_ PULONG Key
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtWriteFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_reads_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_opt_ PLARGE_INTEGER ByteOffset,
	      _In_opt_ PULONG Key
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtReadFileScatter(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ PFILE_SEGMENT_ELEMENT SegmentArray,
	      _In_ ULONG Length,
	      _In_opt_ PLARGE_INTEGER ByteOffset,
	      _In_opt_ PULONG Key
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtWriteFileGather(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ PFILE_SEGMENT_ELEMENT SegmentArray,
	      _In_ ULONG Length,
	      _In_opt_ PLARGE_INTEGER ByteOffset,
	      _In_opt_ PULONG Key
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtLockFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ PLARGE_INTEGER ByteOffset,
	      _In_ PLARGE_INTEGER Length,
	      _In_ ULONG Key,
	      _In_ BOOLEAN FailImmediately,
	      _In_ BOOLEAN ExclusiveLock
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtUnlockFile(
	      _In_ HANDLE FileHandle,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_ PLARGE_INTEGER ByteOffset,
	      _In_ PLARGE_INTEGER Length,
	      _In_ ULONG Key
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryAttributesFile(
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PFILE_BASIC_INFORMATION FileInformation
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryFullAttributesFile(
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _Out_ PFILE_NETWORK_OPEN_INFORMATION FileInformation
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtNotifyChangeDirectoryFile(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_ ULONG CompletionFilter,
	      _In_ BOOLEAN WatchTree
	      );
	  #if (PHNT_VERSION >= PHNT_REDSTONE3)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtNotifyChangeDirectoryFileEx(
	      _In_ HANDLE FileHandle,
	      _In_opt_ HANDLE Event,
	      _In_opt_ PIO_APC_ROUTINE ApcRoutine,
	      _In_opt_ PVOID ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _Out_writes_bytes_(Length) PVOID Buffer,
	      _In_ ULONG Length,
	      _In_ ULONG CompletionFilter,
	      _In_ BOOLEAN WatchTree,
	      _In_opt_ DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtLoadDriver(
	      _In_ PUNICODE_STRING DriverServiceName
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtUnloadDriver(
	      _In_ PUNICODE_STRING DriverServiceName
	      );
	  #ifndef IO_COMPLETION_QUERY_STATE
	  #endif
	  #ifndef IO_COMPLETION_MODIFY_STATE
	  #endif
	  #ifndef IO_COMPLETION_ALL_ACCESS
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCreateIoCompletion(
	      _Out_ PHANDLE IoCompletionHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
	      _In_opt_ ULONG Count
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtOpenIoCompletion(
	      _Out_ PHANDLE IoCompletionHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtQueryIoCompletion(
	      _In_ HANDLE IoCompletionHandle,
	      _In_ IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
	      _Out_writes_bytes_(IoCompletionInformationLength) PVOID IoCompletionInformation,
	      _In_ ULONG IoCompletionInformationLength,
	      _Out_opt_ PULONG ReturnLength
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetIoCompletion(
	      _In_ HANDLE IoCompletionHandle,
	      _In_opt_ PVOID KeyContext,
	      _In_opt_ PVOID ApcContext,
	      _In_ NTSTATUS IoStatus,
	      _In_ ULONG_PTR IoStatusInformation
	      );
	  #if (PHNT_VERSION >= PHNT_WIN7)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtSetIoCompletionEx(
	      _In_ HANDLE IoCompletionHandle,
	      _In_ HANDLE IoCompletionPacketHandle,
	      _In_opt_ PVOID KeyContext,
	      _In_opt_ PVOID ApcContext,
	      _In_ NTSTATUS IoStatus,
	      _In_ ULONG_PTR IoStatusInformation
	      );
	  #endif
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtRemoveIoCompletion(
	      _In_ HANDLE IoCompletionHandle,
	      _Out_ PVOID *KeyContext,
	      _Out_ PVOID *ApcContext,
	      _Out_ PIO_STATUS_BLOCK IoStatusBlock,
	      _In_opt_ PLARGE_INTEGER Timeout
	      );
	  #if (PHNT_VERSION >= PHNT_VISTA)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtRemoveIoCompletionEx(
	      _In_ HANDLE IoCompletionHandle,
	      _Out_writes_to_(Count, *NumEntriesRemoved) PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation,
	      _In_ ULONG Count,
	      _Out_ PULONG NumEntriesRemoved,
	      _In_opt_ PLARGE_INTEGER Timeout,
	      _In_ BOOLEAN Alertable
	      );
	  #endif
	  #if (PHNT_VERSION >= PHNT_WIN8)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCreateWaitCompletionPacket(
	      _Out_ PHANDLE WaitCompletionPacketHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtAssociateWaitCompletionPacket(
	      _In_ HANDLE WaitCompletionPacketHandle,
	      _In_ HANDLE IoCompletionHandle,
	      _In_ HANDLE TargetObjectHandle,
	      _In_opt_ PVOID KeyContext,
	      _In_opt_ PVOID ApcContext,
	      _In_ NTSTATUS IoStatus,
	      _In_ ULONG_PTR IoStatusInformation,
	      _Out_opt_ PBOOLEAN AlreadySignaled
	      );
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtCancelWaitCompletionPacket(
	      _In_ HANDLE WaitCompletionPacketHandle,
	      _In_ BOOLEAN RemoveSignaledPacket
	      );
	  #endif
	  #if (PHNT_MODE != PHNT_MODE_KERNEL)
	  #if (PHNT_VERSION >= PHNT_VISTA)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtOpenSession(
	      _Out_ PHANDLE SessionHandle,
	      _In_ ACCESS_MASK DesiredAccess,
	      _In_ POBJECT_ATTRIBUTES ObjectAttributes
	      );
	  #endif
	  #endif
	  #if (PHNT_VERSION >= PHNT_WIN7)
	  NTSYSCALLAPI
	  NTSTATUS
	  NTAPI
	  NtNotifyChangeSession(
	      _In_ HANDLE SessionHandle,
	      _In_ ULONG ChangeSequenceNumber,
	      _In_ PLARGE_INTEGER ChangeTimeStamp,
	      _In_ IO_SESSION_EVENT Event,
	      _In_ IO_SESSION_STATE NewState,
	      _In_ IO_SESSION_STATE PreviousState,
	      _In_reads_bytes_opt_(PayloadSize) PVOID Payload,
	      _In_ ULONG PayloadSize
	      );
	  #endif
	  #if (PHNT_VERSION >= PHNT_REDSTONE4)
	  #endif
	  #endif
	  typedef DECLSPEC_ALIGN(8) struct _FILE_IO_PRIORITY_HINT_INFORMATION
	  {
	      IO_PRIORITY_HINT PriorityHint;
	  } FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION;*/
	return true
	}
