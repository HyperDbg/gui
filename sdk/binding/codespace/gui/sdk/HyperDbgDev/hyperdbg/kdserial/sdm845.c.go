package kdserial
//binding\codespace\gui\sdk\HyperDbgDev\hyperdbg\kdserial\sdm845.c.back

const(
GENI4_CFG =        0x0 //col:1
GENI4_IMAGE_REGS = 0x100 //col:2
GENI4_DATA =       0x600 //col:3
QUPV3_SE_DMA =     0xC00 //col:4
GENI4_IMAGE =      0x1000 //col:5
TX_FIFO_DEPTH_MASK =  HWIO_SE_HW_PARAM_0_TX_FIFO_DEPTH_BMSK //col:6
TX_FIFO_DEPTH_SHIFT = HWIO_SE_HW_PARAM_0_TX_FIFO_DEPTH_SHFT //col:7
RX_FIFO_DEPTH_MASK =  HWIO_SE_HW_PARAM_1_RX_FIFO_DEPTH_BMSK //col:8
RX_FIFO_DEPTH_SHIFT = HWIO_SE_HW_PARAM_1_RX_FIFO_DEPTH_SHFT //col:9
RX_LAST_VALID_BYTES_MASK =  HWIO_GENI_RX_FIFO_STATUS_RX_LAST_BYTE_VALID_BMSK //col:10
RX_LAST_VALID_BYTES_SHIFT = HWIO_GENI_RX_FIFO_STATUS_RX_LAST_BYTE_VALID_SHFT //col:11
RX_FIFO_WC =                HWIO_GENI_RX_FIFO_STATUS_RX_FIFO_WC_BMSK //col:12
RX_FIFO_WC_SHIFT =          HWIO_GENI_RX_FIFO_STATUS_RX_FIFO_WC_SHFT //col:13
TF_FIFO_WATERMARK_IRQ = HWIO_GENI_M_IRQ_STATUS_TX_FIFO_WATERMARK_BMSK //col:14
M_CMD_DONE_IRQ =        HWIO_GENI_M_IRQ_STATUS_M_CMD_DONE_BMSK //col:15
SEC_IRQ =               HWIO_GENI_M_IRQ_STATUS_SEC_IRQ_BMSK //col:16
RX_LAST_IRQ =           HWIO_GENI_S_IRQ_STATUS_RX_FIFO_LAST_BMSK //col:17
RX_FIFO_WATERMARK_IRQ = HWIO_GENI_S_IRQ_STATUS_RX_FIFO_WATERMARK_BMSK //col:18
GENI4_CFG_REG_BASE =      (QUPV3_NORTH_QUPV3_ID_1_BASE + 0x00080000) //col:19
GENI4_CFG_REG_BASE_OFFS = 0x00080000 //col:20
GENI4_CFG_REG_BASE =      (QUPV3_NORTH_QUPV3_ID_1_BASE + 0x00080000) //col:21
GENI4_CFG_REG_BASE_OFFS = 0x00080000 //col:22
HWIO_GENI_OUTPUT_CTRL_ADDR(x) = ((x) + 0x00000024) //col:23
HWIO_GENI_OUTPUT_CTRL_OFFS =    (0x00000024) //col:24
HWIO_GENI_OUTPUT_CTRL_RMSK =    0x7f //col:25
HWIO_GENI_OUTPUT_CTRL_IN(x) = in_dword_masked(HWIO_GENI_OUTPUT_CTRL_ADDR(x), HWIO_GENI_OUTPUT_CTRL_RMSK) //col:26
HWIO_GENI_OUTPUT_CTRL_INM(x, m) = in_dword_masked(HWIO_GENI_OUTPUT_CTRL_ADDR(x), m) //col:28
HWIO_GENI_OUTPUT_CTRL_OUT(x, v) = out_dword(HWIO_GENI_OUTPUT_CTRL_ADDR(x), v) //col:30
HWIO_GENI_OUTPUT_CTRL_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_OUTPUT_CTRL_ADDR(x), m, v, HWIO_GENI_OUTPUT_CTRL_IN(x)) //col:32
HWIO_GENI_OUTPUT_CTRL_IO_OUTPUT_CTRL_BMSK = 0x7f //col:34
HWIO_GENI_OUTPUT_CTRL_IO_OUTPUT_CTRL_SHFT = 0x0 //col:35
HWIO_GENI_CGC_CTRL_ADDR(x) = ((x) + 0x00000028) //col:36
HWIO_GENI_CGC_CTRL_OFFS =    (0x00000028) //col:37
HWIO_GENI_CGC_CTRL_RMSK =    0x37f //col:38
HWIO_GENI_CGC_CTRL_IN(x) = in_dword_masked(HWIO_GENI_CGC_CTRL_ADDR(x), HWIO_GENI_CGC_CTRL_RMSK) //col:39
HWIO_GENI_CGC_CTRL_INM(x, m) = in_dword_masked(HWIO_GENI_CGC_CTRL_ADDR(x), m) //col:41
HWIO_GENI_CGC_CTRL_OUT(x, v) = out_dword(HWIO_GENI_CGC_CTRL_ADDR(x), v) //col:43
HWIO_GENI_CGC_CTRL_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_CGC_CTRL_ADDR(x), m, v, HWIO_GENI_CGC_CTRL_IN(x)) //col:45
HWIO_GENI_CGC_CTRL_PROG_RAM_SCLK_OFF_BMSK =     0x200 //col:47
HWIO_GENI_CGC_CTRL_PROG_RAM_SCLK_OFF_SHFT =     0x9 //col:48
HWIO_GENI_CGC_CTRL_PROG_RAM_HCLK_OFF_BMSK =     0x100 //col:49
HWIO_GENI_CGC_CTRL_PROG_RAM_HCLK_OFF_SHFT =     0x8 //col:50
HWIO_GENI_CGC_CTRL_EXT_CLK_CGC_ON_BMSK =        0x40 //col:51
HWIO_GENI_CGC_CTRL_EXT_CLK_CGC_ON_SHFT =        0x6 //col:52
HWIO_GENI_CGC_CTRL_RX_CLK_CGC_ON_BMSK =         0x20 //col:53
HWIO_GENI_CGC_CTRL_RX_CLK_CGC_ON_SHFT =         0x5 //col:54
HWIO_GENI_CGC_CTRL_TX_CLK_CGC_ON_BMSK =         0x10 //col:55
HWIO_GENI_CGC_CTRL_TX_CLK_CGC_ON_SHFT =         0x4 //col:56
HWIO_GENI_CGC_CTRL_SCLK_CGC_ON_BMSK =           0x8 //col:57
HWIO_GENI_CGC_CTRL_SCLK_CGC_ON_SHFT =           0x3 //col:58
HWIO_GENI_CGC_CTRL_DATA_AHB_CLK_CGC_ON_BMSK =   0x4 //col:59
HWIO_GENI_CGC_CTRL_DATA_AHB_CLK_CGC_ON_SHFT =   0x2 //col:60
HWIO_GENI_CGC_CTRL_CFG_AHB_WR_CLK_CGC_ON_BMSK = 0x2 //col:61
HWIO_GENI_CGC_CTRL_CFG_AHB_WR_CLK_CGC_ON_SHFT = 0x1 //col:62
HWIO_GENI_CGC_CTRL_CFG_AHB_CLK_CGC_ON_BMSK =    0x1 //col:63
HWIO_GENI_CGC_CTRL_CFG_AHB_CLK_CGC_ON_SHFT =    0x0 //col:64
HWIO_GENI_STATUS_ADDR(x) = ((x) + 0x00000040) //col:65
HWIO_GENI_STATUS_OFFS =    (0x00000040) //col:66
HWIO_GENI_STATUS_RMSK =    0x1fffff //col:67
HWIO_GENI_STATUS_IN(x) = in_dword_masked(HWIO_GENI_STATUS_ADDR(x), HWIO_GENI_STATUS_RMSK) //col:68
HWIO_GENI_STATUS_INM(x, m) = in_dword_masked(HWIO_GENI_STATUS_ADDR(x), m) //col:70
HWIO_GENI_STATUS_S_GENI_CMD_FSM_STATE_BMSK = 0x1f0000 //col:72
HWIO_GENI_STATUS_S_GENI_CMD_FSM_STATE_SHFT = 0x10 //col:73
HWIO_GENI_STATUS_NOT_USED_BITS_3_BMSK =      0xe000 //col:74
HWIO_GENI_STATUS_NOT_USED_BITS_3_SHFT =      0xd //col:75
HWIO_GENI_STATUS_S_GENI_CMD_ACTIVE_BMSK =    0x1000 //col:76
HWIO_GENI_STATUS_S_GENI_CMD_ACTIVE_SHFT =    0xc //col:77
HWIO_GENI_STATUS_NOT_USED_BITS_2_BMSK =      0xe00 //col:78
HWIO_GENI_STATUS_NOT_USED_BITS_2_SHFT =      0x9 //col:79
HWIO_GENI_STATUS_M_GENI_CMD_FSM_STATE_BMSK = 0x1f0 //col:80
HWIO_GENI_STATUS_M_GENI_CMD_FSM_STATE_SHFT = 0x4 //col:81
HWIO_GENI_STATUS_NOT_USED_BITS_1_BMSK =      0xe //col:82
HWIO_GENI_STATUS_NOT_USED_BITS_1_SHFT =      0x1 //col:83
HWIO_GENI_STATUS_M_GENI_CMD_ACTIVE_BMSK =    0x1 //col:84
HWIO_GENI_STATUS_M_GENI_CMD_ACTIVE_SHFT =    0x0 //col:85
HWIO_GENI_SER_M_CLK_CFG_ADDR(x) = ((x) + 0x00000048) //col:86
HWIO_GENI_SER_M_CLK_CFG_OFFS =    (0x00000048) //col:87
HWIO_GENI_SER_M_CLK_CFG_RMSK =    0xfff1 //col:88
HWIO_GENI_SER_M_CLK_CFG_IN(x) = in_dword_masked(HWIO_GENI_SER_M_CLK_CFG_ADDR(x), HWIO_GENI_SER_M_CLK_CFG_RMSK) //col:89
HWIO_GENI_SER_M_CLK_CFG_INM(x, m) = in_dword_masked(HWIO_GENI_SER_M_CLK_CFG_ADDR(x), m) //col:91
HWIO_GENI_SER_M_CLK_CFG_OUT(x, v) = out_dword(HWIO_GENI_SER_M_CLK_CFG_ADDR(x), v) //col:93
HWIO_GENI_SER_M_CLK_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_SER_M_CLK_CFG_ADDR(x), m, v, HWIO_GENI_SER_M_CLK_CFG_IN(x)) //col:95
HWIO_GENI_SER_M_CLK_CFG_CLK_DIV_VALUE_BMSK = 0xfff0 //col:97
HWIO_GENI_SER_M_CLK_CFG_CLK_DIV_VALUE_SHFT = 0x4 //col:98
HWIO_GENI_SER_M_CLK_CFG_SER_CLK_EN_BMSK =    0x1 //col:99
HWIO_GENI_SER_M_CLK_CFG_SER_CLK_EN_SHFT =    0x0 //col:100
HWIO_GENI_SER_S_CLK_CFG_ADDR(x) = ((x) + 0x0000004c) //col:101
HWIO_GENI_SER_S_CLK_CFG_OFFS =    (0x0000004c) //col:102
HWIO_GENI_SER_S_CLK_CFG_RMSK =    0xfff1 //col:103
HWIO_GENI_SER_S_CLK_CFG_IN(x) = in_dword_masked(HWIO_GENI_SER_S_CLK_CFG_ADDR(x), HWIO_GENI_SER_S_CLK_CFG_RMSK) //col:104
HWIO_GENI_SER_S_CLK_CFG_INM(x, m) = in_dword_masked(HWIO_GENI_SER_S_CLK_CFG_ADDR(x), m) //col:106
HWIO_GENI_SER_S_CLK_CFG_OUT(x, v) = out_dword(HWIO_GENI_SER_S_CLK_CFG_ADDR(x), v) //col:108
HWIO_GENI_SER_S_CLK_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_SER_S_CLK_CFG_ADDR(x), m, v, HWIO_GENI_SER_S_CLK_CFG_IN(x)) //col:110
HWIO_GENI_SER_S_CLK_CFG_CLK_DIV_VALUE_BMSK = 0xfff0 //col:112
HWIO_GENI_SER_S_CLK_CFG_CLK_DIV_VALUE_SHFT = 0x4 //col:113
HWIO_GENI_SER_S_CLK_CFG_SER_CLK_EN_BMSK =    0x1 //col:114
HWIO_GENI_SER_S_CLK_CFG_SER_CLK_EN_SHFT =    0x0 //col:115
HWIO_GENI_DFS_IF_CFG_ADDR(x) = ((x) + 0x00000080) //col:116
HWIO_GENI_DFS_IF_CFG_OFFS =    (0x00000080) //col:117
HWIO_GENI_DFS_IF_CFG_RMSK =    0x701 //col:118
HWIO_GENI_DFS_IF_CFG_IN(x) = in_dword_masked(HWIO_GENI_DFS_IF_CFG_ADDR(x), HWIO_GENI_DFS_IF_CFG_RMSK) //col:119
HWIO_GENI_DFS_IF_CFG_INM(x, m) = in_dword_masked(HWIO_GENI_DFS_IF_CFG_ADDR(x), m) //col:121
HWIO_GENI_DFS_IF_CFG_OUT(x, v) = out_dword(HWIO_GENI_DFS_IF_CFG_ADDR(x), v) //col:123
HWIO_GENI_DFS_IF_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_DFS_IF_CFG_ADDR(x), m, v, HWIO_GENI_DFS_IF_CFG_IN(x)) //col:125
HWIO_GENI_DFS_IF_CFG_NUM_WAIT_STATES_BMSK = 0x700 //col:127
HWIO_GENI_DFS_IF_CFG_NUM_WAIT_STATES_SHFT = 0x8 //col:128
HWIO_GENI_DFS_IF_CFG_DFS_IF_EN_BMSK =       0x1 //col:129
HWIO_GENI_DFS_IF_CFG_DFS_IF_EN_SHFT =       0x0 //col:130
HWIO_GENI_FORCE_DEFAULT_REG_ADDR(x) = ((x) + 0x00000020) //col:131
HWIO_GENI_FORCE_DEFAULT_REG_OFFS =    (0x00000020) //col:132
HWIO_GENI_FORCE_DEFAULT_REG_RMSK =    0x1 //col:133
HWIO_GENI_FORCE_DEFAULT_REG_OUT(x, v) = out_dword(HWIO_GENI_FORCE_DEFAULT_REG_ADDR(x), v) //col:134
HWIO_GENI_FORCE_DEFAULT_REG_FORCE_DEFAULT_BMSK = 0x1 //col:136
HWIO_GENI_FORCE_DEFAULT_REG_FORCE_DEFAULT_SHFT = 0x0 //col:137
GENI4_DATA_REG_BASE =      (QUPV3_NORTH_QUPV3_ID_1_BASE + 0x00080600) //col:138
GENI4_DATA_REG_BASE_OFFS = 0x00080600 //col:139
HWIO_GENI_M_CMD0_ADDR(x) = ((x) + 0x00000000) //col:140
HWIO_GENI_M_CMD0_OFFS =    (0x00000000) //col:141
HWIO_GENI_M_CMD0_RMSK =    0xf9ffffff //col:142
HWIO_GENI_M_CMD0_IN(x) = in_dword_masked(HWIO_GENI_M_CMD0_ADDR(x), HWIO_GENI_M_CMD0_RMSK) //col:143
HWIO_GENI_M_CMD0_INM(x, m) = in_dword_masked(HWIO_GENI_M_CMD0_ADDR(x), m) //col:145
HWIO_GENI_M_CMD0_OUT(x, v) = out_dword(HWIO_GENI_M_CMD0_ADDR(x), v) //col:147
HWIO_GENI_M_CMD0_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_M_CMD0_ADDR(x), m, v, HWIO_GENI_M_CMD0_IN(x)) //col:149
HWIO_GENI_M_CMD0_OPCODE_BMSK =    0xf8000000 //col:151
HWIO_GENI_M_CMD0_OPCODE_SHFT =    0x1b //col:152
HWIO_GENI_M_CMD0_GNRL_PURP_BMSK = 0x1000000 //col:153
HWIO_GENI_M_CMD0_GNRL_PURP_SHFT = 0x18 //col:154
HWIO_GENI_M_CMD0_PARAM_BMSK =     0xffffff //col:155
HWIO_GENI_M_CMD0_PARAM_SHFT =     0x0 //col:156
HWIO_GENI_M_IRQ_STATUS_ADDR(x) = ((x) + 0x00000010) //col:157
HWIO_GENI_M_IRQ_STATUS_OFFS =    (0x00000010) //col:158
HWIO_GENI_M_IRQ_STATUS_RMSK =    0xffc07fff //col:159
HWIO_GENI_M_IRQ_STATUS_IN(x) = in_dword_masked(HWIO_GENI_M_IRQ_STATUS_ADDR(x), HWIO_GENI_M_IRQ_STATUS_RMSK) //col:160
HWIO_GENI_M_IRQ_STATUS_INM(x, m) = in_dword_masked(HWIO_GENI_M_IRQ_STATUS_ADDR(x), m) //col:162
HWIO_GENI_M_IRQ_STATUS_SEC_IRQ_BMSK =           0x80000000 //col:164
HWIO_GENI_M_IRQ_STATUS_SEC_IRQ_SHFT =           0x1f //col:165
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_WATERMARK_BMSK = 0x40000000 //col:166
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_WATERMARK_SHFT = 0x1e //col:167
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_WR_ERR_BMSK =    0x20000000 //col:168
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_WR_ERR_SHFT =    0x1d //col:169
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_RD_ERR_BMSK =    0x10000000 //col:170
HWIO_GENI_M_IRQ_STATUS_TX_FIFO_RD_ERR_SHFT =    0x1c //col:171
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_LAST_BMSK =      0x8000000 //col:172
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_LAST_SHFT =      0x1b //col:173
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_WATERMARK_BMSK = 0x4000000 //col:174
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_WATERMARK_SHFT = 0x1a //col:175
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_WR_ERR_BMSK =    0x2000000 //col:176
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_WR_ERR_SHFT =    0x19 //col:177
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_RD_ERR_BMSK =    0x1000000 //col:178
HWIO_GENI_M_IRQ_STATUS_RX_FIFO_RD_ERR_SHFT =    0x18 //col:179
HWIO_GENI_M_IRQ_STATUS_IO_DATA_ASSERT_BMSK =    0x800000 //col:180
HWIO_GENI_M_IRQ_STATUS_IO_DATA_ASSERT_SHFT =    0x17 //col:181
HWIO_GENI_M_IRQ_STATUS_IO_DATA_DEASSERT_BMSK =  0x400000 //col:182
HWIO_GENI_M_IRQ_STATUS_IO_DATA_DEASSERT_SHFT =  0x16 //col:183
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_5_BMSK =        0x4000 //col:184
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_5_SHFT =        0xe //col:185
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_4_BMSK =        0x2000 //col:186
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_4_SHFT =        0xd //col:187
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_3_BMSK =        0x1000 //col:188
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_3_SHFT =        0xc //col:189
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_2_BMSK =        0x800 //col:190
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_2_SHFT =        0xb //col:191
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_1_BMSK =        0x400 //col:192
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_1_SHFT =        0xa //col:193
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_0_BMSK =        0x200 //col:194
HWIO_GENI_M_IRQ_STATUS_M_GP_IRQ_0_SHFT =        0x9 //col:195
HWIO_GENI_M_IRQ_STATUS_M_GP_SYNC_IRQ_0_BMSK =   0x100 //col:196
HWIO_GENI_M_IRQ_STATUS_M_GP_SYNC_IRQ_0_SHFT =   0x8 //col:197
HWIO_GENI_M_IRQ_STATUS_M_RX_IRQ_BMSK =          0x80 //col:198
HWIO_GENI_M_IRQ_STATUS_M_RX_IRQ_SHFT =          0x7 //col:199
HWIO_GENI_M_IRQ_STATUS_M_TIMESTAMP_BMSK =       0x40 //col:200
HWIO_GENI_M_IRQ_STATUS_M_TIMESTAMP_SHFT =       0x6 //col:201
HWIO_GENI_M_IRQ_STATUS_M_CMD_ABORT_BMSK =       0x20 //col:202
HWIO_GENI_M_IRQ_STATUS_M_CMD_ABORT_SHFT =       0x5 //col:203
HWIO_GENI_M_IRQ_STATUS_M_CMD_CANCEL_BMSK =      0x10 //col:204
HWIO_GENI_M_IRQ_STATUS_M_CMD_CANCEL_SHFT =      0x4 //col:205
HWIO_GENI_M_IRQ_STATUS_M_CMD_FAILURE_BMSK =     0x8 //col:206
HWIO_GENI_M_IRQ_STATUS_M_CMD_FAILURE_SHFT =     0x3 //col:207
HWIO_GENI_M_IRQ_STATUS_M_ILLEGAL_CMD_BMSK =     0x4 //col:208
HWIO_GENI_M_IRQ_STATUS_M_ILLEGAL_CMD_SHFT =     0x2 //col:209
HWIO_GENI_M_IRQ_STATUS_M_CMD_OVERRUN_BMSK =     0x2 //col:210
HWIO_GENI_M_IRQ_STATUS_M_CMD_OVERRUN_SHFT =     0x1 //col:211
HWIO_GENI_M_IRQ_STATUS_M_CMD_DONE_BMSK =        0x1 //col:212
HWIO_GENI_M_IRQ_STATUS_M_CMD_DONE_SHFT =        0x0 //col:213
HWIO_GENI_M_IRQ_ENABLE_ADDR(x) = ((x) + 0x00000014) //col:214
HWIO_GENI_M_IRQ_ENABLE_OFFS =    (0x00000014) //col:215
HWIO_GENI_M_IRQ_ENABLE_RMSK =    0xffc07fff //col:216
HWIO_GENI_M_IRQ_ENABLE_IN(x) = in_dword_masked(HWIO_GENI_M_IRQ_ENABLE_ADDR(x), HWIO_GENI_M_IRQ_ENABLE_RMSK) //col:217
HWIO_GENI_M_IRQ_ENABLE_INM(x, m) = in_dword_masked(HWIO_GENI_M_IRQ_ENABLE_ADDR(x), m) //col:219
HWIO_GENI_M_IRQ_ENABLE_OUT(x, v) = out_dword(HWIO_GENI_M_IRQ_ENABLE_ADDR(x), v) //col:221
HWIO_GENI_M_IRQ_ENABLE_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_M_IRQ_ENABLE_ADDR(x), m, v, HWIO_GENI_M_IRQ_ENABLE_IN(x)) //col:223
HWIO_GENI_M_IRQ_ENABLE_SEC_IRQ_EN_BMSK =           0x80000000 //col:225
HWIO_GENI_M_IRQ_ENABLE_SEC_IRQ_EN_SHFT =           0x1f //col:226
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_WATERMARK_EN_BMSK = 0x40000000 //col:227
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_WATERMARK_EN_SHFT = 0x1e //col:228
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_WR_ERR_EN_BMSK =    0x20000000 //col:229
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_WR_ERR_EN_SHFT =    0x1d //col:230
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_RD_ERR_EN_BMSK =    0x10000000 //col:231
HWIO_GENI_M_IRQ_ENABLE_TX_FIFO_RD_ERR_EN_SHFT =    0x1c //col:232
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_LAST_EN_BMSK =      0x8000000 //col:233
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_LAST_EN_SHFT =      0x1b //col:234
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_WATERMARK_EN_BMSK = 0x4000000 //col:235
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_WATERMARK_EN_SHFT = 0x1a //col:236
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_WR_ERR_EN_BMSK =    0x2000000 //col:237
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_WR_ERR_EN_SHFT =    0x19 //col:238
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_RD_ERR_EN_BMSK =    0x1000000 //col:239
HWIO_GENI_M_IRQ_ENABLE_RX_FIFO_RD_ERR_EN_SHFT =    0x18 //col:240
HWIO_GENI_M_IRQ_ENABLE_IO_DATA_ASSERT_EN_BMSK =    0x800000 //col:241
HWIO_GENI_M_IRQ_ENABLE_IO_DATA_ASSERT_EN_SHFT =    0x17 //col:242
HWIO_GENI_M_IRQ_ENABLE_IO_DATA_DEASSERT_EN_BMSK =  0x400000 //col:243
HWIO_GENI_M_IRQ_ENABLE_IO_DATA_DEASSERT_EN_SHFT =  0x16 //col:244
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_5_EN_BMSK =        0x4000 //col:245
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_5_EN_SHFT =        0xe //col:246
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_4_EN_BMSK =        0x2000 //col:247
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_4_EN_SHFT =        0xd //col:248
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_3_EN_BMSK =        0x1000 //col:249
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_3_EN_SHFT =        0xc //col:250
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_2_EN_BMSK =        0x800 //col:251
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_2_EN_SHFT =        0xb //col:252
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_1_EN_BMSK =        0x400 //col:253
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_1_EN_SHFT =        0xa //col:254
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_0_EN_BMSK =        0x200 //col:255
HWIO_GENI_M_IRQ_ENABLE_M_GP_IRQ_0_EN_SHFT =        0x9 //col:256
HWIO_GENI_M_IRQ_ENABLE_M_GP_SYNC_IRQ_0_EN_BMSK =   0x100 //col:257
HWIO_GENI_M_IRQ_ENABLE_M_GP_SYNC_IRQ_0_EN_SHFT =   0x8 //col:258
HWIO_GENI_M_IRQ_ENABLE_M_RX_IRQ_EN_BMSK =          0x80 //col:259
HWIO_GENI_M_IRQ_ENABLE_M_RX_IRQ_EN_SHFT =          0x7 //col:260
HWIO_GENI_M_IRQ_ENABLE_M_TIMESTAMP_EN_BMSK =       0x40 //col:261
HWIO_GENI_M_IRQ_ENABLE_M_TIMESTAMP_EN_SHFT =       0x6 //col:262
HWIO_GENI_M_IRQ_ENABLE_M_CMD_ABORT_EN_BMSK =       0x20 //col:263
HWIO_GENI_M_IRQ_ENABLE_M_CMD_ABORT_EN_SHFT =       0x5 //col:264
HWIO_GENI_M_IRQ_ENABLE_M_CMD_CANCEL_EN_BMSK =      0x10 //col:265
HWIO_GENI_M_IRQ_ENABLE_M_CMD_CANCEL_EN_SHFT =      0x4 //col:266
HWIO_GENI_M_IRQ_ENABLE_M_CMD_FAILURE_EN_BMSK =     0x8 //col:267
HWIO_GENI_M_IRQ_ENABLE_M_CMD_FAILURE_EN_SHFT =     0x3 //col:268
HWIO_GENI_M_IRQ_ENABLE_M_ILLEGAL_CMD_EN_BMSK =     0x4 //col:269
HWIO_GENI_M_IRQ_ENABLE_M_ILLEGAL_CMD_EN_SHFT =     0x2 //col:270
HWIO_GENI_M_IRQ_ENABLE_M_CMD_OVERRUN_EN_BMSK =     0x2 //col:271
HWIO_GENI_M_IRQ_ENABLE_M_CMD_OVERRUN_EN_SHFT =     0x1 //col:272
HWIO_GENI_M_IRQ_ENABLE_M_CMD_DONE_EN_BMSK =        0x1 //col:273
HWIO_GENI_M_IRQ_ENABLE_M_CMD_DONE_EN_SHFT =        0x0 //col:274
HWIO_GENI_M_IRQ_CLEAR_ADDR(x) = ((x) + 0x00000018) //col:275
HWIO_GENI_M_IRQ_CLEAR_OFFS =    (0x00000018) //col:276
HWIO_GENI_M_IRQ_CLEAR_RMSK =    0xffc07fff //col:277
HWIO_GENI_M_IRQ_CLEAR_OUT(x, v) = out_dword(HWIO_GENI_M_IRQ_CLEAR_ADDR(x), v) //col:278
HWIO_GENI_M_IRQ_CLEAR_SEC_IRQ_CLEAR_BMSK =           0x80000000 //col:280
HWIO_GENI_M_IRQ_CLEAR_SEC_IRQ_CLEAR_SHFT =           0x1f //col:281
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_WATERMARK_CLEAR_BMSK = 0x40000000 //col:282
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_WATERMARK_CLEAR_SHFT = 0x1e //col:283
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_WR_ERR_CLEAR_BMSK =    0x20000000 //col:284
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_WR_ERR_CLEAR_SHFT =    0x1d //col:285
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_RD_ERR_CLEAR_BMSK =    0x10000000 //col:286
HWIO_GENI_M_IRQ_CLEAR_TX_FIFO_RD_ERR_CLEAR_SHFT =    0x1c //col:287
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_LAST_CLEAR_BMSK =      0x8000000 //col:288
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_LAST_CLEAR_SHFT =      0x1b //col:289
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_WATERMARK_CLEAR_BMSK = 0x4000000 //col:290
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_WATERMARK_CLEAR_SHFT = 0x1a //col:291
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_WR_ERR_CLEAR_BMSK =    0x2000000 //col:292
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_WR_ERR_CLEAR_SHFT =    0x19 //col:293
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_RD_ERR_CLEAR_BMSK =    0x1000000 //col:294
HWIO_GENI_M_IRQ_CLEAR_RX_FIFO_RD_ERR_CLEAR_SHFT =    0x18 //col:295
HWIO_GENI_M_IRQ_CLEAR_IO_DATA_ASSERT_CLEAR_BMSK =    0x800000 //col:296
HWIO_GENI_M_IRQ_CLEAR_IO_DATA_ASSERT_CLEAR_SHFT =    0x17 //col:297
HWIO_GENI_M_IRQ_CLEAR_IO_DATA_DEASSERT_CLEAR_BMSK =  0x400000 //col:298
HWIO_GENI_M_IRQ_CLEAR_IO_DATA_DEASSERT_CLEAR_SHFT =  0x16 //col:299
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_5_CLEAR_BMSK =        0x4000 //col:300
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_5_CLEAR_SHFT =        0xe //col:301
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_4_CLEAR_BMSK =        0x2000 //col:302
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_4_CLEAR_SHFT =        0xd //col:303
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_3_CLEAR_BMSK =        0x1000 //col:304
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_3_CLEAR_SHFT =        0xc //col:305
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_2_CLEAR_BMSK =        0x800 //col:306
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_2_CLEAR_SHFT =        0xb //col:307
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_1_CLEAR_BMSK =        0x400 //col:308
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_1_CLEAR_SHFT =        0xa //col:309
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_0_CLEAR_BMSK =        0x200 //col:310
HWIO_GENI_M_IRQ_CLEAR_M_GP_IRQ_0_CLEAR_SHFT =        0x9 //col:311
HWIO_GENI_M_IRQ_CLEAR_M_GP_SYNC_IRQ_0_CLEAR_BMSK =   0x100 //col:312
HWIO_GENI_M_IRQ_CLEAR_M_GP_SYNC_IRQ_0_CLEAR_SHFT =   0x8 //col:313
HWIO_GENI_M_IRQ_CLEAR_M_RX_IRQ_CLEAR_BMSK =          0x80 //col:314
HWIO_GENI_M_IRQ_CLEAR_M_RX_IRQ_CLEAR_SHFT =          0x7 //col:315
HWIO_GENI_M_IRQ_CLEAR_M_TIMESTAMP_CLEAR_BMSK =       0x40 //col:316
HWIO_GENI_M_IRQ_CLEAR_M_TIMESTAMP_CLEAR_SHFT =       0x6 //col:317
HWIO_GENI_M_IRQ_CLEAR_M_CMD_ABORT_CLEAR_BMSK =       0x20 //col:318
HWIO_GENI_M_IRQ_CLEAR_M_CMD_ABORT_CLEAR_SHFT =       0x5 //col:319
HWIO_GENI_M_IRQ_CLEAR_M_CMD_CANCEL_CLEAR_BMSK =      0x10 //col:320
HWIO_GENI_M_IRQ_CLEAR_M_CMD_CANCEL_CLEAR_SHFT =      0x4 //col:321
HWIO_GENI_M_IRQ_CLEAR_M_CMD_FAILURE_CLEAR_BMSK =     0x8 //col:322
HWIO_GENI_M_IRQ_CLEAR_M_CMD_FAILURE_CLEAR_SHFT =     0x3 //col:323
HWIO_GENI_M_IRQ_CLEAR_M_ILLEGAL_CMD_CLEAR_BMSK =     0x4 //col:324
HWIO_GENI_M_IRQ_CLEAR_M_ILLEGAL_CMD_CLEAR_SHFT =     0x2 //col:325
HWIO_GENI_M_IRQ_CLEAR_M_CMD_OVERRUN_CLEAR_BMSK =     0x2 //col:326
HWIO_GENI_M_IRQ_CLEAR_M_CMD_OVERRUN_CLEAR_SHFT =     0x1 //col:327
HWIO_GENI_M_IRQ_CLEAR_M_CMD_DONE_CLEAR_BMSK =        0x1 //col:328
HWIO_GENI_M_IRQ_CLEAR_M_CMD_DONE_CLEAR_SHFT =        0x0 //col:329
HWIO_GENI_S_CMD0_ADDR(x) = ((x) + 0x00000030) //col:330
HWIO_GENI_S_CMD0_OFFS =    (0x00000030) //col:331
HWIO_GENI_S_CMD0_RMSK =    0xf9ffffff //col:332
HWIO_GENI_S_CMD0_IN(x) = in_dword_masked(HWIO_GENI_S_CMD0_ADDR(x), HWIO_GENI_S_CMD0_RMSK) //col:333
HWIO_GENI_S_CMD0_INM(x, m) = in_dword_masked(HWIO_GENI_S_CMD0_ADDR(x), m) //col:335
HWIO_GENI_S_CMD0_OUT(x, v) = out_dword(HWIO_GENI_S_CMD0_ADDR(x), v) //col:337
HWIO_GENI_S_CMD0_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_S_CMD0_ADDR(x), m, v, HWIO_GENI_S_CMD0_IN(x)) //col:339
HWIO_GENI_S_CMD0_OPCODE_BMSK =    0xf8000000 //col:341
HWIO_GENI_S_CMD0_OPCODE_SHFT =    0x1b //col:342
HWIO_GENI_S_CMD0_GNRL_PURP_BMSK = 0x1000000 //col:343
HWIO_GENI_S_CMD0_GNRL_PURP_SHFT = 0x18 //col:344
HWIO_GENI_S_CMD0_PARAM_BMSK =     0xffffff //col:345
HWIO_GENI_S_CMD0_PARAM_SHFT =     0x0 //col:346
HWIO_GENI_S_IRQ_STATUS_ADDR(x) = ((x) + 0x00000040) //col:347
HWIO_GENI_S_IRQ_STATUS_OFFS =    (0x00000040) //col:348
HWIO_GENI_S_IRQ_STATUS_RMSK =    0xfc07f3f //col:349
HWIO_GENI_S_IRQ_STATUS_IN(x) = in_dword_masked(HWIO_GENI_S_IRQ_STATUS_ADDR(x), HWIO_GENI_S_IRQ_STATUS_RMSK) //col:350
HWIO_GENI_S_IRQ_STATUS_INM(x, m) = in_dword_masked(HWIO_GENI_S_IRQ_STATUS_ADDR(x), m) //col:352
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_LAST_BMSK =      0x8000000 //col:354
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_LAST_SHFT =      0x1b //col:355
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_WATERMARK_BMSK = 0x4000000 //col:356
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_WATERMARK_SHFT = 0x1a //col:357
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_WR_ERR_BMSK =    0x2000000 //col:358
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_WR_ERR_SHFT =    0x19 //col:359
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_RD_ERR_BMSK =    0x1000000 //col:360
HWIO_GENI_S_IRQ_STATUS_RX_FIFO_RD_ERR_SHFT =    0x18 //col:361
HWIO_GENI_S_IRQ_STATUS_IO_DATA_ASSERT_BMSK =    0x800000 //col:362
HWIO_GENI_S_IRQ_STATUS_IO_DATA_ASSERT_SHFT =    0x17 //col:363
HWIO_GENI_S_IRQ_STATUS_IO_DATA_DEASSERT_BMSK =  0x400000 //col:364
HWIO_GENI_S_IRQ_STATUS_IO_DATA_DEASSERT_SHFT =  0x16 //col:365
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_5_BMSK =        0x4000 //col:366
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_5_SHFT =        0xe //col:367
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_4_BMSK =        0x2000 //col:368
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_4_SHFT =        0xd //col:369
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_3_BMSK =        0x1000 //col:370
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_3_SHFT =        0xc //col:371
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_2_BMSK =        0x800 //col:372
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_2_SHFT =        0xb //col:373
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_1_BMSK =        0x400 //col:374
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_1_SHFT =        0xa //col:375
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_0_BMSK =        0x200 //col:376
HWIO_GENI_S_IRQ_STATUS_S_GP_IRQ_0_SHFT =        0x9 //col:377
HWIO_GENI_S_IRQ_STATUS_S_GP_SYNC_IRQ_0_BMSK =   0x100 //col:378
HWIO_GENI_S_IRQ_STATUS_S_GP_SYNC_IRQ_0_SHFT =   0x8 //col:379
HWIO_GENI_S_IRQ_STATUS_S_CMD_ABORT_BMSK =       0x20 //col:380
HWIO_GENI_S_IRQ_STATUS_S_CMD_ABORT_SHFT =       0x5 //col:381
HWIO_GENI_S_IRQ_STATUS_S_CMD_CANCEL_BMSK =      0x10 //col:382
HWIO_GENI_S_IRQ_STATUS_S_CMD_CANCEL_SHFT =      0x4 //col:383
HWIO_GENI_S_IRQ_STATUS_S_CMD_FAILURE_BMSK =     0x8 //col:384
HWIO_GENI_S_IRQ_STATUS_S_CMD_FAILURE_SHFT =     0x3 //col:385
HWIO_GENI_S_IRQ_STATUS_S_ILLEGAL_CMD_BMSK =     0x4 //col:386
HWIO_GENI_S_IRQ_STATUS_S_ILLEGAL_CMD_SHFT =     0x2 //col:387
HWIO_GENI_S_IRQ_STATUS_S_CMD_OVERRUN_BMSK =     0x2 //col:388
HWIO_GENI_S_IRQ_STATUS_S_CMD_OVERRUN_SHFT =     0x1 //col:389
HWIO_GENI_S_IRQ_STATUS_S_CMD_DONE_BMSK =        0x1 //col:390
HWIO_GENI_S_IRQ_STATUS_S_CMD_DONE_SHFT =        0x0 //col:391
HWIO_GENI_S_IRQ_ENABLE_ADDR(x) = ((x) + 0x00000044) //col:392
HWIO_GENI_S_IRQ_ENABLE_OFFS =    (0x00000044) //col:393
HWIO_GENI_S_IRQ_ENABLE_RMSK =    0xfc07f3f //col:394
HWIO_GENI_S_IRQ_ENABLE_IN(x) = in_dword_masked(HWIO_GENI_S_IRQ_ENABLE_ADDR(x), HWIO_GENI_S_IRQ_ENABLE_RMSK) //col:395
HWIO_GENI_S_IRQ_ENABLE_INM(x, m) = in_dword_masked(HWIO_GENI_S_IRQ_ENABLE_ADDR(x), m) //col:397
HWIO_GENI_S_IRQ_ENABLE_OUT(x, v) = out_dword(HWIO_GENI_S_IRQ_ENABLE_ADDR(x), v) //col:399
HWIO_GENI_S_IRQ_ENABLE_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_S_IRQ_ENABLE_ADDR(x), m, v, HWIO_GENI_S_IRQ_ENABLE_IN(x)) //col:401
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_LAST_EN_BMSK =      0x8000000 //col:403
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_LAST_EN_SHFT =      0x1b //col:404
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_WATERMARK_EN_BMSK = 0x4000000 //col:405
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_WATERMARK_EN_SHFT = 0x1a //col:406
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_WR_ERR_EN_BMSK =    0x2000000 //col:407
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_WR_ERR_EN_SHFT =    0x19 //col:408
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_RD_ERR_EN_BMSK =    0x1000000 //col:409
HWIO_GENI_S_IRQ_ENABLE_RX_FIFO_RD_ERR_EN_SHFT =    0x18 //col:410
HWIO_GENI_S_IRQ_ENABLE_IO_DATA_ASSERT_EN_BMSK =    0x800000 //col:411
HWIO_GENI_S_IRQ_ENABLE_IO_DATA_ASSERT_EN_SHFT =    0x17 //col:412
HWIO_GENI_S_IRQ_ENABLE_IO_DATA_DEASSERT_EN_BMSK =  0x400000 //col:413
HWIO_GENI_S_IRQ_ENABLE_IO_DATA_DEASSERT_EN_SHFT =  0x16 //col:414
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_5_EN_BMSK =        0x4000 //col:415
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_5_EN_SHFT =        0xe //col:416
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_4_EN_BMSK =        0x2000 //col:417
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_4_EN_SHFT =        0xd //col:418
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_3_EN_BMSK =        0x1000 //col:419
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_3_EN_SHFT =        0xc //col:420
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_2_EN_BMSK =        0x800 //col:421
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_2_EN_SHFT =        0xb //col:422
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_1_EN_BMSK =        0x400 //col:423
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_1_EN_SHFT =        0xa //col:424
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_0_EN_BMSK =        0x200 //col:425
HWIO_GENI_S_IRQ_ENABLE_S_GP_IRQ_0_EN_SHFT =        0x9 //col:426
HWIO_GENI_S_IRQ_ENABLE_S_GP_SYNC_IRQ_0_EN_BMSK =   0x100 //col:427
HWIO_GENI_S_IRQ_ENABLE_S_GP_SYNC_IRQ_0_EN_SHFT =   0x8 //col:428
HWIO_GENI_S_IRQ_ENABLE_S_CMD_ABORT_EN_BMSK =       0x20 //col:429
HWIO_GENI_S_IRQ_ENABLE_S_CMD_ABORT_EN_SHFT =       0x5 //col:430
HWIO_GENI_S_IRQ_ENABLE_S_CMD_CANCEL_EN_BMSK =      0x10 //col:431
HWIO_GENI_S_IRQ_ENABLE_S_CMD_CANCEL_EN_SHFT =      0x4 //col:432
HWIO_GENI_S_IRQ_ENABLE_S_CMD_FAILURE_EN_BMSK =     0x8 //col:433
HWIO_GENI_S_IRQ_ENABLE_S_CMD_FAILURE_EN_SHFT =     0x3 //col:434
HWIO_GENI_S_IRQ_ENABLE_S_ILLEGAL_CMD_EN_BMSK =     0x4 //col:435
HWIO_GENI_S_IRQ_ENABLE_S_ILLEGAL_CMD_EN_SHFT =     0x2 //col:436
HWIO_GENI_S_IRQ_ENABLE_S_CMD_OVERRUN_EN_BMSK =     0x2 //col:437
HWIO_GENI_S_IRQ_ENABLE_S_CMD_OVERRUN_EN_SHFT =     0x1 //col:438
HWIO_GENI_S_IRQ_ENABLE_S_CMD_DONE_EN_BMSK =        0x1 //col:439
HWIO_GENI_S_IRQ_ENABLE_S_CMD_DONE_EN_SHFT =        0x0 //col:440
HWIO_GENI_S_IRQ_CLEAR_ADDR(x) = ((x) + 0x00000048) //col:441
HWIO_GENI_S_IRQ_CLEAR_OFFS =    (0x00000048) //col:442
HWIO_GENI_S_IRQ_CLEAR_RMSK =    0xfc07f3f //col:443
HWIO_GENI_S_IRQ_CLEAR_OUT(x, v) = out_dword(HWIO_GENI_S_IRQ_CLEAR_ADDR(x), v) //col:444
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_LAST_CLEAR_BMSK =      0x8000000 //col:446
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_LAST_CLEAR_SHFT =      0x1b //col:447
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_WATERMARK_CLEAR_BMSK = 0x4000000 //col:448
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_WATERMARK_CLEAR_SHFT = 0x1a //col:449
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_WR_ERR_CLEAR_BMSK =    0x2000000 //col:450
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_WR_ERR_CLEAR_SHFT =    0x19 //col:451
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_RD_ERR_CLEAR_BMSK =    0x1000000 //col:452
HWIO_GENI_S_IRQ_CLEAR_RX_FIFO_RD_ERR_CLEAR_SHFT =    0x18 //col:453
HWIO_GENI_S_IRQ_CLEAR_IO_DATA_ASSERT_CLEAR_BMSK =    0x800000 //col:454
HWIO_GENI_S_IRQ_CLEAR_IO_DATA_ASSERT_CLEAR_SHFT =    0x17 //col:455
HWIO_GENI_S_IRQ_CLEAR_IO_DATA_DEASSERT_CLEAR_BMSK =  0x400000 //col:456
HWIO_GENI_S_IRQ_CLEAR_IO_DATA_DEASSERT_CLEAR_SHFT =  0x16 //col:457
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_5_CLEAR_BMSK =        0x4000 //col:458
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_5_CLEAR_SHFT =        0xe //col:459
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_4_CLEAR_BMSK =        0x2000 //col:460
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_4_CLEAR_SHFT =        0xd //col:461
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_3_CLEAR_BMSK =        0x1000 //col:462
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_3_CLEAR_SHFT =        0xc //col:463
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_2_CLEAR_BMSK =        0x800 //col:464
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_2_CLEAR_SHFT =        0xb //col:465
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_1_CLEAR_BMSK =        0x400 //col:466
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_1_CLEAR_SHFT =        0xa //col:467
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_0_CLEAR_BMSK =        0x200 //col:468
HWIO_GENI_S_IRQ_CLEAR_S_GP_IRQ_0_CLEAR_SHFT =        0x9 //col:469
HWIO_GENI_S_IRQ_CLEAR_S_GP_SYNC_IRQ_0_CLEAR_BMSK =   0x100 //col:470
HWIO_GENI_S_IRQ_CLEAR_S_GP_SYNC_IRQ_0_CLEAR_SHFT =   0x8 //col:471
HWIO_GENI_S_IRQ_CLEAR_S_CMD_ABORT_CLEAR_BMSK =       0x20 //col:472
HWIO_GENI_S_IRQ_CLEAR_S_CMD_ABORT_CLEAR_SHFT =       0x5 //col:473
HWIO_GENI_S_IRQ_CLEAR_S_CMD_CANCEL_CLEAR_BMSK =      0x10 //col:474
HWIO_GENI_S_IRQ_CLEAR_S_CMD_CANCEL_CLEAR_SHFT =      0x4 //col:475
HWIO_GENI_S_IRQ_CLEAR_S_CMD_FAILURE_CLEAR_BMSK =     0x8 //col:476
HWIO_GENI_S_IRQ_CLEAR_S_CMD_FAILURE_CLEAR_SHFT =     0x3 //col:477
HWIO_GENI_S_IRQ_CLEAR_S_ILLEGAL_CMD_CLEAR_BMSK =     0x4 //col:478
HWIO_GENI_S_IRQ_CLEAR_S_ILLEGAL_CMD_CLEAR_SHFT =     0x2 //col:479
HWIO_GENI_S_IRQ_CLEAR_S_CMD_OVERRUN_CLEAR_BMSK =     0x2 //col:480
HWIO_GENI_S_IRQ_CLEAR_S_CMD_OVERRUN_CLEAR_SHFT =     0x1 //col:481
HWIO_GENI_S_IRQ_CLEAR_S_CMD_DONE_CLEAR_BMSK =        0x1 //col:482
HWIO_GENI_S_IRQ_CLEAR_S_CMD_DONE_CLEAR_SHFT =        0x0 //col:483
HWIO_GENI_TX_FIFOn_ADDR(base, = n) ((base) + 0x00000100 + 0x4 * (n)) //col:484
HWIO_GENI_TX_FIFOn_OFFS(base, = n) (0x00000100 + 0x4 * (n)) //col:485
HWIO_GENI_TX_FIFOn_RMSK =          0xffffffff //col:486
HWIO_GENI_TX_FIFOn_MAXn =          15 //col:487
HWIO_GENI_TX_FIFOn_OUTI(base, n, val) = out_dword(HWIO_GENI_TX_FIFOn_ADDR(base, n), val) //col:488
HWIO_GENI_TX_FIFOn_TX_DATA_BMSK = 0xffffffff //col:490
HWIO_GENI_TX_FIFOn_TX_DATA_SHFT = 0x0 //col:491
HWIO_GENI_RX_FIFOn_ADDR(base, = n) ((base) + 0x00000180 + 0x4 * (n)) //col:492
HWIO_GENI_RX_FIFOn_OFFS(base, = n) (0x00000180 + 0x4 * (n)) //col:493
HWIO_GENI_RX_FIFOn_RMSK =          0xffffffff //col:494
HWIO_GENI_RX_FIFOn_MAXn =          15 //col:495
HWIO_GENI_RX_FIFOn_INI(base, n) = in_dword_masked(HWIO_GENI_RX_FIFOn_ADDR(base, n), HWIO_GENI_RX_FIFOn_RMSK) //col:496
HWIO_GENI_RX_FIFOn_INMI(base, n, mask) = in_dword_masked(HWIO_GENI_RX_FIFOn_ADDR(base, n), mask) //col:498
HWIO_GENI_RX_FIFOn_RX_DATA_BMSK = 0xffffffff //col:500
HWIO_GENI_RX_FIFOn_RX_DATA_SHFT = 0x0 //col:501
HWIO_GENI_RX_FIFO_STATUS_ADDR(x) = ((x) + 0x00000204) //col:502
HWIO_GENI_RX_FIFO_STATUS_OFFS =    (0x00000204) //col:503
HWIO_GENI_RX_FIFO_STATUS_RMSK =    0xffffffff //col:504
HWIO_GENI_RX_FIFO_STATUS_IN(x) = in_dword_masked(HWIO_GENI_RX_FIFO_STATUS_ADDR(x), HWIO_GENI_RX_FIFO_STATUS_RMSK) //col:505
HWIO_GENI_RX_FIFO_STATUS_INM(x, m) = in_dword_masked(HWIO_GENI_RX_FIFO_STATUS_ADDR(x), m) //col:507
HWIO_GENI_RX_FIFO_STATUS_RX_LAST_BMSK =            0x80000000 //col:509
HWIO_GENI_RX_FIFO_STATUS_RX_LAST_SHFT =            0x1f //col:510
HWIO_GENI_RX_FIFO_STATUS_RX_LAST_BYTE_VALID_BMSK = 0x70000000 //col:511
HWIO_GENI_RX_FIFO_STATUS_RX_LAST_BYTE_VALID_SHFT = 0x1c //col:512
HWIO_GENI_RX_FIFO_STATUS_RX_AFIFO_WC_BMSK =        0xe000000 //col:513
HWIO_GENI_RX_FIFO_STATUS_RX_AFIFO_WC_SHFT =        0x19 //col:514
HWIO_GENI_RX_FIFO_STATUS_RX_FIFO_WC_BMSK =         0x1ffffff //col:515
HWIO_GENI_RX_FIFO_STATUS_RX_FIFO_WC_SHFT =         0x0 //col:516
HWIO_GENI_TX_WATERMARK_REG_ADDR(x) = ((x) + 0x0000020c) //col:517
HWIO_GENI_TX_WATERMARK_REG_OFFS =    (0x0000020c) //col:518
HWIO_GENI_TX_WATERMARK_REG_RMSK =    0x3f //col:519
HWIO_GENI_TX_WATERMARK_REG_IN(x) = in_dword_masked(HWIO_GENI_TX_WATERMARK_REG_ADDR(x), HWIO_GENI_TX_WATERMARK_REG_RMSK) //col:520
HWIO_GENI_TX_WATERMARK_REG_INM(x, m) = in_dword_masked(HWIO_GENI_TX_WATERMARK_REG_ADDR(x), m) //col:522
HWIO_GENI_TX_WATERMARK_REG_OUT(x, v) = out_dword(HWIO_GENI_TX_WATERMARK_REG_ADDR(x), v) //col:524
HWIO_GENI_TX_WATERMARK_REG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_TX_WATERMARK_REG_ADDR(x), m, v, HWIO_GENI_TX_WATERMARK_REG_IN(x)) //col:526
HWIO_GENI_TX_WATERMARK_REG_TX_WATERMARK_BMSK = 0x3f //col:528
HWIO_GENI_TX_WATERMARK_REG_TX_WATERMARK_SHFT = 0x0 //col:529
HWIO_GENI_RX_WATERMARK_REG_ADDR(x) = ((x) + 0x00000210) //col:530
HWIO_GENI_RX_WATERMARK_REG_OFFS =    (0x00000210) //col:531
HWIO_GENI_RX_WATERMARK_REG_RMSK =    0x3f //col:532
HWIO_GENI_RX_WATERMARK_REG_IN(x) = in_dword_masked(HWIO_GENI_RX_WATERMARK_REG_ADDR(x), HWIO_GENI_RX_WATERMARK_REG_RMSK) //col:533
HWIO_GENI_RX_WATERMARK_REG_INM(x, m) = in_dword_masked(HWIO_GENI_RX_WATERMARK_REG_ADDR(x), m) //col:535
HWIO_GENI_RX_WATERMARK_REG_OUT(x, v) = out_dword(HWIO_GENI_RX_WATERMARK_REG_ADDR(x), v) //col:537
HWIO_GENI_RX_WATERMARK_REG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_RX_WATERMARK_REG_ADDR(x), m, v, HWIO_GENI_RX_WATERMARK_REG_IN(x)) //col:539
HWIO_GENI_RX_WATERMARK_REG_RX_WATERMARK_BMSK = 0x3f //col:541
HWIO_GENI_RX_WATERMARK_REG_RX_WATERMARK_SHFT = 0x0 //col:542
HWIO_GENI_RX_RFR_WATERMARK_REG_ADDR(x) = ((x) + 0x00000214) //col:543
HWIO_GENI_RX_RFR_WATERMARK_REG_OFFS =    (0x00000214) //col:544
HWIO_GENI_RX_RFR_WATERMARK_REG_RMSK =    0x3f //col:545
HWIO_GENI_RX_RFR_WATERMARK_REG_IN(x) = in_dword_masked(HWIO_GENI_RX_RFR_WATERMARK_REG_ADDR(x), HWIO_GENI_RX_RFR_WATERMARK_REG_RMSK) //col:546
HWIO_GENI_RX_RFR_WATERMARK_REG_INM(x, m) = in_dword_masked(HWIO_GENI_RX_RFR_WATERMARK_REG_ADDR(x), m) //col:548
HWIO_GENI_RX_RFR_WATERMARK_REG_OUT(x, v) = out_dword(HWIO_GENI_RX_RFR_WATERMARK_REG_ADDR(x), v) //col:550
HWIO_GENI_RX_RFR_WATERMARK_REG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_RX_RFR_WATERMARK_REG_ADDR(x), m, v, HWIO_GENI_RX_RFR_WATERMARK_REG_IN(x)) //col:552
HWIO_GENI_RX_RFR_WATERMARK_REG_RX_RFR_WATERMARK_BMSK = 0x3f //col:554
HWIO_GENI_RX_RFR_WATERMARK_REG_RX_RFR_WATERMARK_SHFT = 0x0 //col:555
HWIO_UART_TX_TRANS_CFG_ADDR(x) = ((x) + 0x0000015c) //col:556
HWIO_UART_TX_TRANS_CFG_OFFS =    (0x0000015c) //col:557
HWIO_UART_TX_TRANS_CFG_RMSK =    0x3f //col:558
HWIO_UART_TX_TRANS_CFG_IN(x) = in_dword_masked(HWIO_UART_TX_TRANS_CFG_ADDR(x), HWIO_UART_TX_TRANS_CFG_RMSK) //col:559
HWIO_UART_TX_TRANS_CFG_INM(x, m) = in_dword_masked(HWIO_UART_TX_TRANS_CFG_ADDR(x), m) //col:561
HWIO_UART_TX_TRANS_CFG_OUT(x, v) = out_dword(HWIO_UART_TX_TRANS_CFG_ADDR(x), v) //col:563
HWIO_UART_TX_TRANS_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_TX_TRANS_CFG_ADDR(x), m, v, HWIO_UART_TX_TRANS_CFG_IN(x)) //col:565
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG3_BMSK = 0x20 //col:567
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG3_SHFT = 0x5 //col:568
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG2_BMSK = 0x10 //col:569
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG2_SHFT = 0x4 //col:570
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG1_BMSK = 0x8 //col:571
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG1_SHFT = 0x3 //col:572
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG_BMSK =  0x4 //col:573
HWIO_UART_TX_TRANS_CFG_UART_NOT_USED_CFG_SHFT =  0x2 //col:574
HWIO_UART_TX_TRANS_CFG_UART_CTS_MASK_BMSK =      0x2 //col:575
HWIO_UART_TX_TRANS_CFG_UART_CTS_MASK_SHFT =      0x1 //col:576
HWIO_UART_TX_TRANS_CFG_UART_PARITY_EN_BMSK =     0x1 //col:577
HWIO_UART_TX_TRANS_CFG_UART_PARITY_EN_SHFT =     0x0 //col:578
HWIO_UART_TX_WORD_LEN_ADDR(x) = ((x) + 0x00000168) //col:579
HWIO_UART_TX_WORD_LEN_OFFS =    (0x00000168) //col:580
HWIO_UART_TX_WORD_LEN_RMSK =    0x3ff //col:581
HWIO_UART_TX_WORD_LEN_IN(x) = in_dword_masked(HWIO_UART_TX_WORD_LEN_ADDR(x), HWIO_UART_TX_WORD_LEN_RMSK) //col:582
HWIO_UART_TX_WORD_LEN_INM(x, m) = in_dword_masked(HWIO_UART_TX_WORD_LEN_ADDR(x), m) //col:584
HWIO_UART_TX_WORD_LEN_OUT(x, v) = out_dword(HWIO_UART_TX_WORD_LEN_ADDR(x), v) //col:586
HWIO_UART_TX_WORD_LEN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_TX_WORD_LEN_ADDR(x), m, v, HWIO_UART_TX_WORD_LEN_IN(x)) //col:588
HWIO_UART_TX_WORD_LEN_UART_TX_WORD_LEN_BMSK = 0x3ff //col:590
HWIO_UART_TX_WORD_LEN_UART_TX_WORD_LEN_SHFT = 0x0 //col:591
HWIO_UART_TX_STOP_BIT_LEN_ADDR(x) = ((x) + 0x0000016c) //col:592
HWIO_UART_TX_STOP_BIT_LEN_OFFS =    (0x0000016c) //col:593
HWIO_UART_TX_STOP_BIT_LEN_RMSK =    0xffffff //col:594
HWIO_UART_TX_STOP_BIT_LEN_IN(x) = in_dword_masked(HWIO_UART_TX_STOP_BIT_LEN_ADDR(x), HWIO_UART_TX_STOP_BIT_LEN_RMSK) //col:595
HWIO_UART_TX_STOP_BIT_LEN_INM(x, m) = in_dword_masked(HWIO_UART_TX_STOP_BIT_LEN_ADDR(x), m) //col:597
HWIO_UART_TX_STOP_BIT_LEN_OUT(x, v) = out_dword(HWIO_UART_TX_STOP_BIT_LEN_ADDR(x), v) //col:599
HWIO_UART_TX_STOP_BIT_LEN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_TX_STOP_BIT_LEN_ADDR(x), m, v, HWIO_UART_TX_STOP_BIT_LEN_IN(x)) //col:601
HWIO_UART_TX_STOP_BIT_LEN_UART_TX_STOP_BIT_LEN_BMSK = 0xffffff //col:603
HWIO_UART_TX_STOP_BIT_LEN_UART_TX_STOP_BIT_LEN_SHFT = 0x0 //col:604
HWIO_UART_TX_TRANS_LEN_ADDR(x) = ((x) + 0x00000170) //col:605
HWIO_UART_TX_TRANS_LEN_OFFS =    (0x00000170) //col:606
HWIO_UART_TX_TRANS_LEN_RMSK =    0xffffff //col:607
HWIO_UART_TX_TRANS_LEN_IN(x) = in_dword_masked(HWIO_UART_TX_TRANS_LEN_ADDR(x), HWIO_UART_TX_TRANS_LEN_RMSK) //col:608
HWIO_UART_TX_TRANS_LEN_INM(x, m) = in_dword_masked(HWIO_UART_TX_TRANS_LEN_ADDR(x), m) //col:610
HWIO_UART_TX_TRANS_LEN_OUT(x, v) = out_dword(HWIO_UART_TX_TRANS_LEN_ADDR(x), v) //col:612
HWIO_UART_TX_TRANS_LEN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_TX_TRANS_LEN_ADDR(x), m, v, HWIO_UART_TX_TRANS_LEN_IN(x)) //col:614
HWIO_UART_TX_TRANS_LEN_UART_TX_TRANS_LEN_BMSK = 0xffffff //col:616
HWIO_UART_TX_TRANS_LEN_UART_TX_TRANS_LEN_SHFT = 0x0 //col:617
HWIO_UART_RX_TRANS_CFG_ADDR(x) = ((x) + 0x00000180) //col:618
HWIO_UART_RX_TRANS_CFG_OFFS =    (0x00000180) //col:619
HWIO_UART_RX_TRANS_CFG_RMSK =    0x3f //col:620
HWIO_UART_RX_TRANS_CFG_IN(x) = in_dword_masked(HWIO_UART_RX_TRANS_CFG_ADDR(x), HWIO_UART_RX_TRANS_CFG_RMSK) //col:621
HWIO_UART_RX_TRANS_CFG_INM(x, m) = in_dword_masked(HWIO_UART_RX_TRANS_CFG_ADDR(x), m) //col:623
HWIO_UART_RX_TRANS_CFG_OUT(x, v) = out_dword(HWIO_UART_RX_TRANS_CFG_ADDR(x), v) //col:625
HWIO_UART_RX_TRANS_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_RX_TRANS_CFG_ADDR(x), m, v, HWIO_UART_RX_TRANS_CFG_IN(x)) //col:627
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG3_BMSK =        0x20 //col:629
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG3_SHFT =        0x5 //col:630
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG2_BMSK =        0x10 //col:631
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG2_SHFT =        0x4 //col:632
HWIO_UART_RX_TRANS_CFG_UART_PARITY_EN_BMSK =            0x8 //col:633
HWIO_UART_RX_TRANS_CFG_UART_PARITY_EN_SHFT =            0x3 //col:634
HWIO_UART_RX_TRANS_CFG_UART_RX_INSERT_STATUS_BIT_BMSK = 0x4 //col:635
HWIO_UART_RX_TRANS_CFG_UART_RX_INSERT_STATUS_BIT_SHFT = 0x2 //col:636
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG1_BMSK =        0x2 //col:637
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG1_SHFT =        0x1 //col:638
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG0_BMSK =        0x1 //col:639
HWIO_UART_RX_TRANS_CFG_UART_NOT_USED_CFG0_SHFT =        0x0 //col:640
HWIO_UART_RX_WORD_LEN_ADDR(x) = ((x) + 0x0000018c) //col:641
HWIO_UART_RX_WORD_LEN_OFFS =    (0x0000018c) //col:642
HWIO_UART_RX_WORD_LEN_RMSK =    0x3ff //col:643
HWIO_UART_RX_WORD_LEN_IN(x) = in_dword_masked(HWIO_UART_RX_WORD_LEN_ADDR(x), HWIO_UART_RX_WORD_LEN_RMSK) //col:644
HWIO_UART_RX_WORD_LEN_INM(x, m) = in_dword_masked(HWIO_UART_RX_WORD_LEN_ADDR(x), m) //col:646
HWIO_UART_RX_WORD_LEN_OUT(x, v) = out_dword(HWIO_UART_RX_WORD_LEN_ADDR(x), v) //col:648
HWIO_UART_RX_WORD_LEN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_RX_WORD_LEN_ADDR(x), m, v, HWIO_UART_RX_WORD_LEN_IN(x)) //col:650
HWIO_UART_RX_WORD_LEN_UART_RX_WORD_LEN_BMSK = 0x3ff //col:652
HWIO_UART_RX_WORD_LEN_UART_RX_WORD_LEN_SHFT = 0x0 //col:653
HWIO_UART_RX_STALE_CNT_ADDR(x) = ((x) + 0x00000194) //col:654
HWIO_UART_RX_STALE_CNT_OFFS =    (0x00000194) //col:655
HWIO_UART_RX_STALE_CNT_RMSK =    0xffffff //col:656
HWIO_UART_RX_STALE_CNT_IN(x) = in_dword_masked(HWIO_UART_RX_STALE_CNT_ADDR(x), HWIO_UART_RX_STALE_CNT_RMSK) //col:657
HWIO_UART_RX_STALE_CNT_INM(x, m) = in_dword_masked(HWIO_UART_RX_STALE_CNT_ADDR(x), m) //col:659
HWIO_UART_RX_STALE_CNT_OUT(x, v) = out_dword(HWIO_UART_RX_STALE_CNT_ADDR(x), v) //col:661
HWIO_UART_RX_STALE_CNT_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_RX_STALE_CNT_ADDR(x), m, v, HWIO_UART_RX_STALE_CNT_IN(x)) //col:663
HWIO_UART_RX_STALE_CNT_UART_RX_STALE_CNT_BMSK = 0xffffff //col:665
HWIO_UART_RX_STALE_CNT_UART_RX_STALE_CNT_SHFT = 0x0 //col:666
HWIO_UART_TX_PARITY_CFG_ADDR(x) = ((x) + 0x000001a4) //col:667
HWIO_UART_TX_PARITY_CFG_OFFS =    (0x000001a4) //col:668
HWIO_UART_TX_PARITY_CFG_RMSK =    0x1f //col:669
HWIO_UART_TX_PARITY_CFG_IN(x) = in_dword_masked(HWIO_UART_TX_PARITY_CFG_ADDR(x), HWIO_UART_TX_PARITY_CFG_RMSK) //col:670
HWIO_UART_TX_PARITY_CFG_INM(x, m) = in_dword_masked(HWIO_UART_TX_PARITY_CFG_ADDR(x), m) //col:672
HWIO_UART_TX_PARITY_CFG_OUT(x, v) = out_dword(HWIO_UART_TX_PARITY_CFG_ADDR(x), v) //col:674
HWIO_UART_TX_PARITY_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_TX_PARITY_CFG_ADDR(x), m, v, HWIO_UART_TX_PARITY_CFG_IN(x)) //col:676
HWIO_UART_TX_PARITY_CFG_UART_NOT_USED_CFG1_BMSK = 0x10 //col:678
HWIO_UART_TX_PARITY_CFG_UART_NOT_USED_CFG1_SHFT = 0x4 //col:679
HWIO_UART_TX_PARITY_CFG_UART_NOT_USED_CFG0_BMSK = 0x8 //col:680
HWIO_UART_TX_PARITY_CFG_UART_NOT_USED_CFG0_SHFT = 0x3 //col:681
HWIO_UART_TX_PARITY_CFG_TX_PAR_MODE_BMSK =        0x6 //col:682
HWIO_UART_TX_PARITY_CFG_TX_PAR_MODE_SHFT =        0x1 //col:683
HWIO_UART_TX_PARITY_CFG_TX_PAR_CALC_EN_BMSK =     0x1 //col:684
HWIO_UART_TX_PARITY_CFG_TX_PAR_CALC_EN_SHFT =     0x0 //col:685
HWIO_UART_RX_PARITY_CFG_ADDR(x) = ((x) + 0x000001a8) //col:686
HWIO_UART_RX_PARITY_CFG_OFFS =    (0x000001a8) //col:687
HWIO_UART_RX_PARITY_CFG_RMSK =    0x1f //col:688
HWIO_UART_RX_PARITY_CFG_IN(x) = in_dword_masked(HWIO_UART_RX_PARITY_CFG_ADDR(x), HWIO_UART_RX_PARITY_CFG_RMSK) //col:689
HWIO_UART_RX_PARITY_CFG_INM(x, m) = in_dword_masked(HWIO_UART_RX_PARITY_CFG_ADDR(x), m) //col:691
HWIO_UART_RX_PARITY_CFG_OUT(x, v) = out_dword(HWIO_UART_RX_PARITY_CFG_ADDR(x), v) //col:693
HWIO_UART_RX_PARITY_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_UART_RX_PARITY_CFG_ADDR(x), m, v, HWIO_UART_RX_PARITY_CFG_IN(x)) //col:695
HWIO_UART_RX_PARITY_CFG_UART_NOT_USED_CFG1_BMSK = 0x10 //col:697
HWIO_UART_RX_PARITY_CFG_UART_NOT_USED_CFG1_SHFT = 0x4 //col:698
HWIO_UART_RX_PARITY_CFG_UART_NOT_USED_CFG0_BMSK = 0x8 //col:699
HWIO_UART_RX_PARITY_CFG_UART_NOT_USED_CFG0_SHFT = 0x3 //col:700
HWIO_UART_RX_PARITY_CFG_RX_PAR_MODE_BMSK =        0x6 //col:701
HWIO_UART_RX_PARITY_CFG_RX_PAR_MODE_SHFT =        0x1 //col:702
HWIO_UART_RX_PARITY_CFG_RX_PAR_CALC_EN_BMSK =     0x1 //col:703
HWIO_UART_RX_PARITY_CFG_RX_PAR_CALC_EN_SHFT =     0x0 //col:704
HWIO_GENI_DMA_MODE_EN_ADDR(x) = ((x) + 0x00000158) //col:705
HWIO_GENI_DMA_MODE_EN_OFFS =    (0x00000158) //col:706
HWIO_GENI_DMA_MODE_EN_RMSK =    0x1 //col:707
HWIO_GENI_DMA_MODE_EN_IN(x) = in_dword_masked(HWIO_GENI_DMA_MODE_EN_ADDR(x), HWIO_GENI_DMA_MODE_EN_RMSK) //col:708
HWIO_GENI_DMA_MODE_EN_INM(x, m) = in_dword_masked(HWIO_GENI_DMA_MODE_EN_ADDR(x), m) //col:710
HWIO_GENI_DMA_MODE_EN_OUT(x, v) = out_dword(HWIO_GENI_DMA_MODE_EN_ADDR(x), v) //col:712
HWIO_GENI_DMA_MODE_EN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_GENI_DMA_MODE_EN_ADDR(x), m, v, HWIO_GENI_DMA_MODE_EN_IN(x)) //col:714
HWIO_GENI_DMA_MODE_EN_GENI_DMA_MODE_EN_BMSK = 0x1 //col:716
HWIO_GENI_DMA_MODE_EN_GENI_DMA_MODE_EN_SHFT = 0x0 //col:717
HWIO_SE_IRQ_EN_ADDR(x) = ((x) + 0x0000021c) //col:718
HWIO_SE_IRQ_EN_OFFS =    (0x0000021c) //col:719
HWIO_SE_IRQ_EN_RMSK =    0xf //col:720
HWIO_SE_IRQ_EN_IN(x) = in_dword_masked(HWIO_SE_IRQ_EN_ADDR(x), HWIO_SE_IRQ_EN_RMSK) //col:721
HWIO_SE_IRQ_EN_INM(x, m) = in_dword_masked(HWIO_SE_IRQ_EN_ADDR(x), m) //col:723
HWIO_SE_IRQ_EN_OUT(x, v) = out_dword(HWIO_SE_IRQ_EN_ADDR(x), v) //col:725
HWIO_SE_IRQ_EN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_SE_IRQ_EN_ADDR(x), m, v, HWIO_SE_IRQ_EN_IN(x)) //col:727
HWIO_SE_IRQ_EN_GENI_S_IRQ_EN_BMSK = 0x8 //col:729
HWIO_SE_IRQ_EN_GENI_S_IRQ_EN_SHFT = 0x3 //col:730
HWIO_SE_IRQ_EN_GENI_M_IRQ_EN_BMSK = 0x4 //col:731
HWIO_SE_IRQ_EN_GENI_M_IRQ_EN_SHFT = 0x2 //col:732
HWIO_SE_IRQ_EN_DMA_TX_IRQ_EN_BMSK = 0x2 //col:733
HWIO_SE_IRQ_EN_DMA_TX_IRQ_EN_SHFT = 0x1 //col:734
HWIO_SE_IRQ_EN_DMA_RX_IRQ_EN_BMSK = 0x1 //col:735
HWIO_SE_IRQ_EN_DMA_RX_IRQ_EN_SHFT = 0x0 //col:736
HWIO_SE_HW_PARAM_0_ADDR(x) = ((x) + 0x00000224) //col:737
HWIO_SE_HW_PARAM_0_OFFS =    (0x00000224) //col:738
HWIO_SE_HW_PARAM_0_RMSK =    0x3f3f79ff //col:739
HWIO_SE_HW_PARAM_0_IN(x) = in_dword_masked(HWIO_SE_HW_PARAM_0_ADDR(x), HWIO_SE_HW_PARAM_0_RMSK) //col:740
HWIO_SE_HW_PARAM_0_INM(x, m) = in_dword_masked(HWIO_SE_HW_PARAM_0_ADDR(x), m) //col:742
HWIO_SE_HW_PARAM_0_TX_FIFO_WIDTH_BMSK =       0x3f000000 //col:744
HWIO_SE_HW_PARAM_0_TX_FIFO_WIDTH_SHFT =       0x18 //col:745
HWIO_SE_HW_PARAM_0_TX_FIFO_DEPTH_BMSK =       0x3f0000 //col:746
HWIO_SE_HW_PARAM_0_TX_FIFO_DEPTH_SHFT =       0x10 //col:747
HWIO_SE_HW_PARAM_0_TX_ASYNC_FIFO_DEPTH_BMSK = 0x7000 //col:748
HWIO_SE_HW_PARAM_0_TX_ASYNC_FIFO_DEPTH_SHFT = 0xc //col:749
HWIO_SE_HW_PARAM_0_TX_FIFO_EN_BMSK =          0x800 //col:750
HWIO_SE_HW_PARAM_0_TX_FIFO_EN_SHFT =          0xb //col:751
HWIO_SE_HW_PARAM_0_GEN_I3C_BMSK =             0x100 //col:752
HWIO_SE_HW_PARAM_0_GEN_I3C_SHFT =             0x8 //col:753
HWIO_SE_HW_PARAM_0_GEN_PROG_ROM_BMSK =        0x80 //col:754
HWIO_SE_HW_PARAM_0_GEN_PROG_ROM_SHFT =        0x7 //col:755
HWIO_SE_HW_PARAM_0_GEN_SCND_SEQUENCER_BMSK =  0x40 //col:756
HWIO_SE_HW_PARAM_0_GEN_SCND_SEQUENCER_SHFT =  0x6 //col:757
HWIO_SE_HW_PARAM_0_AHB_M_ADDR_W_BMSK =        0x3f //col:758
HWIO_SE_HW_PARAM_0_AHB_M_ADDR_W_SHFT =        0x0 //col:759
HWIO_SE_HW_PARAM_1_ADDR(x) = ((x) + 0x00000228) //col:760
HWIO_SE_HW_PARAM_1_OFFS =    (0x00000228) //col:761
HWIO_SE_HW_PARAM_1_RMSK =    0x3f3f7fff //col:762
HWIO_SE_HW_PARAM_1_IN(x) = in_dword_masked(HWIO_SE_HW_PARAM_1_ADDR(x), HWIO_SE_HW_PARAM_1_RMSK) //col:763
HWIO_SE_HW_PARAM_1_INM(x, m) = in_dword_masked(HWIO_SE_HW_PARAM_1_ADDR(x), m) //col:765
HWIO_SE_HW_PARAM_1_RX_FIFO_WIDTH_BMSK =        0x3f000000 //col:767
HWIO_SE_HW_PARAM_1_RX_FIFO_WIDTH_SHFT =        0x18 //col:768
HWIO_SE_HW_PARAM_1_RX_FIFO_DEPTH_BMSK =        0x3f0000 //col:769
HWIO_SE_HW_PARAM_1_RX_FIFO_DEPTH_SHFT =        0x10 //col:770
HWIO_SE_HW_PARAM_1_RX_ASYNC_FIFO_DEPTH_BMSK =  0x7000 //col:771
HWIO_SE_HW_PARAM_1_RX_ASYNC_FIFO_DEPTH_SHFT =  0xc //col:772
HWIO_SE_HW_PARAM_1_RX_FIFO_EN_BMSK =           0x800 //col:773
HWIO_SE_HW_PARAM_1_RX_FIFO_EN_SHFT =           0xb //col:774
HWIO_SE_HW_PARAM_1_PROG_RAM_MEM_TYPE_BMSK =    0x600 //col:775
HWIO_SE_HW_PARAM_1_PROG_RAM_MEM_TYPE_SHFT =    0x9 //col:776
HWIO_SE_HW_PARAM_1_PROG_REG_ARRAY_DEPTH_BMSK = 0x1ff //col:777
HWIO_SE_HW_PARAM_1_PROG_REG_ARRAY_DEPTH_SHFT = 0x0 //col:778
HWIO_DMA_GENERAL_CFG_ADDR(x) = ((x) + 0x00000230) //col:779
HWIO_DMA_GENERAL_CFG_OFFS =    (0x00000230) //col:780
HWIO_DMA_GENERAL_CFG_RMSK =    0x1ff //col:781
HWIO_DMA_GENERAL_CFG_IN(x) = in_dword_masked(HWIO_DMA_GENERAL_CFG_ADDR(x), HWIO_DMA_GENERAL_CFG_RMSK) //col:782
HWIO_DMA_GENERAL_CFG_INM(x, m) = in_dword_masked(HWIO_DMA_GENERAL_CFG_ADDR(x), m) //col:784
HWIO_DMA_GENERAL_CFG_OUT(x, v) = out_dword(HWIO_DMA_GENERAL_CFG_ADDR(x), v) //col:786
HWIO_DMA_GENERAL_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_DMA_GENERAL_CFG_ADDR(x), m, v, HWIO_DMA_GENERAL_CFG_IN(x)) //col:788
HWIO_DMA_GENERAL_CFG_RX_DMA_IRQ_DELAY_BMSK =       0x1c0 //col:790
HWIO_DMA_GENERAL_CFG_RX_DMA_IRQ_DELAY_SHFT =       0x6 //col:791
HWIO_DMA_GENERAL_CFG_TX_DMA_ZERO_PADDING_EN_BMSK = 0x20 //col:792
HWIO_DMA_GENERAL_CFG_TX_DMA_ZERO_PADDING_EN_SHFT = 0x5 //col:793
HWIO_DMA_GENERAL_CFG_AHB_SEC_SLV_CLK_CGC_ON_BMSK = 0x8 //col:794
HWIO_DMA_GENERAL_CFG_AHB_SEC_SLV_CLK_CGC_ON_SHFT = 0x3 //col:795
HWIO_DMA_GENERAL_CFG_DMA_AHB_SLV_CLK_CGC_ON_BMSK = 0x4 //col:796
HWIO_DMA_GENERAL_CFG_DMA_AHB_SLV_CLK_CGC_ON_SHFT = 0x2 //col:797
HWIO_DMA_GENERAL_CFG_DMA_TX_CLK_CGC_ON_BMSK =      0x2 //col:798
HWIO_DMA_GENERAL_CFG_DMA_TX_CLK_CGC_ON_SHFT =      0x1 //col:799
HWIO_DMA_GENERAL_CFG_DMA_RX_CLK_CGC_ON_BMSK =      0x1 //col:800
HWIO_DMA_GENERAL_CFG_DMA_RX_CLK_CGC_ON_SHFT =      0x0 //col:801
HWIO_SE_GSI_EVENT_EN_ADDR(x) = ((x) + 0x00000218) //col:802
HWIO_SE_GSI_EVENT_EN_OFFS =    (0x00000218) //col:803
HWIO_SE_GSI_EVENT_EN_RMSK =    0xf //col:804
HWIO_SE_GSI_EVENT_EN_IN(x) = in_dword_masked(HWIO_SE_GSI_EVENT_EN_ADDR(x), HWIO_SE_GSI_EVENT_EN_RMSK) //col:805
HWIO_SE_GSI_EVENT_EN_INM(x, m) = in_dword_masked(HWIO_SE_GSI_EVENT_EN_ADDR(x), m) //col:807
HWIO_SE_GSI_EVENT_EN_OUT(x, v) = out_dword(HWIO_SE_GSI_EVENT_EN_ADDR(x), v) //col:809
HWIO_SE_GSI_EVENT_EN_OUTM(x, m, v) = out_dword_masked_ns(HWIO_SE_GSI_EVENT_EN_ADDR(x), m, v, HWIO_SE_GSI_EVENT_EN_IN(x)) //col:811
HWIO_SE_GSI_EVENT_EN_GENI_S_EVENT_EN_BMSK = 0x8 //col:813
HWIO_SE_GSI_EVENT_EN_GENI_S_EVENT_EN_SHFT = 0x3 //col:814
HWIO_SE_GSI_EVENT_EN_GENI_M_EVENT_EN_BMSK = 0x4 //col:815
HWIO_SE_GSI_EVENT_EN_GENI_M_EVENT_EN_SHFT = 0x2 //col:816
HWIO_SE_GSI_EVENT_EN_DMA_TX_EVENT_EN_BMSK = 0x2 //col:817
HWIO_SE_GSI_EVENT_EN_DMA_TX_EVENT_EN_SHFT = 0x1 //col:818
HWIO_SE_GSI_EVENT_EN_DMA_RX_EVENT_EN_BMSK = 0x1 //col:819
HWIO_QUPV3_SE_AHB_M_CFG_ADDR(x) = ((x) + 0x00000118) //col:820
HWIO_QUPV3_SE_AHB_M_CFG_OFFS =    (0x00000118) //col:821
HWIO_QUPV3_SE_AHB_M_CFG_RMSK =    0x1 //col:822
HWIO_QUPV3_SE_AHB_M_CFG_IN(x) = in_dword_masked(HWIO_QUPV3_SE_AHB_M_CFG_ADDR(x), HWIO_QUPV3_SE_AHB_M_CFG_RMSK) //col:823
HWIO_QUPV3_SE_AHB_M_CFG_INM(x, m) = in_dword_masked(HWIO_QUPV3_SE_AHB_M_CFG_ADDR(x), m) //col:825
HWIO_QUPV3_SE_AHB_M_CFG_OUT(x, v) = out_dword(HWIO_QUPV3_SE_AHB_M_CFG_ADDR(x), v) //col:827
HWIO_QUPV3_SE_AHB_M_CFG_OUTM(x, m, v) = out_dword_masked_ns(HWIO_QUPV3_SE_AHB_M_CFG_ADDR(x), m, v, HWIO_QUPV3_SE_AHB_M_CFG_IN(x)) //col:829
HWIO_QUPV3_SE_AHB_M_CFG_AHB_M_CLK_CGC_ON_BMSK = 0x1 //col:831
HWIO_QUPV3_SE_AHB_M_CFG_AHB_M_CLK_CGC_ON_SHFT = 0x0 //col:832
MAX_RX_FIFO_SIZE = 128 //col:833
MAX_RETRIES =      0x100000 //col:834
UART_DM_READ_REG(addr, offset) = UartHardwareAccess.ReadRegister32((ULONG *)((PUCHAR)addr + offset)) //col:835
UART_DM_WRITE_REG(addr, offset, val) = UartHardwareAccess.WriteRegister32((ULONG *)((PUCHAR)addr + offset), val) //col:837
)

type FIFO_TX_BLOCK struct{
UCHAR __declspec(align(32))
AvailableBytes ULONG
PtrToFifoBuffer PUCHAR
}



type (
Sdm845 interface{
SDM845SetBaud()(ok bool)//col:52
SDM845InitializePort()(ok bool)//col:69
SDM845SetBaud()(ok bool)//col:126
SDM845GetByte()(ok bool)//col:199
SDM845PutByte()(ok bool)//col:226
SDM845RxReady()(ok bool)//col:267
}
)

func NewSdm845() { return & sdm845{} }

func (s *sdm845)SDM845SetBaud()(ok bool){//col:52
/*SDM845SetBaud(
    _Inout_ PCPPORT Port,
    ULONG           Rate);
BOOLEAN
SDM845ReinitializePort(
    _Inout_ PCPPORT Port)
{
    ULONG ConfigMask;
    ULONG Retries;
    Retries = 0;
    while ((UART_DM_READ_REG(Port->Address + GENI4_CFG, HWIO_GENI_STATUS_OFFS) &
            HWIO_GENI_STATUS_M_GENI_CMD_ACTIVE_BMSK))
    {
        Retries += 1;
        if (Retries >= MAX_RETRIES)
        {
            return FALSE;
        }
    }
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG, HWIO_GENI_DFS_IF_CFG_OFFS, 0x0);
    ConfigMask = (HWIO_DMA_GENERAL_CFG_AHB_SEC_SLV_CLK_CGC_ON_BMSK << HWIO_DMA_GENERAL_CFG_AHB_SEC_SLV_CLK_CGC_ON_SHFT) |
                 (HWIO_DMA_GENERAL_CFG_DMA_AHB_SLV_CLK_CGC_ON_BMSK << HWIO_DMA_GENERAL_CFG_DMA_AHB_SLV_CLK_CGC_ON_SHFT) |
                 (HWIO_DMA_GENERAL_CFG_DMA_TX_CLK_CGC_ON_BMSK << HWIO_DMA_GENERAL_CFG_DMA_TX_CLK_CGC_ON_SHFT) |
                 (HWIO_DMA_GENERAL_CFG_DMA_RX_CLK_CGC_ON_BMSK << HWIO_DMA_GENERAL_CFG_DMA_RX_CLK_CGC_ON_SHFT);
    UART_DM_WRITE_REG(Port->Address + QUPV3_SE_DMA, HWIO_DMA_GENERAL_CFG_OFFS, ConfigMask);
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG, HWIO_GENI_CGC_CTRL_OFFS, 0x7F);
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG, HWIO_GENI_FORCE_DEFAULT_REG_OFFS, 0x1);
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG, HWIO_GENI_OUTPUT_CTRL_OFFS, 0x7F);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_GENI_DMA_MODE_EN_OFFS, 0);
    UART_DM_WRITE_REG(Port->Address + QUPV3_SE_DMA, HWIO_SE_IRQ_EN_OFFS, 0xFFFFFFFF);
    UART_DM_WRITE_REG(Port->Address + QUPV3_SE_DMA, HWIO_SE_GSI_EVENT_EN_OFFS, 0);
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_M_IRQ_ENABLE_OFFS, 0xB300005F);
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_S_IRQ_ENABLE_OFFS, 0xB3007E5F);
    ConfigMask = UART_DM_READ_REG(Port->Address + QUPV3_SE_DMA, HWIO_SE_HW_PARAM_0_OFFS);
    ConfigMask = (ConfigMask & TX_FIFO_DEPTH_MASK) >> TX_FIFO_DEPTH_SHIFT;
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_TX_WATERMARK_REG_OFFS, 4);
    ConfigMask = UART_DM_READ_REG(Port->Address + QUPV3_SE_DMA, HWIO_SE_HW_PARAM_1_OFFS);
    ConfigMask = (ConfigMask & RX_FIFO_DEPTH_MASK) >> RX_FIFO_DEPTH_SHIFT;
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_RX_WATERMARK_REG_OFFS, (ConfigMask - 8));
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_RX_RFR_WATERMARK_REG_OFFS, (ConfigMask - 4));
    SDM845SetBaud(Port, Port->BaudRate);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_TX_WORD_LEN_OFFS, 0x8);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_RX_WORD_LEN_OFFS, 0x8);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_TX_PARITY_CFG_OFFS, 0x0);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_TX_TRANS_CFG_OFFS, 0x2);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_RX_PARITY_CFG_OFFS, 0x0);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_RX_TRANS_CFG_OFFS, 0x0);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_TX_STOP_BIT_LEN_OFFS, 0x0);
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_RX_STALE_CNT_OFFS, (0x16 * 10));
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_S_CMD0_OFFS, 0x8000000);
    return TRUE;
}*/
return true
}

func (s *sdm845)SDM845InitializePort()(ok bool){//col:69
/*SDM845InitializePort(
    _In_opt_ _Null_terminated_ PCHAR LoadOptions,
    _Inout_ PCPPORT                  Port,
    BOOLEAN                          MemoryMapped,
    UCHAR                            AccessSize,
    UCHAR                            BitWidth)
{
    UNREFERENCED_PARAMETER(LoadOptions);
    UNREFERENCED_PARAMETER(AccessSize);
    UNREFERENCED_PARAMETER(BitWidth);
    if (MemoryMapped == FALSE)
    {
        return FALSE;
    }
    Port->Flags = 0;
    return SDM845ReinitializePort(Port);
}*/
return true
}

func (s *sdm845)SDM845SetBaud()(ok bool){//col:126
/*SDM845SetBaud(
    _Inout_ PCPPORT Port,
    ULONG           Rate)
{
    UINT32 DivisorLatch  = 0;
    UINT32 ValueTempMask = 0;
    if ((Port == NULL) || (Port->Address == NULL))
    {
        return FALSE;
    }
    DivisorLatch = UART_DM_READ_REG(Port->Address + GENI4_CFG,
                                    HWIO_GENI_SER_M_CLK_CFG_OFFS);
    if (DivisorLatch == 0x11)
    {
        return FALSE;
    }
    switch (Rate)
    {
    case 7200:
        DivisorLatch = 0x20;
        break;
    case 9600:
        DivisorLatch = 0x18;
        break;
    case 14400:
        DivisorLatch = 0x10;
        break;
    case 19200:
        DivisorLatch = 0xC;
        break;
    case 28800:
        DivisorLatch = 0x8;
        break;
    case 38400:
        DivisorLatch = 0x6;
        break;
    case 57600:
        DivisorLatch = 0x4;
        break;
    case 115200:
        DivisorLatch = 0x2;
        break;
    default:
        DivisorLatch = 0x1;
        break;
    }
    ValueTempMask = (DivisorLatch << (HWIO_GENI_SER_M_CLK_CFG_CLK_DIV_VALUE_SHFT)) |
                    HWIO_GENI_SER_M_CLK_CFG_SER_CLK_EN_BMSK;
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG,
                      HWIO_GENI_SER_M_CLK_CFG_OFFS,
                      ValueTempMask);
    UART_DM_WRITE_REG(Port->Address + GENI4_CFG,
                      HWIO_GENI_SER_S_CLK_CFG_OFFS,
                      ValueTempMask);
    Port->BaudRate = Rate;
    return TRUE;
}*/
return true
}

func (s *sdm845)SDM845GetByte()(ok bool){//col:199
/*SDM845GetByte(
    _Inout_ PCPPORT Port,
    _Out_ PUCHAR    Byte)
{
    ULONG  AvailableBytes;
    PUCHAR BaseAddress;
    ULONG  IrqStatus;
    ULONG  RxFifoStatus;
    ULONG  PartialBytesToRead;
    ULONG  WordsToRead;
    ULONG  ArrayIndex;
    ULONG  Index;
    ULONG  RxFifo;
    if ((Port == NULL) || (Port->Address == NULL))
    {
        return UartNotReady;
    }
    BaseAddress = Port->Address;
    ArrayIndex  = 0;
    if (Transfer.AvailableBytes == 0)
    {
        Transfer.PtrToFifoBuffer = (UCHAR *)Transfer.FifoBuffer;
        IrqStatus                = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_S_IRQ_STATUS_OFFS);
        UART_DM_WRITE_REG(BaseAddress + GENI4_DATA, HWIO_GENI_S_IRQ_CLEAR_OFFS, IrqStatus);
        RxFifoStatus = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_FIFO_STATUS_OFFS);
        PartialBytesToRead = (RxFifoStatus & RX_LAST_VALID_BYTES_MASK) >> RX_LAST_VALID_BYTES_SHIFT;
        WordsToRead        = RxFifoStatus & RX_FIFO_WC;
        if ((PartialBytesToRead > 0) || (WordsToRead > 0))
        {
            if ((PartialBytesToRead != 0) && (PartialBytesToRead != 4))
            {
                WordsToRead -= 1;
            }
        }
        else if ((IrqStatus & RX_FIFO_WATERMARK_IRQ) != 0)
        {
            WordsToRead = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_WATERMARK_REG_OFFS);
        }
        AvailableBytes = (WordsToRead * 4) + PartialBytesToRead;
        if (AvailableBytes > MAX_RX_FIFO_SIZE)
        {
            SDM845ReinitializePort(Port);
            return UartNotReady;
        }
        Transfer.AvailableBytes = AvailableBytes;
        for (Index = 0; Index < WordsToRead; Index += 1)
        {
            RxFifo                              = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_FIFOn_OFFS(BaseAddress, Index));
            Transfer.FifoBuffer[0 + ArrayIndex] = (UCHAR)(RxFifo >> 0);
            Transfer.FifoBuffer[1 + ArrayIndex] = (UCHAR)(RxFifo >> 8);
            Transfer.FifoBuffer[2 + ArrayIndex] = (UCHAR)(RxFifo >> 16);
            Transfer.FifoBuffer[3 + ArrayIndex] = (UCHAR)(RxFifo >> 24);
            ArrayIndex += 4;
        }
        if (PartialBytesToRead > 0)
        {
            RxFifo = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_FIFOn_OFFS(BaseAddress, Index));
            for (Index = 0; Index < PartialBytesToRead; Index += 1)
            {
                Transfer.FifoBuffer[ArrayIndex] = (UCHAR)(RxFifo >> Index * 8);
                ArrayIndex += 1;
            }
        }
    }
    if (Transfer.AvailableBytes != 0)
    {
        *Byte = *Transfer.PtrToFifoBuffer;
        Transfer.PtrToFifoBuffer += 1;
        Transfer.AvailableBytes -= 1;
        return UartSuccess;
    }
    return UartNoData;
}*/
return true
}

func (s *sdm845)SDM845PutByte()(ok bool){//col:226
/*SDM845PutByte(
    _Inout_ PCPPORT Port,
    UCHAR           Byte,
    BOOLEAN         BusyWait)
{
    PUCHAR Address;
    if ((Port == NULL) || (Port->Address == NULL))
    {
        return UartNotReady;
    }
    Address = Port->Address;
    if (BusyWait != FALSE)
    {
        while ((UART_DM_READ_REG(Port->Address + GENI4_CFG, HWIO_GENI_STATUS_OFFS) & HWIO_GENI_STATUS_M_GENI_CMD_ACTIVE_BMSK))
            ;
    }
    else if ((UART_DM_READ_REG(Port->Address + GENI4_CFG, HWIO_GENI_STATUS_OFFS) & HWIO_GENI_STATUS_M_GENI_CMD_ACTIVE_BMSK))
    {
        return UartNotReady;
    }
    UART_DM_WRITE_REG(Port->Address + GENI4_IMAGE_REGS, HWIO_UART_TX_TRANS_LEN_OFFS, 1);
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_M_CMD0_OFFS, 0x8000000);
    UINT32 word_value = 0;
    word_value        = word_value | Byte;
    UART_DM_WRITE_REG(Port->Address + GENI4_DATA, HWIO_GENI_TX_FIFOn_OFFS(Port->Address, 0), word_value);
    return UartSuccess;
}*/
return true
}

func (s *sdm845)SDM845RxReady()(ok bool){//col:267
/*SDM845RxReady(
    _Inout_ PCPPORT Port)
{
    PUCHAR  BaseAddress;
    ULONG   FifoStatReg;
    ULONG   PartialBytesToRead;
    ULONG   WordsToRead;
    BOOLEAN IsAvailableBytes;
    ULONG   IrqStatus;
    if ((Port == NULL) || (Port->Address == NULL))
    {
        return FALSE;
    }
    if (Transfer.AvailableBytes != 0)
    {
        IsAvailableBytes = TRUE;
        goto SDM845ReceiveDataAvailableEnd;
    }
    BaseAddress = Port->Address;
    FifoStatReg = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_FIFO_STATUS_OFFS);
    PartialBytesToRead = (FifoStatReg & RX_LAST_VALID_BYTES_MASK) >> RX_LAST_VALID_BYTES_SHIFT;
    WordsToRead        = FifoStatReg & RX_FIFO_WC;
    IsAvailableBytes   = FALSE;
    if ((PartialBytesToRead > 0) || (WordsToRead > 0))
    {
        IsAvailableBytes = TRUE;
    }
    else
    {
        IrqStatus = UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_S_IRQ_STATUS_OFFS);
        if ((IrqStatus & RX_FIFO_WATERMARK_IRQ) != 0)
        {
            if (UART_DM_READ_REG(BaseAddress + GENI4_DATA, HWIO_GENI_RX_WATERMARK_REG_OFFS) > 0)
            {
                IsAvailableBytes = TRUE;
            }
        }
    }
SDM845ReceiveDataAvailableEnd:
    return IsAvailableBytes;
}*/
return true
}



