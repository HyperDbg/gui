package common



type (
	Common interface {
		SeparateTo64BitValue() (ok bool)          //col:69
		IsDecimalNotation() (ok bool)             //col:86
		HexToBytes() (ok bool)                    //col:158
		ConvertStringToUInt32() (ok bool)         //col:232
		VmxSupportDetection() (ok bool)           //col:298
		GetConfigFilePath() (ok bool)             //col:395
		CheckCanonicalVirtualAddress() (ok bool)  //col:417
		CheckIfAddressIsValidUsingTsx() (ok bool) //col:507
	}
	common struct{}
)

func NewCommon() Common { return &common{} }

func (c *common) SeparateTo64BitValue() (ok bool) { //col:69




















































































	return true
}


func (c *common) IsDecimalNotation() (ok bool) { //col:86




















	return true
}


func (c *common) HexToBytes() (ok bool) { //col:158













































































	return true
}


func (c *common) ConvertStringToUInt32() (ok bool) { //col:232

















































































	return true
}


func (c *common) VmxSupportDetection() (ok bool) { //col:298























































































	return true
}


func (c *common) GetConfigFilePath() (ok bool) { //col:395






















































































































	return true
}


func (c *common) CheckCanonicalVirtualAddress() (ok bool) { //col:417

























	return true
}


func (c *common) CheckIfAddressIsValidUsingTsx() (ok bool) { //col:507































































































	return true
}


