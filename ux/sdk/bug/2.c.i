# 1 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 374 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c" 2

typedef unsigned short wchar_t;
typedef int bool ;







typedef unsigned __int64 SIZE_T,*PSIZE_T;
typedef unsigned __int64 time_t;
typedef unsigned __int64 NTSTATUS;
typedef char * va_list;

typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, PRLIST_ENTRY;
# 130 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
#pragma warning(disable: 4201)





typedef unsigned long long QWORD;
typedef unsigned __int64 UINT64, *PUINT64;
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef int INT;
typedef unsigned int UINT;
typedef unsigned int * PUINT;
typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef char CHAR;
typedef wchar_t WCHAR;


typedef unsigned char UCHAR;
typedef unsigned short USHORT;
typedef unsigned long ULONG;

typedef UCHAR BOOLEAN;
typedef BOOLEAN * PBOOLEAN;

typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;
# 185 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct GUEST_REGS
{




    UINT64 rax;
    UINT64 rcx;
    UINT64 rdx;
    UINT64 rbx;
    UINT64 rsp;
    UINT64 rbp;
    UINT64 rsi;
    UINT64 rdi;
    UINT64 r8;
    UINT64 r9;
    UINT64 r10;
    UINT64 r11;
    UINT64 r12;
    UINT64 r13;
    UINT64 r14;
    UINT64 r15;





} GUEST_REGS, *PGUEST_REGS;





typedef struct GUEST_EXTRA_REGISTERS
{
    UINT16 CS;
    UINT16 DS;
    UINT16 FS;
    UINT16 GS;
    UINT16 ES;
    UINT16 SS;
    UINT64 RFLAGS;
    UINT64 RIP;
} GUEST_EXTRA_REGISTERS, *PGUEST_EXTRA_REGISTERS;




typedef struct _SCRIPT_ENGINE_VARIABLES_LIST
{
    UINT64 * TempList;
    UINT64 * GlobalVariablesList;
    UINT64 * LocalVariablesList;

} SCRIPT_ENGINE_VARIABLES_LIST, *PSCRIPT_ENGINE_VARIABLES_LIST;





typedef struct _CR3_TYPE
{
    union
    {
        UINT64 Flags;

        struct
        {
            UINT64 Pcid : 12;
            UINT64 PageFrameNumber : 36;
            UINT64 Reserved1 : 12;
            UINT64 Reserved_2 : 3;
            UINT64 PcidInvalidate : 1;
        } Fields;
    };
} CR3_TYPE, *PCR3_TYPE;
# 281 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGEE_PAUSING_REASON
{




    DEBUGGEE_PAUSING_REASON_NOT_PAUSED = 0,
    DEBUGGEE_PAUSING_REASON_PAUSE,
    DEBUGGEE_PAUSING_REASON_REQUEST_FROM_DEBUGGER,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_STEPPED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_TRACKING_STEPPED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_SOFTWARE_BREAKPOINT_HIT,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_HARDWARE_DEBUG_REGISTER_HIT,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_CORE_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_PROCESS_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_THREAD_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_COMMAND_EXECUTION_FINISHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_EVENT_TRIGGERED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_STARTING_MODULE_LOADED,




    DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_DEBUG_BREAK,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_THREAD_INTERCEPTED,




    DEBUGGEE_PAUSING_REASON_HARDWARE_BASED_DEBUGGEE_GENERAL_BREAK,

} DEBUGGEE_PAUSING_REASON;





typedef enum _DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION
{




    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_PAUSE = 1,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DO_NOT_READ_ANY_PACKET,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DEBUGGER_VERSION,




    DEBUGGER_REMOTE_PACKET_PING_AND_SEND_SUPPORTED_VERSION,




    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_STEP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CONTINUE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CLOSE_AND_UNLOAD_DEBUGGEE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_CORE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_FLUSH_BUFFERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CALLSTACK,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_TEST_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_PROCESS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_THREAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_RUN_SCRIPT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_USER_INPUT_BUFFER,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SEARCH_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_REGISTER_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_ADD_ACTION_TO_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_AND_MODIFY_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_REGISTERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_EDIT_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_BP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_LIST_OR_MODIFY_BREAKPOINTS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_RELOAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_PA2VA_AND_VA2PA,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_QUERY_PTE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SET_SHORT_CIRCUITING_STATE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_INJECT_PAGE_FAULT,




    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_NO_ACTION,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_STARTED,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_LOGGING_MECHANISM,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_PAUSED_AND_CURRENT_INSTRUCTION,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_CORE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_PROCESS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_THREAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_RUNNING_SCRIPT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FORMATS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FLUSH,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CALLSTACK,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_TEST_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_REGISTERING_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_ADDING_ACTION_TO_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_QUERY_AND_MODIFY_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_REGISTERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_EDITING_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_STATE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_LIST_OR_MODIFY_BREAKPOINTS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_UPDATE_SYMBOL_INFO,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SYMBOL_FINISHED,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SEARCH_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_PTE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_VA2PA_AND_PA2VA,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BRINGING_PAGES_IN,
# 402 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
} DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION;






typedef enum _DEBUGGER_REMOTE_PACKET_TYPE
{




    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_VMX_ROOT = 1,




    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_USER_MODE = 2,




    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER = 3,




    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_HARDWARE_LEVEL = 4,




    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER_HARDWARE_LEVEL = 5,

} DEBUGGER_REMOTE_PACKET_TYPE;





typedef struct _DEBUGGER_REMOTE_PACKET
{
    BYTE Checksum;
    UINT64 Indicator;
    DEBUGGER_REMOTE_PACKET_TYPE TypeOfThePacket;
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION RequestedActionOfThePacket;

} DEBUGGER_REMOTE_PACKET, *PDEBUGGER_REMOTE_PACKET;
# 594 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
const unsigned char BuildDateTime[] = {
    ("Jun 22 2024"[7]),
    ("Jun 22 2024"[8]),
    ("Jun 22 2024"[9]),
    ("Jun 22 2024"[10]),
    '-',
    ((("Jun 22 2024"[0] == 'O') || ("Jun 22 2024"[0] == 'N') || ("Jun 22 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'n')) ? '1' : (("Jun 22 2024"[0] == 'F')) ? '2' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'r')) ? '3' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'p')) ? '4' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'y')) ? '5' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'n')) ? '6' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'l')) ? '7' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'u')) ? '8' : (("Jun 22 2024"[0] == 'S')) ? '9' : (("Jun 22 2024"[0] == 'O')) ? '0' : (("Jun 22 2024"[0] == 'N')) ? '1' : (("Jun 22 2024"[0] == 'D')) ? '2' : '?'),
    '-',
    (("Jun 22 2024"[4] >= '0') ? ("Jun 22 2024"[4]) : '0'),
    ("Jun 22 2024"[5]),
    ' ',
    ("20:26:31"[0]),
    ("20:26:31"[1]),
    ':',
    ("20:26:31"[3]),
    ("20:26:31"[4]),
    ':',
    ("20:26:31"[6]),
    ("20:26:31"[7]),

    '\0'};

const unsigned char CompleteVersion[] = {
    'v',
    (1 + '0'),
    '.',
    (0 + '0'),
    '.',
    (0 + '0'),
    '\0'};

const unsigned char BuildVersion[] = {
    ("Jun 22 2024"[7]),
    ("Jun 22 2024"[8]),
    ("Jun 22 2024"[9]),
    ("Jun 22 2024"[10]),
    ((("Jun 22 2024"[0] == 'O') || ("Jun 22 2024"[0] == 'N') || ("Jun 22 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'n')) ? '1' : (("Jun 22 2024"[0] == 'F')) ? '2' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'r')) ? '3' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'p')) ? '4' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'y')) ? '5' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'n')) ? '6' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'l')) ? '7' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'u')) ? '8' : (("Jun 22 2024"[0] == 'S')) ? '9' : (("Jun 22 2024"[0] == 'O')) ? '0' : (("Jun 22 2024"[0] == 'N')) ? '1' : (("Jun 22 2024"[0] == 'D')) ? '2' : '?'),
    (("Jun 22 2024"[4] >= '0') ? ("Jun 22 2024"[4]) : '0'),
    ("Jun 22 2024"[5]),
    '.',
    ("20:26:31"[0]),
    ("20:26:31"[1]),
    ("20:26:31"[3]),
    ("20:26:31"[4]),

    '\0'};

const unsigned char BuildSignature[] = {
    (1 + '0'),
    '.',
    (0 + '0'),
    '.',
    (0 + '0'),
    '-',
    ("Jun 22 2024"[7]),
    ("Jun 22 2024"[8]),
    ("Jun 22 2024"[9]),
    ("Jun 22 2024"[10]),
    ((("Jun 22 2024"[0] == 'O') || ("Jun 22 2024"[0] == 'N') || ("Jun 22 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'n')) ? '1' : (("Jun 22 2024"[0] == 'F')) ? '2' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'r')) ? '3' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'p')) ? '4' : (("Jun 22 2024"[0] == 'M' && "Jun 22 2024"[1] == 'a' && "Jun 22 2024"[2] == 'y')) ? '5' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'n')) ? '6' : (("Jun 22 2024"[0] == 'J' && "Jun 22 2024"[1] == 'u' && "Jun 22 2024"[2] == 'l')) ? '7' : (("Jun 22 2024"[0] == 'A' && "Jun 22 2024"[1] == 'u')) ? '8' : (("Jun 22 2024"[0] == 'S')) ? '9' : (("Jun 22 2024"[0] == 'O')) ? '0' : (("Jun 22 2024"[0] == 'N')) ? '1' : (("Jun 22 2024"[0] == 'D')) ? '2' : '?'),
    (("Jun 22 2024"[4] >= '0') ? ("Jun 22 2024"[4]) : '0'),
    ("Jun 22 2024"[5]),
    '.',
    ("20:26:31"[0]),
    ("20:26:31"[1]),
    ("20:26:31"[3]),
    ("20:26:31"[4]),

    '\0'};
# 1202 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _PAGING_LEVEL
{
    PagingLevelPageTable = 0,
    PagingLevelPageDirectory,
    PagingLevelPageDirectoryPointerTable,
    PagingLevelPageMapLevel4
} PAGING_LEVEL;
# 1218 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _POOL_ALLOCATION_INTENTION
{
    TRACKING_HOOKED_PAGES,
    EXEC_TRAMPOLINE,
    SPLIT_2MB_PAGING_TO_4KB_PAGE,
    DETOUR_HOOK_DETAILS,
    BREAKPOINT_DEFINITION_STRUCTURE,
    PROCESS_THREAD_HOLDER,




    INSTANT_REGULAR_EVENT_BUFFER,
    INSTANT_BIG_EVENT_BUFFER,
    INSTANT_REGULAR_EVENT_ACTION_BUFFER,
    INSTANT_BIG_EVENT_ACTION_BUFFER,




    INSTANT_REGULAR_SAFE_BUFFER_FOR_EVENTS,
    INSTANT_BIG_SAFE_BUFFER_FOR_EVENTS,

} POOL_ALLOCATION_INTENTION;





typedef enum _DEBUG_REGISTER_TYPE
{
    BREAK_ON_INSTRUCTION_FETCH,
    BREAK_ON_WRITE_ONLY,
    BREAK_ON_IO_READ_OR_WRITE_NOT_SUPPORTED,
    BREAK_ON_READ_AND_WRITE_BUT_NOT_FETCH
} DEBUG_REGISTER_TYPE;





typedef enum _VMX_EXECUTION_MODE
{
    VmxExecutionModeNonRoot = 0,
    VmxExecutionModeRoot = 1
} VMX_EXECUTION_MODE;





typedef enum _VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE
{
    VMM_CALLBACK_CALLING_STAGE_INVALID_EVENT_EMULATION = 0,
    VMM_CALLBACK_CALLING_STAGE_PRE_EVENT_EMULATION = 1,
    VMM_CALLBACK_CALLING_STAGE_POST_EVENT_EMULATION = 2,
    VMM_CALLBACK_CALLING_STAGE_ALL_EVENT_EMULATION = 3

} VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE;





typedef enum _DEBUGGER_THREAD_PROCESS_TRACING
{

    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_THREAD_CHANGE,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_PROCESS_CHANGE,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_DEBUG_REGISTER_INTERCEPTION,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_WAITING_FOR_MOV_CR3_VM_EXITS,

} DEBUGGER_THREAD_PROCESS_TRACING;
# 1301 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef int (*Callback)(const char * Text);
# 1311 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_USER_INPUT_PACKET
{
    UINT32 CommandLen;
    BOOLEAN IgnoreFinishedSignal;
    UINT32 Result;





} DEBUGGEE_USER_INPUT_PACKET, *PDEBUGGEE_USER_INPUT_PACKET;





typedef struct _DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET
{
    UINT32 Length;





} DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET,
    *PDEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET;
# 1349 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PAUSE_PACKET_RECEIVED
{
    UINT32 Result;

} DEBUGGER_PAUSE_PACKET_RECEIVED, *PDEBUGGER_PAUSE_PACKET_RECEIVED;
# 1363 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_TRIGGERED_EVENT_DETAILS
{
    UINT64 Tag;
    void* Context;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE Stage;

} DEBUGGER_TRIGGERED_EVENT_DETAILS, *PDEBUGGER_TRIGGERED_EVENT_DETAILS;
# 1378 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_KD_PAUSED_PACKET
{
    UINT64 Rip;
    BOOLEAN IsProcessorOn32BitMode;
    BOOLEAN IgnoreDisassembling;
    DEBUGGEE_PAUSING_REASON PausingReason;
    ULONG CurrentCore;
    UINT64 EventTag;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
    UINT64 Rflags;
    BYTE InstructionBytesOnRip[16];
    UINT16 ReadInstructionLen;

} DEBUGGEE_KD_PAUSED_PACKET, *PDEBUGGEE_KD_PAUSED_PACKET;
# 1400 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_UD_PAUSED_PACKET
{
    UINT64 Rip;
    UINT64 ProcessDebuggingToken;
    BOOLEAN Is32Bit;
    DEBUGGEE_PAUSING_REASON PausingReason;
    UINT32 ProcessId;
    UINT32 ThreadId;
    UINT64 Rflags;
    UINT64 EventTag;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
    BYTE InstructionBytesOnRip[16];
    UINT16 ReadInstructionLen;
    GUEST_REGS GuestRegs;

} DEBUGGEE_UD_PAUSED_PACKET, *PDEBUGGEE_UD_PAUSED_PACKET;
# 1425 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _NOTIFY_TYPE
{
    IRP_BASED,
    EVENT_BASED
} NOTIFY_TYPE;
# 1439 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_MESSAGE_PACKET
{
    UINT32 OperationCode;
    CHAR Message[4096];

} DEBUGGEE_MESSAGE_PACKET, *PDEBUGGEE_MESSAGE_PACKET;





typedef struct _REGISTER_NOTIFY_BUFFER
{
    NOTIFY_TYPE Type;
    void* hEvent;

} REGISTER_NOTIFY_BUFFER, *PREGISTER_NOTIFY_BUFFER;
# 1465 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DIRECT_VMCALL_PARAMETERS
{
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;

} DIRECT_VMCALL_PARAMETERS, *PDIRECT_VMCALL_PARAMETERS;
# 1481 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_HOOK_MEMORY_TYPE
{
    DEBUGGER_MEMORY_HOOK_VIRTUAL_ADDRESS,
    DEBUGGER_MEMORY_HOOK_PHYSICAL_ADDRESS
} DEBUGGER_HOOK_MEMORY_TYPE;





typedef struct _EPT_HOOKS_CONTEXT
{
    UINT64 HookingTag;
    UINT64 PhysicalAddress;
    UINT64 VirtualAddress;
} EPT_HOOKS_CONTEXT, *PEPT_HOOKS_CONTEXT;





typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR
{
    UINT64 StartAddress;
    UINT64 EndAddress;
    BOOLEAN SetHookForRead;
    BOOLEAN SetHookForWrite;
    BOOLEAN SetHookForExec;
    DEBUGGER_HOOK_MEMORY_TYPE MemoryType;
    UINT64 Tag;

} EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR, *PEPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR;





typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2
{
    void* TargetAddress;
    void* HookFunction;

} EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2, *PEPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2;





typedef struct _EPT_SINGLE_HOOK_UNHOOKING_DETAILS
{
    BOOLEAN CallerNeedsToRestoreEntryAndInvalidateEpt;
    BOOLEAN RemoveBreakpointInterception;
    SIZE_T PhysicalAddress;
    UINT64 OriginalEntry;

} EPT_SINGLE_HOOK_UNHOOKING_DETAILS, *PEPT_SINGLE_HOOK_UNHOOKING_DETAILS;
# 1548 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef union
{
    struct
    {



        UINT32 Type : 4;




        UINT32 DescriptorType : 1;




        UINT32 DescriptorPrivilegeLevel : 2;




        UINT32 Present : 1;

        UINT32 Reserved1 : 4;




        UINT32 AvailableBit : 1;




        UINT32 LongMode : 1;




        UINT32 DefaultBig : 1;




        UINT32 Granularity : 1;



        UINT32 Unusable : 1;
        UINT32 Reserved2 : 15;
    };

    UINT32 AsUInt;
} VMX_SEGMENT_ACCESS_RIGHTS_TYPE;





typedef struct _VMX_SEGMENT_SELECTOR
{
    UINT16 Selector;
    VMX_SEGMENT_ACCESS_RIGHTS_TYPE Attributes;
    UINT32 Limit;
    UINT64 Base;
} VMX_SEGMENT_SELECTOR, *PVMX_SEGMENT_SELECTOR;
# 2187 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _EXCEPTION_VECTORS
{
    EXCEPTION_VECTOR_DIVIDE_ERROR,
    EXCEPTION_VECTOR_DEBUG_BREAKPOINT,
    EXCEPTION_VECTOR_NMI,
    EXCEPTION_VECTOR_BREAKPOINT,
    EXCEPTION_VECTOR_OVERFLOW,
    EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED,
    EXCEPTION_VECTOR_UNDEFINED_OPCODE,
    EXCEPTION_VECTOR_NO_MATH_COPROCESSOR,
    EXCEPTION_VECTOR_DOUBLE_FAULT,
    EXCEPTION_VECTOR_RESERVED0,
    EXCEPTION_VECTOR_INVALID_TASK_SEGMENT_SELECTOR,
    EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT,
    EXCEPTION_VECTOR_STACK_SEGMENT_FAULT,
    EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT,
    EXCEPTION_VECTOR_PAGE_FAULT,
    EXCEPTION_VECTOR_RESERVED1,
    EXCEPTION_VECTOR_MATH_FAULT,
    EXCEPTION_VECTOR_ALIGNMENT_CHECK,
    EXCEPTION_VECTOR_MACHINE_CHECK,
    EXCEPTION_VECTOR_SIMD_FLOATING_POINT_NUMERIC_ERROR,
    EXCEPTION_VECTOR_VIRTUAL_EXCEPTION,
    EXCEPTION_VECTOR_RESERVED2,
    EXCEPTION_VECTOR_RESERVED3,
    EXCEPTION_VECTOR_RESERVED4,
    EXCEPTION_VECTOR_RESERVED5,
    EXCEPTION_VECTOR_RESERVED6,
    EXCEPTION_VECTOR_RESERVED7,
    EXCEPTION_VECTOR_RESERVED8,
    EXCEPTION_VECTOR_RESERVED9,
    EXCEPTION_VECTOR_RESERVED10,
    EXCEPTION_VECTOR_RESERVED11,
    EXCEPTION_VECTOR_RESERVED12,




    APC_INTERRUPT = 31,
    DPC_INTERRUPT = 47,
    CLOCK_INTERRUPT = 209,
    IPI_INTERRUPT = 225,
    PMI_INTERRUPT = 254,

} EXCEPTION_VECTORS;
# 2241 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE
{
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_NO_INITIALIZED = 0,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL = 0,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_IGNORE_EVENT = 1,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_DEBUGGER_NOT_ENABLED = 2,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_INVALID_EVENT_TYPE = 3,

} VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE;
# 2259 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _VMM_EVENT_TYPE_ENUM
{




    HIDDEN_HOOK_READ_AND_WRITE_AND_EXECUTE,
    HIDDEN_HOOK_READ_AND_WRITE,
    HIDDEN_HOOK_READ_AND_EXECUTE,
    HIDDEN_HOOK_WRITE_AND_EXECUTE,
    HIDDEN_HOOK_READ,
    HIDDEN_HOOK_WRITE,
    HIDDEN_HOOK_EXECUTE,




    HIDDEN_HOOK_EXEC_DETOURS,
    HIDDEN_HOOK_EXEC_CC,




    SYSCALL_HOOK_EFER_SYSCALL,
    SYSCALL_HOOK_EFER_SYSRET,




    CPUID_INSTRUCTION_EXECUTION,




    RDMSR_INSTRUCTION_EXECUTION,
    WRMSR_INSTRUCTION_EXECUTION,




    IN_INSTRUCTION_EXECUTION,
    OUT_INSTRUCTION_EXECUTION,




    EXCEPTION_OCCURRED,
    EXTERNAL_INTERRUPT_OCCURRED,




    DEBUG_REGISTERS_ACCESSED,




    TSC_INSTRUCTION_EXECUTION,
    PMC_INSTRUCTION_EXECUTION,




    VMCALL_INSTRUCTION_EXECUTION,




    CONTROL_REGISTER_MODIFIED,
    CONTROL_REGISTER_READ,
    CONTROL_REGISTER_3_MODIFIED,




    TRAP_EXECUTION_MODE_CHANGED,
    TRAP_EXECUTION_INSTRUCTION_TRACE,

} VMM_EVENT_TYPE_ENUM;





typedef enum _DEBUGGER_EVENT_ACTION_TYPE_ENUM
{
    BREAK_TO_DEBUGGER,
    RUN_SCRIPT,
    RUN_CUSTOM_CODE

} DEBUGGER_EVENT_ACTION_TYPE_ENUM;





typedef enum _DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE
{
    DEBUGGER_EVENT_SYSCALL_SYSRET_SAFE_ACCESS_MEMORY = 0,
    DEBUGGER_EVENT_SYSCALL_SYSRET_HANDLE_ALL_UD = 1,

} DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE;







typedef enum _DEBUGGER_EVENT_MODE_TYPE
{
    DEBUGGER_EVENT_MODE_TYPE_USER_MODE_AND_KERNEL_MODE = 1,
    DEBUGGER_EVENT_MODE_TYPE_USER_MODE = 3,
    DEBUGGER_EVENT_MODE_TYPE_KERNEL_MODE = 0,
    DEBUGGER_EVENT_MODE_TYPE_INVALID = 0xffffffff,

} DEBUGGER_EVENT_MODE_TYPE;





typedef enum _DEBUGGER_EVENT_TRACE_TYPE
{
    DEBUGGER_EVENT_TRACE_TYPE_INVALID = 0,
    DEBUGGER_EVENT_TRACE_TYPE_STEP_IN = 1,
    DEBUGGER_EVENT_TRACE_TYPE_STEP_OUT = 2,
    DEBUGGER_EVENT_TRACE_TYPE_INSTRUMENTATION_STEP_IN = 3,

} DEBUGGER_EVENT_TRACE_TYPE;





typedef enum _DEBUGGER_MODIFY_EVENTS_TYPE
{
    DEBUGGER_MODIFY_EVENTS_QUERY_STATE,
    DEBUGGER_MODIFY_EVENTS_ENABLE,
    DEBUGGER_MODIFY_EVENTS_DISABLE,
    DEBUGGER_MODIFY_EVENTS_CLEAR,
} DEBUGGER_MODIFY_EVENTS_TYPE;





typedef struct _DEBUGGER_MODIFY_EVENTS
{
    UINT64 Tag;
    UINT64 KernelStatus;
    DEBUGGER_MODIFY_EVENTS_TYPE
    TypeOfAction;
    BOOLEAN IsEnabled;

} DEBUGGER_MODIFY_EVENTS, *PDEBUGGER_MODIFY_EVENTS;





typedef struct _DEBUGGER_SHORT_CIRCUITING_EVENT
{
    UINT64 KernelStatus;
    BOOLEAN IsShortCircuiting;

} DEBUGGER_SHORT_CIRCUITING_EVENT, *PDEBUGGER_SHORT_CIRCUITING_EVENT;
# 2435 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_EVENT_OPTIONS
{
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;
    UINT64 OptionalParam4;
    UINT64 OptionalParam5;
    UINT64 OptionalParam6;

} DEBUGGER_EVENT_OPTIONS, *PDEBUGGER_EVENT_OPTIONS;
# 2454 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _PROTECTED_HV_RESOURCES_PASSING_OVERS
{



    PASSING_OVER_NONE = 0,
    PASSING_OVER_UD_EXCEPTIONS_FOR_SYSCALL_SYSRET_HOOK = 1,
    PASSING_OVER_EXCEPTION_EVENTS,




    PASSING_OVER_INTERRUPT_EVENTS,




    PASSING_OVER_TSC_EVENTS,




    PASSING_OVER_MOV_TO_HW_DEBUG_REGS_EVENTS,




    PASSING_OVER_MOV_TO_CONTROL_REGS_EVENTS,

} PROTECTED_HV_RESOURCES_PASSING_OVERS;





typedef enum _PROTECTED_HV_RESOURCES_TYPE
{
    PROTECTED_HV_RESOURCES_EXCEPTION_BITMAP,

    PROTECTED_HV_RESOURCES_EXTERNAL_INTERRUPT_EXITING,

    PROTECTED_HV_RESOURCES_RDTSC_RDTSCP_EXITING,

    PROTECTED_HV_RESOURCES_MOV_TO_DEBUG_REGISTER_EXITING,

    PROTECTED_HV_RESOURCES_MOV_CONTROL_REGISTER_EXITING,

    PROTECTED_HV_RESOURCES_MOV_TO_CR3_EXITING,

} PROTECTED_HV_RESOURCES_TYPE;
# 2514 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_GENERAL_EVENT_DETAIL
{
    LIST_ENTRY
    CommandsEventList;


    time_t CreationTime;

    UINT32 CoreId;


    UINT32 ProcessId;



    BOOLEAN IsEnabled;

    BOOLEAN EnableShortCircuiting;


    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventStage;


    BOOLEAN HasCustomOutput;


    UINT64
    OutputSourceTags
        [0x5];
# 2551 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
    UINT32 CountOfActions;

    UINT64 Tag;
    VMM_EVENT_TYPE_ENUM EventType;

    DEBUGGER_EVENT_OPTIONS Options;

    void* CommandStringBuffer;

    UINT32 ConditionBufferSize;

} DEBUGGER_GENERAL_EVENT_DETAIL, *PDEBUGGER_GENERAL_EVENT_DETAIL;







typedef struct _DEBUGGER_GENERAL_ACTION
{
    UINT64 EventTag;
    DEBUGGER_EVENT_ACTION_TYPE_ENUM ActionType;
    BOOLEAN ImmediateMessagePassing;
    UINT32 PreAllocatedBuffer;

    UINT32 CustomCodeBufferSize;
    UINT32 ScriptBufferSize;
    UINT32 ScriptBufferPointer;

} DEBUGGER_GENERAL_ACTION, *PDEBUGGER_GENERAL_ACTION;





typedef struct _DEBUGGER_EVENT_AND_ACTION_RESULT
{
    BOOLEAN IsSuccessful;
    UINT32 Error;

} DEBUGGER_EVENT_AND_ACTION_RESULT, *PDEBUGGER_EVENT_AND_ACTION_RESULT;
# 2637 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _HWDBG_ACTION_ENUMS
{
    hwdbgActionSendInstanceInfo = 1,
    hwdbgActionConfigureScriptBuffer = 2,

} HWDBG_ACTION_ENUMS;






typedef enum _HWDBG_RESPONSE_ENUMS
{
    hwdbgResponseSuccessOrErrorMessage = 1,
    hwdbgResponseInstanceInfo = 2,

} HWDBG_RESPONSE_ENUMS;






typedef enum _HWDBG_SUCCESS_OR_ERROR_ENUMS
{
    hwdbgOperationWasSuccessful = 0x7FFFFFFF,
    hwdbgErrorInvalidPacket = 1,

} HWDBG_SUCCESS_OR_ERROR_ENUMS;
# 2676 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _HWDBG_PORT_INFORMATION_ITEMS
{
    UINT32 PortSize;

} HWDBG_PORT_INFORMATION_ITEMS, *PHWDBG_PORT_INFORMATION_ITEMS;





typedef struct _HWDBG_INSTANCE_INFORMATION
{



    UINT32 version;
    UINT32 maximumNumberOfStages;
    UINT32 scriptVariableLength;
    UINT32 maximumNumberOfSupportedGetScriptOperators;
    UINT32 maximumNumberOfSupportedSetScriptOperators;
    UINT32 sharedMemorySize;
    UINT32 debuggerAreaOffset;
    UINT32 debuggeeAreaOffset;
    UINT32 numberOfPins;
    UINT32 numberOfPorts;





    struct _HWDBG_SCRIPT_CAPABILITIES
    {




        UINT64 func_or : 1;
        UINT64 func_xor : 1;
        UINT64 func_and : 1;
        UINT64 func_asr : 1;
        UINT64 func_asl : 1;
        UINT64 func_add : 1;
        UINT64 func_sub : 1;
        UINT64 func_mul : 1;
        UINT64 func_div : 1;
        UINT64 func_mod : 1;
        UINT64 func_gt : 1;
        UINT64 func_lt : 1;
        UINT64 func_egt : 1;
        UINT64 func_elt : 1;
        UINT64 func_equal : 1;
        UINT64 func_neq : 1;
        UINT64 func_jmp : 1;
        UINT64 func_jz : 1;
        UINT64 func_jnz : 1;
        UINT64 func_mov : 1;
        UINT64 func_printf : 1;






    } scriptCapabilities;

    UINT32 bramAddrWidth;
    UINT32 bramDataWidth;







} HWDBG_INSTANCE_INFORMATION, *PHWDBG_INSTANCE_INFORMATION;





typedef struct _HWDBG_SCRIPT_BUFFER
{
    UINT32 scriptNumberOfSymbols;







} HWDBG_SCRIPT_BUFFER, *PHWDBG_SCRIPT_BUFFER;
# 3083 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS
{
    UINT64 VirtualAddress;
    UINT32 ProcessId;

    UINT64 Pml4eVirtualAddress;
    UINT64 Pml4eValue;

    UINT64 PdpteVirtualAddress;
    UINT64 PdpteValue;

    UINT64 PdeVirtualAddress;
    UINT64 PdeValue;

    UINT64 PteVirtualAddress;
    UINT64 PteValue;

    UINT32 KernelStatus;

} DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS,
    *PDEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS;
# 3115 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_VA2PA_AND_PA2VA_COMMANDS
{
    UINT64 VirtualAddress;
    UINT64 PhysicalAddress;
    UINT32 ProcessId;
    BOOLEAN IsVirtual2Physical;
    UINT32 KernelStatus;

} DEBUGGER_VA2PA_AND_PA2VA_COMMANDS, *PDEBUGGER_VA2PA_AND_PA2VA_COMMANDS;
# 3134 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PAGE_IN_REQUEST
{
    UINT64 VirtualAddressFrom;
    UINT64 VirtualAddressTo;
    UINT32 ProcessId;
    UINT32 PageFaultErrorCode;
    UINT32 KernelStatus;

} DEBUGGER_PAGE_IN_REQUEST, *PDEBUGGER_PAGE_IN_REQUEST;
# 3151 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE
{
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_UNKNOWN = 0,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_USER_MODE,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_KERNEL_MODE,
} REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE;





typedef enum _REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE
{
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_UNKNOWN = 0,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_RECONSTRUCT,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_PATTERN,
} REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE;
# 3176 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _REVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST
{
    UINT32 ProcessId;
    UINT32 Size;
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE Mode;
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE Type;
    UINT32 KernelStatus;

} REVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST, *PREVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST;
# 3196 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_DT_COMMAND_OPTIONS
{
    const char * TypeName;
    UINT64 SizeOfTypeName;
    UINT64 Address;
    BOOLEAN IsStruct;
    void* BufferAddress;
    UINT32 TargetPid;
    const char * AdditionalParameters;

} DEBUGGER_DT_COMMAND_OPTIONS, *PDEBUGGER_DT_COMMAND_OPTIONS;
# 3215 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_PREALLOC_COMMAND_TYPE
{
    DEBUGGER_PREALLOC_COMMAND_TYPE_THREAD_INTERCEPTION,
    DEBUGGER_PREALLOC_COMMAND_TYPE_MONITOR,
    DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK,
    DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK2,
    DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_EVENT,
    DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_EVENT,
    DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_SAFE_BUFFER,
    DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_SAFE_BUFFER,

} DEBUGGER_PREALLOC_COMMAND_TYPE;
# 3235 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PREALLOC_COMMAND
{
    DEBUGGER_PREALLOC_COMMAND_TYPE Type;
    UINT32 Count;
    UINT32 KernelStatus;

} DEBUGGER_PREALLOC_COMMAND, *PDEBUGGER_PREALLOC_COMMAND;
# 3250 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_PREACTIVATE_COMMAND_TYPE
{
    DEBUGGER_PREACTIVATE_COMMAND_TYPE_MODE,

} DEBUGGER_PREACTIVATE_COMMAND_TYPE;
# 3263 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PREACTIVATE_COMMAND
{
    DEBUGGER_PREACTIVATE_COMMAND_TYPE Type;
    UINT32 KernelStatus;

} DEBUGGER_PREACTIVATE_COMMAND, *PDEBUGGER_PREACTIVATE_COMMAND;
# 3279 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_READ_READING_TYPE
{
    READ_FROM_KERNEL,
    READ_FROM_VMX_ROOT
} DEBUGGER_READ_READING_TYPE;





typedef enum _DEBUGGER_READ_MEMORY_TYPE
{
    DEBUGGER_READ_PHYSICAL_ADDRESS,
    DEBUGGER_READ_VIRTUAL_ADDRESS
} DEBUGGER_READ_MEMORY_TYPE;






typedef enum _DEBUGGER_SHOW_MEMORY_STYLE
{
    DEBUGGER_SHOW_COMMAND_DT = 1,
    DEBUGGER_SHOW_COMMAND_DISASSEMBLE64,
    DEBUGGER_SHOW_COMMAND_DISASSEMBLE32,
    DEBUGGER_SHOW_COMMAND_DB,
    DEBUGGER_SHOW_COMMAND_DC,
    DEBUGGER_SHOW_COMMAND_DQ,
    DEBUGGER_SHOW_COMMAND_DD,
    DEBUGGER_SHOW_COMMAND_DUMP
} DEBUGGER_SHOW_MEMORY_STYLE;





typedef struct _DEBUGGER_READ_MEMORY
{
    UINT32 Pid;
    UINT64 Address;
    UINT32 Size;
    BOOLEAN IsForDisasm;
    BOOLEAN Is32BitAddress;
    DEBUGGER_READ_MEMORY_TYPE MemoryType;
    DEBUGGER_READ_READING_TYPE ReadingType;
    PDEBUGGER_DT_COMMAND_OPTIONS DtDetails;
    DEBUGGER_SHOW_MEMORY_STYLE Style;
    UINT32 ReturnLength;
    UINT32 KernelStatus;





} DEBUGGER_READ_MEMORY, *PDEBUGGER_READ_MEMORY;
# 3346 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_FLUSH_LOGGING_BUFFERS
{
    UINT32 KernelStatus;
    UINT32 CountOfMessagesThatSetAsReadFromVmxRoot;
    UINT32 CountOfMessagesThatSetAsReadFromVmxNonRoot;

} DEBUGGER_FLUSH_LOGGING_BUFFERS, *PDEBUGGER_FLUSH_LOGGING_BUFFERS;
# 3364 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_TEST_QUERY_STATE
{
    TEST_QUERY_HALTING_CORE_STATUS = 1,
    TEST_QUERY_PREALLOCATED_POOL_STATE = 2,
    TEST_QUERY_TRAP_STATE = 3,
    TEST_BREAKPOINT_TURN_OFF_BPS = 4,
    TEST_BREAKPOINT_TURN_ON_BPS = 5,
    TEST_BREAKPOINT_TURN_OFF_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER = 6,
    TEST_BREAKPOINT_TURN_ON_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER = 7,
    TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_SYNCHRONOUS = 8,
    TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_ASYNCHRONOUS = 9,
    TEST_SETTING_TARGET_TASKS_ON_TARGET_HALTED_CORES = 10,
    TEST_BREAKPOINT_TURN_OFF_DBS = 11,
    TEST_BREAKPOINT_TURN_ON_DBS = 12,

} DEBUGGER_TEST_QUERY_STATE;





typedef struct _DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER
{
    DEBUGGER_TEST_QUERY_STATE RequestType;
    UINT64 Context;
    UINT32 KernelStatus;

} DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER, *PDEBUGGER_DEBUGGER_TEST_QUERY_BUFFER;
# 3403 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PERFORM_KERNEL_TESTS
{
    UINT32 KernelStatus;

} DEBUGGER_PERFORM_KERNEL_TESTS, *PDEBUGGER_PERFORM_KERNEL_TESTS;
# 3419 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL
{
    UINT32 KernelStatus;

} DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL,
    *PDEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL;
# 3436 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER
{
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION RequestedAction;
    UINT32 LengthOfBuffer;
    BOOLEAN PauseDebuggeeWhenSent;
    UINT32 KernelResult;





} DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER,
    *PDEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER;
# 3460 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER
{
    UINT32 KernelStatus;
    UINT32 Length;





} DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER,
    *PDEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER;
# 3482 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_MSR_ACTION_TYPE
{
    DEBUGGER_MSR_READ,
    DEBUGGER_MSR_WRITE
} DEBUGGER_MSR_ACTION_TYPE;





typedef struct _DEBUGGER_READ_AND_WRITE_ON_MSR
{
    UINT64 Msr;
    UINT32 CoreNumber;


    DEBUGGER_MSR_ACTION_TYPE
    ActionType;
    UINT64 Value;

} DEBUGGER_READ_AND_WRITE_ON_MSR, *PDEBUGGER_READ_AND_WRITE_ON_MSR;
# 3513 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_EDIT_MEMORY_TYPE
{
    EDIT_PHYSICAL_MEMORY,
    EDIT_VIRTUAL_MEMORY
} DEBUGGER_EDIT_MEMORY_TYPE;





typedef enum _DEBUGGER_EDIT_MEMORY_BYTE_SIZE
{
    EDIT_BYTE,
    EDIT_DWORD,
    EDIT_QWORD
} DEBUGGER_EDIT_MEMORY_BYTE_SIZE;





typedef struct _DEBUGGER_EDIT_MEMORY
{
    UINT32 Result;
    UINT64 Address;
    UINT32 ProcessId;
    DEBUGGER_EDIT_MEMORY_TYPE MemoryType;
    DEBUGGER_EDIT_MEMORY_BYTE_SIZE ByteSize;
    UINT32 CountOf64Chunks;
    UINT32 FinalStructureSize;
    UINT32 KernelStatus;

} DEBUGGER_EDIT_MEMORY, *PDEBUGGER_EDIT_MEMORY;
# 3556 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_SEARCH_MEMORY_TYPE
{
    SEARCH_PHYSICAL_MEMORY,
    SEARCH_VIRTUAL_MEMORY,
    SEARCH_PHYSICAL_FROM_VIRTUAL_MEMORY,

} DEBUGGER_SEARCH_MEMORY_TYPE;





typedef enum _DEBUGGER_SEARCH_MEMORY_BYTE_SIZE
{
    SEARCH_BYTE,
    SEARCH_DWORD,
    SEARCH_QWORD

} DEBUGGER_SEARCH_MEMORY_BYTE_SIZE;





typedef struct _DEBUGGER_SEARCH_MEMORY
{
    UINT64 Address;
    UINT64 Length;
    UINT32 ProcessId;
    DEBUGGER_SEARCH_MEMORY_TYPE MemoryType;
    DEBUGGER_SEARCH_MEMORY_BYTE_SIZE ByteSize;
    UINT32 CountOf64Chunks;
    UINT32 FinalStructureSize;

} DEBUGGER_SEARCH_MEMORY, *PDEBUGGER_SEARCH_MEMORY;
# 3602 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE
{
    BOOLEAN IsHide;

    UINT64 CpuidAverage;
    UINT64 CpuidStandardDeviation;
    UINT64 CpuidMedian;

    UINT64 RdtscAverage;
    UINT64 RdtscStandardDeviation;
    UINT64 RdtscMedian;

    BOOLEAN TrueIfProcessIdAndFalseIfProcessName;
    UINT32 ProcId;
    UINT32 LengthOfProcessName;


    UINT64 KernelStatus;



} DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE,
    *PDEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE;
# 3635 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_PREPARE_DEBUGGEE
{
    UINT32 PortAddress;
    UINT32 Baudrate;
    UINT64 NtoskrnlBaseAddress;
    UINT32 Result;
    CHAR OsName[256];

} DEBUGGER_PREPARE_DEBUGGEE, *PDEBUGGER_PREPARE_DEBUGGEE;
# 3652 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_CHANGE_CORE_PACKET
{
    UINT32 NewCore;
    UINT32 Result;

} DEBUGGEE_CHANGE_CORE_PACKET, *PDEBUGGEE_CHANGE_CORE_PACKET;
# 3668 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE
{
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_ATTACH,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_DETACH,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_REMOVE_HOOKS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_KILL_PROCESS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_PAUSE_PROCESS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_SWITCH_BY_PROCESS_OR_THREAD,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_QUERY_COUNT_OF_ACTIVE_DEBUGGING_THREADS,

} DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE;





typedef struct _DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS
{
    BOOLEAN IsStartingNewProcess;
    UINT32 ProcessId;
    UINT32 ThreadId;
    BOOLEAN CheckCallbackAtFirstInstruction;
    BOOLEAN Is32Bit;
    BOOLEAN IsPaused;
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE Action;
    UINT32 CountOfActiveDebuggingThreadsAndProcesses;
    UINT64 Token;
    UINT64 Result;

} DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS,
    *PDEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS;
# 3709 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES
{
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_COUNT = 1,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_COUNT = 2,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_LIST = 3,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_LIST = 4,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_PROCESS = 5,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_THREAD = 6,

} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES;





typedef enum _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS
{
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_SHOW_INSTANTLY = 1,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_COUNT = 2,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_SAVE_DETAILS = 3,

} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS;






typedef struct _DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS
{
    UINT64 PsActiveProcessHead;
    ULONG ImageFileNameOffset;
    ULONG UniquePidOffset;
    ULONG ActiveProcessLinksOffset;

} DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS, *PDEBUGGEE_PROCESS_LIST_NEEDED_DETAILS;






typedef struct _DEBUGGEE_THREAD_LIST_NEEDED_DETAILS
{
    UINT32 ThreadListHeadOffset;
    UINT32 ThreadListEntryOffset;
    UINT32 CidOffset;
    UINT64 PsActiveProcessHead;
    ULONG ActiveProcessLinksOffset;
    UINT64 Process;

} DEBUGGEE_THREAD_LIST_NEEDED_DETAILS, *PDEBUGGEE_THREAD_LIST_NEEDED_DETAILS;






typedef struct _DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY
{
    UINT64 Eprocess;
    UINT32 ProcessId;
    UINT64 Cr3;
    UCHAR ImageFileName[15 + 1];

} DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY, *PDEBUGGEE_PROCESS_LIST_DETAILS_ENTRY;






typedef struct _DEBUGGEE_THREAD_LIST_DETAILS_ENTRY
{
    UINT64 Eprocess;
    UINT64 Ethread;
    UINT32 ProcessId;
    UINT32 ThreadId;
    UCHAR ImageFileName[15 + 1];

} DEBUGGEE_THREAD_LIST_DETAILS_ENTRY, *PDEBUGGEE_THREAD_LIST_DETAILS_ENTRY;





typedef struct _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS
{
    DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS ProcessListNeededDetails;
    DEBUGGEE_THREAD_LIST_NEEDED_DETAILS ThreadListNeededDetails;
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES QueryType;
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS QueryAction;
    UINT32 Count;
    UINT64 Result;

} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS,
    *PDEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS;
# 3814 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_SINGLE_CALLSTACK_FRAME
{
    BOOLEAN IsStackAddressValid;
    BOOLEAN IsValidAddress;
    BOOLEAN IsExecutable;
    UINT64 Value;
    BYTE InstructionBytesOnRip[7];

} DEBUGGER_SINGLE_CALLSTACK_FRAME, *PDEBUGGER_SINGLE_CALLSTACK_FRAME;
# 3831 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_CALLSTACK_DISPLAY_METHOD
{
    DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITHOUT_PARAMS,
    DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITH_PARAMS,

} DEBUGGER_CALLSTACK_DISPLAY_METHOD;





typedef struct _DEBUGGER_CALLSTACK_REQUEST
{
    BOOLEAN Is32Bit;
    UINT32 KernelStatus;
    DEBUGGER_CALLSTACK_DISPLAY_METHOD DisplayMethod;
    UINT32 Size;
    UINT32 FrameCount;
    UINT64 BaseAddress;
    UINT64 BufferSize;





} DEBUGGER_CALLSTACK_REQUEST, *PDEBUGGER_CALLSTACK_REQUEST;






typedef struct _USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS
{
    UINT32 ProcessId;
    UINT32 ThreadId;
    BOOLEAN IsProcess;

} USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS, *PUSERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS;
# 3878 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION
{
    UINT64 ScriptBuffer;
    UINT32 ScriptLength;
    UINT32 ScriptPointer;
    UINT32 OptionalRequestedBufferSize;

} DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION,
    *PDEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION;





typedef struct _DEBUGGER_EVENT_REQUEST_BUFFER
{
    BOOLEAN EnabledRequestBuffer;
    UINT32 RequestBufferSize;
    UINT64 RequstBufferAddress;

} DEBUGGER_EVENT_REQUEST_BUFFER, *PDEBUGGER_EVENT_REQUEST_BUFFER;





typedef struct _DEBUGGER_EVENT_REQUEST_CUSTOM_CODE
{
    UINT32 CustomCodeBufferSize;
    void* CustomCodeBufferAddress;
    UINT32 OptionalRequestedBufferSize;

} DEBUGGER_EVENT_REQUEST_CUSTOM_CODE, *PDEBUGGER_EVENT_REQUEST_CUSTOM_CODE;
# 3919 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_UD_COMMAND_ACTION_TYPE
{
    DEBUGGER_UD_COMMAND_ACTION_TYPE_NONE = 0,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_PAUSE,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_CONTINUE,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_REGULAR_STEP,

} DEBUGGER_UD_COMMAND_ACTION_TYPE;





typedef struct _DEBUGGER_UD_COMMAND_ACTION
{
    DEBUGGER_UD_COMMAND_ACTION_TYPE ActionType;
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;
    UINT64 OptionalParam4;

} DEBUGGER_UD_COMMAND_ACTION, *PDEBUGGER_UD_COMMAND_ACTION;





typedef struct _DEBUGGER_UD_COMMAND_PACKET
{
    DEBUGGER_UD_COMMAND_ACTION UdAction;
    UINT64 ProcessDebuggingDetailToken;
    UINT32 TargetThreadId;
    BOOLEAN ApplyToAllPausedThreads;
    UINT32 Result;

} DEBUGGER_UD_COMMAND_PACKET, *PDEBUGGER_UD_COMMAND_PACKET;
# 3963 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE
{

    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_DETAILS,
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_LIST,
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PERFORM_SWITCH,

} DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE;






typedef struct _DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET
{
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE ActionType;
    UINT32 ProcessId;
    UINT64 Process;
    BOOLEAN IsSwitchByClkIntr;
    UCHAR ProcessName[16];
    DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS ProcessListSymDetails;
    UINT32 Result;

} DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET, *PDEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET;
# 4003 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE
{

    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PERFORM_SWITCH,
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_DETAILS,
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_LIST,

} DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE;





typedef struct _DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET
{
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE ActionType;
    UINT32 ThreadId;
    UINT32 ProcessId;
    UINT64 Thread;
    UINT64 Process;
    BOOLEAN CheckByClockInterrupt;
    UCHAR ProcessName[16];
    DEBUGGEE_THREAD_LIST_NEEDED_DETAILS ThreadListSymDetails;
    UINT32 Result;

} DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET, *PDEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET;
# 4044 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_REMOTE_STEPPING_REQUEST
{
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_IN,
    DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN,
    DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN_FOR_TRACKING,

    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER,
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU,
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU_LAST_INSTRUCTION,

} DEBUGGER_REMOTE_STEPPING_REQUEST;





typedef struct _DEBUGGEE_STEP_PACKET
{
    DEBUGGER_REMOTE_STEPPING_REQUEST StepType;





    BOOLEAN IsCurrentInstructionACall;
    UINT32 CallLength;

} DEBUGGEE_STEP_PACKET, *PDEBUGGEE_STEP_PACKET;
# 4086 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_FORMATS_PACKET
{
    UINT64 Value;
    UINT32 Result;

} DEBUGGEE_FORMATS_PACKET, *PDEBUGGEE_FORMATS_PACKET;
# 4100 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_SYMBOL_REQUEST_PACKET
{
    UINT32 ProcessId;

} DEBUGGEE_SYMBOL_REQUEST_PACKET, *PDEBUGGEE_SYMBOL_REQUEST_PACKET;
# 4113 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_BP_PACKET
{
    UINT64 Address;
    UINT32 Pid;
    UINT32 Tid;
    UINT32 Core;
    BOOLEAN RemoveAfterHit;
    BOOLEAN CheckForCallbacks;
    UINT32 Result;

} DEBUGGEE_BP_PACKET, *PDEBUGGEE_BP_PACKET;





typedef enum _DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST
{

    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_LIST_BREAKPOINTS,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_ENABLE,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_DISABLE,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_CLEAR,

} DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST;





typedef struct _DEBUGGEE_BP_LIST_OR_MODIFY_PACKET
{
    UINT64 BreakpointId;
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST Request;
    UINT32 Result;

} DEBUGGEE_BP_LIST_OR_MODIFY_PACKET, *PDEBUGGEE_BP_LIST_OR_MODIFY_PACKET;
# 4158 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _DEBUGGER_CONDITIONAL_JUMP_STATUS
{

    DEBUGGER_CONDITIONAL_JUMP_STATUS_ERROR = 0,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_NOT_CONDITIONAL_JUMP,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_TAKEN,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_NOT_TAKEN,

} DEBUGGER_CONDITIONAL_JUMP_STATUS;
# 4175 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_SCRIPT_PACKET
{
    UINT32 ScriptBufferSize;
    UINT32 ScriptBufferPointer;
    BOOLEAN IsFormat;
    UINT32 Result;





} DEBUGGEE_SCRIPT_PACKET, *PDEBUGGEE_SCRIPT_PACKET;
# 4195 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_RESULT_OF_SEARCH_PACKET
{
    UINT32 CountOfResults;
    UINT32 Result;

} DEBUGGEE_RESULT_OF_SEARCH_PACKET, *PDEBUGGEE_RESULT_OF_SEARCH_PACKET;
# 4209 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_REGISTER_READ_DESCRIPTION
{
    UINT32 RegisterID;
    UINT64 Value;
    UINT32 KernelStatus;

} DEBUGGEE_REGISTER_READ_DESCRIPTION, *PDEBUGGEE_REGISTER_READ_DESCRIPTION;
# 4244 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _MODULE_SYMBOL_DETAIL
{
    BOOLEAN IsSymbolDetailsFound;
    BOOLEAN IsLocalSymbolPath;

    BOOLEAN IsSymbolPDBAvaliable;
    BOOLEAN IsUserMode;
    BOOLEAN Is32Bit;
    UINT64 BaseAddress;
    char FilePath[260];
    char ModuleSymbolPath[260];
    char ModuleSymbolGuidAndAge[60];

} MODULE_SYMBOL_DETAIL, *PMODULE_SYMBOL_DETAIL;

typedef struct _USERMODE_LOADED_MODULE_SYMBOLS
{
    UINT64 BaseAddress;
    UINT64 Entrypoint;
    wchar_t FilePath[260];

} USERMODE_LOADED_MODULE_SYMBOLS, *PUSERMODE_LOADED_MODULE_SYMBOLS;

typedef struct _USERMODE_LOADED_MODULE_DETAILS
{
    UINT32 ProcessId;
    BOOLEAN OnlyCountModules;
    BOOLEAN Is32Bit;
    UINT32 ModulesCount;
    UINT32 Result;





} USERMODE_LOADED_MODULE_DETAILS, *PUSERMODE_LOADED_MODULE_DETAILS;






typedef void (*SymbolMapCallback)(UINT64 Address, char * ModuleName, char * ObjectName, unsigned int ObjectSize);






typedef struct _DEBUGGER_UPDATE_SYMBOL_TABLE
{
    UINT32 TotalSymbols;
    UINT32 CurrentSymbolIndex;
    MODULE_SYMBOL_DETAIL SymbolDetailPacket;

} DEBUGGER_UPDATE_SYMBOL_TABLE, *PDEBUGGER_UPDATE_SYMBOL_TABLE;
# 4309 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _DEBUGGEE_SYMBOL_UPDATE_RESULT
{
    UINT64 KernelStatus;

} DEBUGGEE_SYMBOL_UPDATE_RESULT, *PDEBUGGEE_SYMBOL_UPDATE_RESULT;
# 4343 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef BOOLEAN (*CHECK_VMX_OPERATION)();






typedef BOOLEAN (*CHECK_IMMEDIATE_MESSAGE_SENDING)(UINT32 OperationCode);





typedef BOOLEAN (*SEND_IMMEDIATE_MESSAGE)(CHAR * OptionalBuffer,
                                          UINT32 OptionalBufferLength,
                                          UINT32 OperationCode);
# 4368 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _MESSAGE_TRACING_CALLBACKS
{
    CHECK_VMX_OPERATION VmxOperationCheck;
    CHECK_IMMEDIATE_MESSAGE_SENDING CheckImmediateMessageSending;
    SEND_IMMEDIATE_MESSAGE SendImmediateMessage;

} MESSAGE_TRACING_CALLBACKS, *PMESSAGE_TRACING_CALLBACKS;
# 4400 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef BOOLEAN (*LOG_CALLBACK_PREPARE_AND_SEND_MESSAGE_TO_QUEUE)(UINT32 OperationCode,
                                                                  BOOLEAN IsImmediateMessage,
                                                                  BOOLEAN ShowCurrentSystemTime,
                                                                  BOOLEAN Priority,
                                                                  const char * Fmt,
                                                                  va_list ArgList);





typedef BOOLEAN (*LOG_CALLBACK_SEND_MESSAGE_TO_QUEUE)(UINT32 OperationCode, BOOLEAN IsImmediateMessage, CHAR * LogMessage, UINT32 BufferLen, BOOLEAN Priority);





typedef BOOLEAN (*LOG_CALLBACK_SEND_BUFFER)( UINT32 OperationCode,
                                                                           void* Buffer,
                                                 UINT32 BufferLength,
                                                 BOOLEAN Priority);





typedef BOOLEAN (*LOG_CALLBACK_CHECK_IF_BUFFER_IS_FULL)(BOOLEAN Priority);





typedef VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE (*VMM_CALLBACK_TRIGGER_EVENTS)(VMM_EVENT_TYPE_ENUM EventType,
                                                                                 VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE CallingStage,
                                                                                 void* Context,
                                                                                 BOOLEAN * PostEventRequired,
                                                                                 GUEST_REGS * Regs);





typedef BOOLEAN (*DEBUGGING_CALLBACK_HANDLE_BREAKPOINT_EXCEPTION)(UINT32 CoreId);





typedef BOOLEAN (*DEBUGGING_CALLBACK_HANDLE_DEBUG_BREAKPOINT_EXCEPTION)(UINT32 CoreId);





typedef BOOLEAN (*DEBUGGING_CALLBACK_CONDITIONAL_PAGE_FAULT_EXCEPTION)(UINT32 CoreId,
                                                                       UINT64 Address,
                                                                       UINT32 PageFaultErrorCode);





typedef BOOLEAN (*UD_CHECK_FOR_COMMAND)();





typedef void (*VMM_CALLBACK_REGISTERED_MTF_HANDLER)(UINT32 CoreId);





typedef BOOLEAN (*VMM_CALLBACK_RESTORE_EPT_STATE)(UINT32 CoreId);





typedef BOOLEAN (*VMM_CALLBACK_CHECK_UNHANDLED_EPT_VIOLATION)(UINT32 CoreId, UINT64 ViolationQualification, UINT64 GuestPhysicalAddr);





typedef void (*INTERCEPTION_CALLBACK_TRIGGER_CR3_CHANGE)(UINT32 CoreId);





typedef BOOLEAN (*INTERCEPTION_CALLBACK_TRIGGER_CLOCK_AND_IPI)( UINT32 CoreId);





typedef BOOLEAN (*ATTACHING_HANDLE_CR3_EVENTS_FOR_THREAD_INTERCEPTION)(UINT32 CoreId, CR3_TYPE NewCr3);





typedef BOOLEAN (*BREAKPOINT_CHECK_AND_HANDLE_REAPPLYING_BREAKPOINT)(UINT32 CoreId);





typedef void (*VMM_CALLBACK_NMI_BROADCAST_REQUEST_HANDLER)(UINT32 CoreId, BOOLEAN IsOnVmxNmiHandler);





typedef BOOLEAN (*KD_CHECK_AND_HANDLE_NMI_CALLBACK)(UINT32 CoreId);





typedef void (*VMM_CALLBACK_SET_LAST_ERROR)(UINT32 LastError);





typedef BOOLEAN (*VMM_CALLBACK_QUERY_TERMINATE_PROTECTED_RESOURCE)(UINT32 CoreId,
                                                                   PROTECTED_HV_RESOURCES_TYPE ResourceType,
                                                                   void* Context,
                                                                   PROTECTED_HV_RESOURCES_PASSING_OVERS PassOver);





typedef BOOLEAN (*KD_QUERY_DEBUGGER_THREAD_OR_PROCESS_TRACING_DETAILS_BY_CORE_ID)(UINT32 CoreId,
                                                                                  DEBUGGER_THREAD_PROCESS_TRACING TracingType);




typedef BOOLEAN (*VMM_CALLBACK_VMCALL_HANDLER)(UINT32 CoreId,
                                               UINT64 VmcallNumber,
                                               UINT64 OptionalParam1,
                                               UINT64 OptionalParam2,
                                               UINT64 OptionalParam3);
# 4557 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef struct _VMM_CALLBACKS
{



    LOG_CALLBACK_PREPARE_AND_SEND_MESSAGE_TO_QUEUE LogCallbackPrepareAndSendMessageToQueueWrapper;
    LOG_CALLBACK_SEND_MESSAGE_TO_QUEUE LogCallbackSendMessageToQueue;
    LOG_CALLBACK_SEND_BUFFER LogCallbackSendBuffer;
    LOG_CALLBACK_CHECK_IF_BUFFER_IS_FULL LogCallbackCheckIfBufferIsFull;




    VMM_CALLBACK_TRIGGER_EVENTS VmmCallbackTriggerEvents;
    VMM_CALLBACK_SET_LAST_ERROR VmmCallbackSetLastError;
    VMM_CALLBACK_VMCALL_HANDLER VmmCallbackVmcallHandler;
    VMM_CALLBACK_NMI_BROADCAST_REQUEST_HANDLER VmmCallbackNmiBroadcastRequestHandler;
    VMM_CALLBACK_QUERY_TERMINATE_PROTECTED_RESOURCE VmmCallbackQueryTerminateProtectedResource;
    VMM_CALLBACK_RESTORE_EPT_STATE VmmCallbackRestoreEptState;
    VMM_CALLBACK_CHECK_UNHANDLED_EPT_VIOLATION VmmCallbackCheckUnhandledEptViolations;




    DEBUGGING_CALLBACK_HANDLE_BREAKPOINT_EXCEPTION DebuggingCallbackHandleBreakpointException;
    DEBUGGING_CALLBACK_HANDLE_DEBUG_BREAKPOINT_EXCEPTION DebuggingCallbackHandleDebugBreakpointException;
    DEBUGGING_CALLBACK_CONDITIONAL_PAGE_FAULT_EXCEPTION DebuggingCallbackConditionalPageFaultException;




    INTERCEPTION_CALLBACK_TRIGGER_CR3_CHANGE InterceptionCallbackTriggerCr3ProcessChange;




    BREAKPOINT_CHECK_AND_HANDLE_REAPPLYING_BREAKPOINT BreakpointCheckAndHandleReApplyingBreakpoint;
    UD_CHECK_FOR_COMMAND UdCheckForCommand;
    KD_CHECK_AND_HANDLE_NMI_CALLBACK KdCheckAndHandleNmiCallback;
    VMM_CALLBACK_REGISTERED_MTF_HANDLER VmmCallbackRegisteredMtfHandler;
    INTERCEPTION_CALLBACK_TRIGGER_CLOCK_AND_IPI DebuggerCheckProcessOrThreadChange;
    ATTACHING_HANDLE_CR3_EVENTS_FOR_THREAD_INTERCEPTION AttachingHandleCr3VmexitsForThreadInterception;
    KD_QUERY_DEBUGGER_THREAD_OR_PROCESS_TRACING_DETAILS_BY_CORE_ID KdQueryDebuggerQueryThreadOrProcessTracingDetailsByCoreId;

} VMM_CALLBACKS, *PVMM_CALLBACKS;
# 4634 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) bool HyperDbgVmxSupportDetection();
__declspec(dllimport) void HyperDbgReadVendorString(char *);




__declspec(dllimport) int HyperDbgLoadVmm();
__declspec(dllimport) int HyperDbgUnloadVmm();
__declspec(dllimport) int HyperDbgInstallVmmDriver();
__declspec(dllimport) int HyperDbgUninstallVmmDriver();
__declspec(dllimport) int HyperDbgStopVmmDriver();




__declspec(dllimport) int HyperDbgInterpreter(char * Command);
__declspec(dllimport) void HyperDbgShowSignature();
__declspec(dllimport) void HyperDbgSetTextMessageCallback(Callback handler);
__declspec(dllimport) int HyperDbgScriptReadFileAndExecuteCommandline(int argc, char * argv[]);
__declspec(dllimport) bool HyperDbgContinuePreviousCommand();
__declspec(dllimport) bool HyperDbgCheckMultilineCommand(char * CurrentCommand, bool Reset);
# 4684 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) BOOLEAN
LogInitialize(MESSAGE_TRACING_CALLBACKS * MsgTracingCallbacks);

__declspec(dllimport) void
LogUnInitialize();

__declspec(dllimport) UINT32
LogMarkAllAsRead(BOOLEAN IsVmxRoot);

__declspec(dllimport) BOOLEAN
LogCallbackPrepareAndSendMessageToQueue(UINT32 OperationCode,
                                        BOOLEAN IsImmediateMessage,
                                        BOOLEAN ShowCurrentSystemTime,
                                        BOOLEAN Priority,
                                        const char * Fmt,
                                        ...);

__declspec(dllimport) BOOLEAN
LogCallbackPrepareAndSendMessageToQueueWrapper(UINT32 OperationCode,
                                               BOOLEAN IsImmediateMessage,
                                               BOOLEAN ShowCurrentSystemTime,
                                               BOOLEAN Priority,
                                               const char * Fmt,
                                               va_list ArgList);

__declspec(dllimport) BOOLEAN
LogCallbackSendBuffer( UINT32 OperationCode,
                                                     void* Buffer,
                           UINT32 BufferLength,
                           BOOLEAN Priority);

__declspec(dllimport) BOOLEAN
LogCallbackCheckIfBufferIsFull(BOOLEAN Priority);

__declspec(dllimport) BOOLEAN
LogCallbackSendMessageToQueue(UINT32 OperationCode, BOOLEAN IsImmediateMessage, CHAR * LogMessage, UINT32 BufferLen, BOOLEAN Priority);

__declspec(dllimport) NTSTATUS
LogRegisterEventBasedNotification(void* DeviceObject, void* Irp);

__declspec(dllimport) NTSTATUS
LogRegisterIrpBasedNotification(void* DeviceObject, void* Irp);
# 4749 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
typedef enum _LOG_TYPE
{
    LOG_INFO,
    LOG_WARNING,
    LOG_ERROR

} LOG_TYPE;
# 4919 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) int ReversingMachineStart();
__declspec(dllimport) int ReversingMachineStop();
# 4951 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) void*
ScriptEngineParse(char * str);
__declspec(dllimport) void
PrintSymbolBuffer(const void* SymbolBuffer);
__declspec(dllimport) void
PrintSymbol(void* Symbol);
__declspec(dllimport) void
RemoveSymbolBuffer(void* SymbolBuffer);
__declspec(dllimport) BOOLEAN
FuncGetNumberOfOperands(UINT64 FuncType, UINT32 * NumberOfGetOperands, UINT32 * NumberOfSetOperands);
__declspec(dllimport) BOOLEAN
ScriptEngineSetHwdbgInstanceInfo(HWDBG_INSTANCE_INFORMATION * InstancInfo);

;




__declspec(dllimport) void
ScriptEngineSetTextMessageCallback(void* Handler);
__declspec(dllimport) void
ScriptEngineSymbolAbortLoading();
__declspec(dllimport) UINT64
ScriptEngineConvertNameToAddress(const char * FunctionOrVariableName, PBOOLEAN WasFound);
__declspec(dllimport) UINT32
ScriptEngineLoadFileSymbol(UINT64 BaseAddress, const char * PdbFileName, const char * CustomModuleName);
__declspec(dllimport) UINT32
ScriptEngineUnloadAllSymbols();
__declspec(dllimport) UINT32
ScriptEngineUnloadModuleSymbol(char * ModuleName);
__declspec(dllimport) UINT32
ScriptEngineSearchSymbolForMask(const char * SearchMask);
__declspec(dllimport) BOOLEAN
ScriptEngineGetFieldOffset(CHAR * TypeName, CHAR * FieldName, UINT32 * FieldOffset);
__declspec(dllimport) BOOLEAN
ScriptEngineGetDataTypeSize(CHAR * TypeName, UINT64 * TypeSize);
__declspec(dllimport) BOOLEAN
ScriptEngineCreateSymbolTableForDisassembler(void * CallbackFunction);
__declspec(dllimport) BOOLEAN
ScriptEngineConvertFileToPdbPath(const char * LocalFilePath, char * ResultPath);
__declspec(dllimport) BOOLEAN
ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails(const char * LocalFilePath, char * PdbFilePath, char * GuidAndAgeDetails, BOOLEAN Is32BitModule);
__declspec(dllimport) BOOLEAN
ScriptEngineSymbolInitLoad(void* BufferToStoreDetails, UINT32 StoredLength, BOOLEAN DownloadIfAvailable, const char * SymbolPath, BOOLEAN IsSilentLoad);
__declspec(dllimport) BOOLEAN
ScriptEngineShowDataBasedOnSymbolTypes(const char * TypeName, UINT64 Address, BOOLEAN IsStruct, void* BufferAddress, const char * AdditionalParameters);
# 5024 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) void
    SymSetTextMessageCallback(void* Handler);
__declspec(dllimport) void
    SymbolAbortLoading();
__declspec(dllimport) UINT64
    SymConvertNameToAddress(const char * FunctionOrVariableName, PBOOLEAN WasFound);
__declspec(dllimport) UINT32
    SymLoadFileSymbol(UINT64 BaseAddress, const char * PdbFileName, const char * CustomModuleName);
__declspec(dllimport) UINT32
    SymUnloadAllSymbols();
__declspec(dllimport) UINT32
    SymUnloadModuleSymbol(char * ModuleName);
__declspec(dllimport) UINT32
    SymSearchSymbolForMask(const char * SearchMask);
__declspec(dllimport) BOOLEAN
    SymGetFieldOffset(CHAR * TypeName, CHAR * FieldName, UINT32 * FieldOffset);
__declspec(dllimport) BOOLEAN
    SymGetDataTypeSize(CHAR * TypeName, UINT64 * TypeSize);
__declspec(dllimport) BOOLEAN
    SymCreateSymbolTableForDisassembler(void * CallbackFunction);
__declspec(dllimport) BOOLEAN
    SymConvertFileToPdbPath(const char * LocalFilePath, char * ResultPath);
__declspec(dllimport) BOOLEAN
    SymConvertFileToPdbFileAndGuidAndAgeDetails(const char * LocalFilePath,
                                                char * PdbFilePath,
                                                char * GuidAndAgeDetails,
                                                BOOLEAN Is32BitModule);
__declspec(dllimport) BOOLEAN
    SymbolInitLoad(void* BufferToStoreDetails,
                   UINT32 StoredLength,
                   BOOLEAN DownloadIfAvailable,
                   const char * SymbolPath,
                   BOOLEAN IsSilentLoad);
__declspec(dllimport) BOOLEAN
    SymShowDataBasedOnSymbolTypes(const char * TypeName,
                                  UINT64 Address,
                                  BOOLEAN IsStruct,
                                  void* BufferAddress,
                                  const char * AdditionalParameters);
__declspec(dllimport) BOOLEAN
    SymQuerySizeof( const char * StructNameOrTypeName, UINT32 * SizeOfField);
__declspec(dllimport) BOOLEAN
    SymCastingQueryForFiledsAndTypes( const char * StructName,
                                          const char * FiledOfStructName,
                                           PBOOLEAN IsStructNamePointerOrNot,
                                           PBOOLEAN IsFiledOfStructNamePointerOrNot,
                                           char ** NewStructOrTypeName,
                                           UINT32 * OffsetOfFieldFromTop,
                                           UINT32 * SizeOfField);
# 5102 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) NTSTATUS
VmFuncVmxVmcall(unsigned long long VmcallNumber,
                unsigned long long OptionalParam1,
                unsigned long long OptionalParam2,
                unsigned long long OptionalParam3);

__declspec(dllimport) void
VmFuncPerformRipIncrement(UINT32 CoreId);

__declspec(dllimport) void
VmFuncSuppressRipIncrement(UINT32 CoreId);

__declspec(dllimport) void
VmFuncChangeMtfUnsettingState(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncChangeIgnoreOneMtfState(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetMonitorTrapFlag(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetRflagTrapFlag(BOOLEAN Set);

__declspec(dllimport) void
VmFuncRegisterMtfBreak(UINT32 CoreId);

__declspec(dllimport) void
VmFuncUnRegisterMtfBreak(UINT32 CoreId);

__declspec(dllimport) void
VmFuncSetLoadDebugControls(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetSaveDebugControls(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetPmcVmexit(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetMovControlRegsExiting(BOOLEAN Set, UINT64 ControlRegister, UINT64 MaskRegister);

__declspec(dllimport) void
VmFuncSetMovToCr3Vmexit(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncWriteExceptionBitmap(UINT32 BitmapMask);

__declspec(dllimport) void
VmFuncSetInterruptWindowExiting(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetNmiWindowExiting(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetNmiExiting(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetExceptionBitmap(UINT32 CoreId, UINT32 IdtIndex);

__declspec(dllimport) void
VmFuncUnsetExceptionBitmap(UINT32 CoreId, UINT32 IdtIndex);

__declspec(dllimport) void
VmFuncSetExternalInterruptExiting(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetRdtscExiting(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetMovDebugRegsExiting(UINT32 CoreId, BOOLEAN Set);

__declspec(dllimport) void
VmFuncInjectPendingExternalInterrupts(UINT32 CoreId);

__declspec(dllimport) void
VmFuncSetRflags(UINT64 Rflags);

__declspec(dllimport) void
VmFuncSetRip(UINT64 Rip);

__declspec(dllimport) void
VmFuncSetTriggerEventForVmcalls(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetTriggerEventForCpuids(BOOLEAN Set);

__declspec(dllimport) void
VmFuncSetInterruptibilityState(UINT64 InterruptibilityState);

__declspec(dllimport) void
VmFuncCheckAndEnableExternalInterrupts(UINT32 CoreId);

__declspec(dllimport) void
VmFuncDisableExternalInterruptsAndInterruptWindow(UINT32 CoreId);

__declspec(dllimport) void
VmFuncEventInjectPageFaultWithCr2(UINT32 CoreId, UINT64 Address, UINT32 PageFaultCode);

__declspec(dllimport) void
VmFuncEventInjectPageFaultRangeAddress(UINT32 CoreId,
                                       UINT64 AddressFrom,
                                       UINT64 AddressTo,
                                       UINT32 PageFaultCode);

__declspec(dllimport) void
VmFuncEventInjectInterruption(UINT32 InterruptionType,
                              UINT32 Vector,
                              BOOLEAN DeliverErrorCode,
                              UINT32 ErrorCode);

__declspec(dllimport) void
VmFuncVmxBroadcastInitialize();

__declspec(dllimport) void
VmFuncVmxBroadcastUninitialize();

__declspec(dllimport) void
VmFuncEventInjectBreakpoint();

__declspec(dllimport) void
VmFuncInvalidateEptSingleContext(UINT32 CoreId);

__declspec(dllimport) void
VmFuncInvalidateEptAllContexts();

__declspec(dllimport) void
VmFuncUninitVmm();

__declspec(dllimport) void
VmFuncEnableMtfAndChangeExternalInterruptState(UINT32 CoreId);

__declspec(dllimport) void
VmFuncEnableAndCheckForPreviousExternalInterrupts(UINT32 CoreId);

__declspec(dllimport) UINT16
VmFuncGetCsSelector();

__declspec(dllimport) UINT32
VmFuncReadExceptionBitmap();

__declspec(dllimport) UINT64
VmFuncGetLastVmexitRip(UINT32 CoreId);

__declspec(dllimport) UINT64
VmFuncGetRflags();

__declspec(dllimport) UINT64
VmFuncGetRip();

__declspec(dllimport) UINT64
VmFuncGetInterruptibilityState();

__declspec(dllimport) UINT64
VmFuncClearSteppingBits(UINT64 Interruptibility);

__declspec(dllimport) BOOLEAN
VmFuncInitVmm(VMM_CALLBACKS * VmmCallbacks);

__declspec(dllimport) UINT32
VmFuncVmxCompatibleStrlen(const CHAR * s);

__declspec(dllimport) UINT32
VmFuncVmxCompatibleWcslen(const wchar_t * s);

__declspec(dllimport) BOOLEAN
VmFuncNmiBroadcastRequest(UINT32 CoreId);

__declspec(dllimport) BOOLEAN
VmFuncNmiBroadcastInvalidateEptSingleContext(UINT32 CoreId);

__declspec(dllimport) BOOLEAN
VmFuncNmiBroadcastInvalidateEptAllContexts(UINT32 CoreId);

__declspec(dllimport) BOOLEAN
VmFuncVmxGetCurrentExecutionMode();

__declspec(dllimport) BOOLEAN
VmFuncQueryModeExecTrap();

__declspec(dllimport) INT32
VmFuncVmxCompatibleStrcmp(const CHAR * Address1, const CHAR * Address2);

__declspec(dllimport) INT32
VmFuncVmxCompatibleStrncmp(const CHAR * Address1, const CHAR * Address2, SIZE_T Num);

__declspec(dllimport) INT32
VmFuncVmxCompatibleWcscmp(const wchar_t * Address1, const wchar_t * Address2);

__declspec(dllimport) INT32
VmFuncVmxCompatibleWcsncmp(const wchar_t * Address1, const wchar_t * Address2, SIZE_T Num);

__declspec(dllimport) INT32
VmFuncVmxCompatibleMemcmp(const CHAR * Address1, const CHAR * Address2, size_t Count);





__declspec(dllimport) void
ConfigureEnableMovToCr3ExitingOnAllProcessors();

__declspec(dllimport) void
ConfigureDisableMovToCr3ExitingOnAllProcessors();

__declspec(dllimport) void
ConfigureEnableEferSyscallEventsOnAllProcessors();

__declspec(dllimport) void
ConfigureDisableEferSyscallEventsOnAllProcessors();

__declspec(dllimport) void
ConfigureSetExternalInterruptExitingOnSingleCore(UINT32 TargetCoreId);

__declspec(dllimport) void
ConfigureEnableRdtscExitingOnSingleCore(UINT32 TargetCoreId);

__declspec(dllimport) void
ConfigureEnableRdpmcExitingOnSingleCore(UINT32 TargetCoreId);

__declspec(dllimport) void
ConfigureEnableMovToDebugRegistersExitingOnSingleCore(UINT32 TargetCoreId);

__declspec(dllimport) void
ConfigureSetExceptionBitmapOnSingleCore(UINT32 TargetCoreId, UINT32 BitMask);

__declspec(dllimport) void
ConfigureEnableMovToControlRegisterExitingOnSingleCore(UINT32 TargetCoreId, DEBUGGER_EVENT_OPTIONS * BroadcastingOption);

__declspec(dllimport) void
ConfigureChangeMsrBitmapWriteOnSingleCore(UINT32 TargetCoreId, UINT64 MsrMask);

__declspec(dllimport) void
ConfigureChangeMsrBitmapReadOnSingleCore(UINT32 TargetCoreId, UINT64 MsrMask);

__declspec(dllimport) void
ConfigureChangeIoBitmapOnSingleCore(UINT32 TargetCoreId, UINT64 Port);

__declspec(dllimport) void
ConfigureEnableEferSyscallHookOnSingleCore(UINT32 TargetCoreId);

__declspec(dllimport) void
ConfigureSetEferSyscallOrSysretHookType(DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE SyscallHookType);

__declspec(dllimport) void
ConfigureDirtyLoggingInitializeOnAllProcessors();

__declspec(dllimport) void
ConfigureDirtyLoggingUninitializeOnAllProcessors();

__declspec(dllimport) void
ConfigureModeBasedExecHookUninitializeOnAllProcessors();

__declspec(dllimport) void
ConfigureUninitializeExecTrapOnAllProcessors();

__declspec(dllimport) BOOLEAN
ConfigureInitializeExecTrapOnAllProcessors();

__declspec(dllimport) BOOLEAN
ConfigureEptHook(void* TargetAddress, UINT32 ProcessId);

__declspec(dllimport) BOOLEAN
ConfigureEptHookFromVmxRoot(void* TargetAddress);

__declspec(dllimport) BOOLEAN
ConfigureEptHook2(UINT32 CoreId,
                  void* TargetAddress,
                  void* HookFunction,
                  UINT32 ProcessId);

__declspec(dllimport) BOOLEAN
ConfigureEptHook2FromVmxRoot(UINT32 CoreId,
                             void* TargetAddress,
                             void* HookFunction);

__declspec(dllimport) BOOLEAN
ConfigureEptHookMonitor(UINT32 CoreId,
                        EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR * HookingDetails,
                        UINT32 ProcessId);

__declspec(dllimport) BOOLEAN
ConfigureEptHookMonitorFromVmxRoot(UINT32 CoreId,
                                   EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR * MemoryAddressDetails);

__declspec(dllimport) BOOLEAN
ConfigureEptHookModifyInstructionFetchState(UINT32 CoreId,
                                            void* PhysicalAddress,
                                            BOOLEAN IsUnset);

__declspec(dllimport) BOOLEAN
ConfigureEptHookModifyPageReadState(UINT32 CoreId,
                                    void* PhysicalAddress,
                                    BOOLEAN IsUnset);

__declspec(dllimport) BOOLEAN
ConfigureEptHookModifyPageWriteState(UINT32 CoreId,
                                     void* PhysicalAddress,
                                     BOOLEAN IsUnset);

__declspec(dllimport) BOOLEAN
ConfigureEptHookUnHookSingleAddress(UINT64 VirtualAddress,
                                    UINT64 PhysAddress,
                                    UINT32 ProcessId);

__declspec(dllimport) BOOLEAN
ConfigureEptHookUnHookSingleAddressFromVmxRoot(UINT64 VirtualAddress,
                                               UINT64 PhysAddress,
                                               EPT_SINGLE_HOOK_UNHOOKING_DETAILS * TargetUnhookingDetails);

__declspec(dllimport) void
ConfigureEptHookAllocateExtraHookingPagesForMemoryMonitorsAndExecEptHooks(UINT32 Count);

__declspec(dllimport) void
ConfigureEptHookReservePreallocatedPoolsForEptHooks(UINT32 Count);

__declspec(dllimport) BOOLEAN
ConfigureExecTrapAddProcessToWatchingList(UINT32 ProcessId);

__declspec(dllimport) BOOLEAN
ConfigureExecTrapRemoveProcessFromWatchingList(UINT32 ProcessId);





__declspec(dllimport) NTSTATUS
DirectVmcallTest(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallPerformVmcall(UINT32 CoreId, UINT64 VmcallNumber, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallChangeMsrBitmapRead(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallChangeMsrBitmapWrite(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallChangeIoBitmap(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableRdpmcExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableRdtscpExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableMov2DebugRegsExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallSetExceptionBitmap(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableExternalInterruptExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableMovToCrExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallEnableEferSyscall(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallSetHiddenBreakpointHook(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallInvalidateEptAllContexts(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallInvalidateSingleContext(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallUnsetExceptionBitmap(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallUnhookSinglePage(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallSetDisableExternalInterruptExitingOnlyOnClearingInterruptEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallResetMsrBitmapRead(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallResetMsrBitmapWrite(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallResetExceptionBitmapOnlyOnClearingExceptionEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallResetIoBitmap(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallDisableRdtscExitingForClearingTscEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallDisableRdpmcExiting(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallDisableEferSyscallEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallDisableMov2DrExitingForClearingDrEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);

__declspec(dllimport) NTSTATUS
DirectVmcallDisableMov2CrExitingForClearingCrEvents(UINT32 CoreId, DIRECT_VMCALL_PARAMETERS * DirectVmcallOptions);





__declspec(dllimport) BOOLEAN
DisassemblerShowInstructionsInVmxNonRootMode(void* Address, UINT32 Length, BOOLEAN Is32Bit);

__declspec(dllimport) BOOLEAN
DisassemblerShowOneInstructionInVmxNonRootMode(void* Address, UINT64 ActualRip, BOOLEAN Is32Bit);

__declspec(dllimport) UINT32
DisassemblerShowOneInstructionInVmxRootMode(void* Address, BOOLEAN Is32Bit);
# 5530 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) UINT64
VirtualAddressToPhysicalAddress( void* VirtualAddress);

__declspec(dllimport) UINT64
VirtualAddressToPhysicalAddressByProcessId( void* VirtualAddress,
                                                UINT32 ProcessId);

__declspec(dllimport) UINT64
VirtualAddressToPhysicalAddressByProcessCr3( void* VirtualAddress,
                                                 CR3_TYPE TargetCr3);

__declspec(dllimport) UINT64
VirtualAddressToPhysicalAddressOnTargetProcess( void* VirtualAddress);




__declspec(dllimport) UINT64
PhysicalAddressToVirtualAddress( UINT64 PhysicalAddress);

__declspec(dllimport) UINT64
PhysicalAddressToVirtualAddressByProcessId( void* PhysicalAddress, UINT32 ProcessId);

__declspec(dllimport) UINT64
PhysicalAddressToVirtualAddressByCr3( void* PhysicalAddress, CR3_TYPE TargetCr3);

__declspec(dllimport) UINT64
PhysicalAddressToVirtualAddressOnTargetProcess( void* PhysicalAddress);




__declspec(dllimport) CR3_TYPE
SwitchToProcessMemoryLayout( UINT32 ProcessId);

__declspec(dllimport) CR3_TYPE
SwitchToCurrentProcessMemoryLayout();

__declspec(dllimport) CR3_TYPE
SwitchToProcessMemoryLayoutByCr3( CR3_TYPE TargetCr3);

__declspec(dllimport) void
SwitchToPreviousProcess( CR3_TYPE PreviousProcess);




__declspec(dllimport) BOOLEAN
CheckAddressValidityUsingTsx(CHAR * Address);

__declspec(dllimport) BOOLEAN
CheckAccessValidityAndSafety(UINT64 TargetAddress, UINT32 Size);

__declspec(dllimport) BOOLEAN
CheckAddressPhysical(UINT64 PAddr);

__declspec(dllimport) UINT32
CheckAddressMaximumInstructionLength(void* Address);




__declspec(dllimport) CR3_TYPE
LayoutGetCurrentProcessCr3();

__declspec(dllimport) CR3_TYPE
LayoutGetExactGuestProcessCr3();
# 5606 "D:\\workspace\\workspace\\branch\\gui\\ux\\sdk\\bug\\2.c"
__declspec(dllimport) void*
MemoryMapperGetPteVa( void* Va,
                          PAGING_LEVEL Level);

__declspec(dllimport) void*
MemoryMapperGetPteVaByCr3( void* Va,
                               PAGING_LEVEL Level,
                               CR3_TYPE TargetCr3);

__declspec(dllimport) void*
MemoryMapperGetPteVaWithoutSwitchingByCr3( void* Va,
                                               PAGING_LEVEL Level,
                                               CR3_TYPE TargetCr3);

__declspec(dllimport) void*
MemoryMapperGetPteVaOnTargetProcess( void* Va,
                                         PAGING_LEVEL Level);

__declspec(dllimport) void*
MemoryMapperSetExecuteDisableToPteOnTargetProcess( void* Va,
                                                       BOOLEAN Set);

__declspec(dllimport) BOOLEAN
MemoryMapperCheckPteIsPresentOnTargetProcess(void* Va,
                                             PAGING_LEVEL Level);




__declspec(dllimport) BOOLEAN
MemoryMapperReadMemorySafe( UINT64 VaAddressToRead,
                                   void* BufferToSaveMemory,
                                SIZE_T SizeToRead);

__declspec(dllimport) BOOLEAN
MemoryMapperReadMemorySafeByPhysicalAddress( UINT64 PaAddressToRead,
                                                    UINT64 BufferToSaveMemory,
                                                 SIZE_T SizeToRead);

__declspec(dllimport) BOOLEAN
MemoryMapperReadMemorySafeOnTargetProcess( UINT64 VaAddressToRead,
                                                  void* BufferToSaveMemory,
                                               SIZE_T SizeToRead);




__declspec(dllimport) UINT32
DisassemblerLengthDisassembleEngine(void* Address, BOOLEAN Is32Bit);

__declspec(dllimport) UINT32
DisassemblerLengthDisassembleEngineInVmxRootOnTargetProcess(void* Address, BOOLEAN Is32Bit);




__declspec(dllimport) BOOLEAN
MemoryMapperWriteMemorySafe( UINT64 Destination,
                                 void* Source,
                                 SIZE_T SizeToWrite,
                                 CR3_TYPE TargetProcessCr3);

__declspec(dllimport) BOOLEAN
MemoryMapperWriteMemorySafeOnTargetProcess( UINT64 Destination,
                                                void* Source,
                                                SIZE_T Size);

__declspec(dllimport) BOOLEAN
MemoryMapperWriteMemorySafeByPhysicalAddress( UINT64 DestinationPa,
                                                  UINT64 Source,
                                                  SIZE_T SizeToWrite);

__declspec(dllimport) BOOLEAN
MemoryMapperWriteMemoryUnsafe( UINT64 Destination,
                                   void* Source,
                                   SIZE_T SizeToWrite,
                                   UINT32 TargetProcessId);




__declspec(dllimport) UINT64
MemoryMapperReserveUsermodeAddressOnTargetProcess( UINT32 ProcessId,
                                                       BOOLEAN Allocate);

__declspec(dllimport) BOOLEAN
MemoryMapperFreeMemoryOnTargetProcess( UINT32 ProcessId,
                                              void* BaseAddress);




__declspec(dllimport) BOOLEAN
MemoryMapperSetSupervisorBitWithoutSwitchingByCr3( void* Va,
                                                       BOOLEAN Set,
                                                       PAGING_LEVEL Level,
                                                       CR3_TYPE TargetCr3);

__declspec(dllimport) BOOLEAN
MemoryMapperCheckIfPageIsNxBitSetOnTargetProcess( void* Va);

__declspec(dllimport) BOOLEAN
MemoryMapperCheckIfPdeIsLargePageOnTargetProcess( void* Va);





__declspec(dllimport) BOOLEAN
MemoryManagerReadProcessMemoryNormal(void* PID, void* Address, DEBUGGER_READ_MEMORY_TYPE MemType, void* UserBuffer, SIZE_T Size, PSIZE_T ReturnSize);





__declspec(dllimport) BOOLEAN
PoolManagerCheckAndPerformAllocationAndDeallocation();

__declspec(dllimport) BOOLEAN
PoolManagerRequestAllocation(SIZE_T Size, UINT32 Count, POOL_ALLOCATION_INTENTION Intention);

__declspec(dllimport) UINT64
PoolManagerRequestPool(POOL_ALLOCATION_INTENTION Intention, BOOLEAN RequestNewPool, UINT32 Size);

__declspec(dllimport) BOOLEAN
PoolManagerFreePool(UINT64 AddressToFree);

__declspec(dllimport) void
PoolManagerShowPreAllocatedPools();





__declspec(dllimport) void
SetGuestCsSel(PVMX_SEGMENT_SELECTOR Cs);

__declspec(dllimport) void
SetGuestCs(PVMX_SEGMENT_SELECTOR Cs);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestCs();

__declspec(dllimport) void
SetGuestSsSel(PVMX_SEGMENT_SELECTOR Ss);

__declspec(dllimport) void
SetGuestSs(PVMX_SEGMENT_SELECTOR Ss);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestSs();

__declspec(dllimport) void
SetGuestDsSel(PVMX_SEGMENT_SELECTOR Ds);

__declspec(dllimport) void
SetGuestDs(PVMX_SEGMENT_SELECTOR Ds);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestDs();

__declspec(dllimport) void
SetGuestFsSel(PVMX_SEGMENT_SELECTOR Fs);

__declspec(dllimport) void
SetGuestFs(PVMX_SEGMENT_SELECTOR Fs);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestFs();

__declspec(dllimport) void
SetGuestGsSel(PVMX_SEGMENT_SELECTOR Gs);

__declspec(dllimport) void
SetGuestGs(PVMX_SEGMENT_SELECTOR Gs);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestGs();

__declspec(dllimport) void
SetGuestEsSel(PVMX_SEGMENT_SELECTOR Es);

__declspec(dllimport) void
SetGuestEs(PVMX_SEGMENT_SELECTOR Es);

__declspec(dllimport) VMX_SEGMENT_SELECTOR
GetGuestEs();

__declspec(dllimport) void
SetGuestIdtr(UINT64 Idtr);

__declspec(dllimport) UINT64
GetGuestIdtr();

__declspec(dllimport) void
SetGuestLdtr(UINT64 Ldtr);

__declspec(dllimport) UINT64
GetGuestLdtr();

__declspec(dllimport) void
SetGuestGdtr(UINT64 Gdtr);

__declspec(dllimport) UINT64
GetGuestGdtr();

__declspec(dllimport) void
SetGuestTr(UINT64 Tr);

__declspec(dllimport) UINT64
GetGuestTr();

__declspec(dllimport) void
SetGuestRFlags(UINT64 RFlags);

__declspec(dllimport) UINT64
GetGuestRFlags();

__declspec(dllimport) void
SetGuestRIP(UINT64 RIP);

__declspec(dllimport) void
SetGuestRSP(UINT64 RSP);

__declspec(dllimport) UINT64
GetGuestRIP();

__declspec(dllimport) UINT64
GetGuestCr0();

__declspec(dllimport) UINT64
GetGuestCr2();

__declspec(dllimport) UINT64
GetGuestCr3();

__declspec(dllimport) UINT64
GetGuestCr4();

__declspec(dllimport) UINT64
GetGuestCr8();

__declspec(dllimport) void
SetGuestCr0(UINT64 Cr0);

__declspec(dllimport) void
SetGuestCr2(UINT64 Cr2);

__declspec(dllimport) void
SetGuestCr3(UINT64 Cr3);

__declspec(dllimport) void
SetGuestCr4(UINT64 Cr4);

__declspec(dllimport) void
SetGuestCr8(UINT64 Cr8);

__declspec(dllimport) UINT64
GetGuestDr0();

__declspec(dllimport) UINT64
GetGuestDr1();

__declspec(dllimport) UINT64
GetGuestDr2();

__declspec(dllimport) UINT64
GetGuestDr3();

__declspec(dllimport) UINT64
GetGuestDr6();

__declspec(dllimport) UINT64
GetGuestDr7();

__declspec(dllimport) void
SetGuestDr0(UINT64 value);

__declspec(dllimport) void
SetGuestDr1(UINT64 value);

__declspec(dllimport) void
SetGuestDr2(UINT64 value);

__declspec(dllimport) void
SetGuestDr3(UINT64 value);

__declspec(dllimport) void
SetGuestDr6(UINT64 value);

__declspec(dllimport) void
SetGuestDr7(UINT64 value);

__declspec(dllimport) BOOLEAN
SetDebugRegisters(UINT32 DebugRegNum, DEBUG_REGISTER_TYPE ActionType, BOOLEAN ApplyToVmcs, UINT64 TargetAddress);





__declspec(dllimport) NTSTATUS
TransparentHideDebugger(PDEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE Measurements);

__declspec(dllimport) NTSTATUS
TransparentUnhideDebugger();





__declspec(dllimport) void
BroadcastEnableBreakpointExitingOnExceptionBitmapAllCores();

__declspec(dllimport) void
BroadcastDisableBreakpointExitingOnExceptionBitmapAllCores();

__declspec(dllimport) void
BroadcastEnableDbAndBpExitingAllCores();

__declspec(dllimport) void
BroadcastDisableDbAndBpExitingAllCores();

__declspec(dllimport) void
BroadcastEnableRdtscExitingAllCores();

__declspec(dllimport) void
BroadcastDisableRdtscExitingAllCores();

__declspec(dllimport) void
BroadcastChangeAllMsrBitmapReadAllCores(UINT64 BitmapMask);

__declspec(dllimport) void
BroadcastResetChangeAllMsrBitmapReadAllCores();

__declspec(dllimport) void
BroadcastChangeAllMsrBitmapWriteAllCores(UINT64 BitmapMask);

__declspec(dllimport) void
BroadcastResetAllMsrBitmapWriteAllCores();

__declspec(dllimport) void
BroadcastDisableRdtscExitingForClearingEventsAllCores();

__declspec(dllimport) void
BroadcastDisableMov2ControlRegsExitingForClearingEventsAllCores(PDEBUGGER_EVENT_OPTIONS BroadcastingOption);

__declspec(dllimport) void
BroadcastDisableMov2DebugRegsExitingForClearingEventsAllCores();

__declspec(dllimport) void
BroadcastEnableRdpmcExitingAllCores();

__declspec(dllimport) void
BroadcastDisableRdpmcExitingAllCores();

__declspec(dllimport) void
BroadcastSetExceptionBitmapAllCores(UINT64 ExceptionIndex);

__declspec(dllimport) void
BroadcastUnsetExceptionBitmapAllCores(UINT64 ExceptionIndex);

__declspec(dllimport) void
BroadcastResetExceptionBitmapAllCores();

__declspec(dllimport) void
BroadcastEnableMovControlRegisterExitingAllCores(PDEBUGGER_EVENT_OPTIONS BroadcastingOption);

__declspec(dllimport) void
BroadcastDisableMovToControlRegistersExitingAllCores(PDEBUGGER_EVENT_OPTIONS BroadcastingOption);

__declspec(dllimport) void
BroadcastEnableMovDebugRegistersExitingAllCores();

__declspec(dllimport) void
BroadcastDisableMovDebugRegistersExitingAllCores();

__declspec(dllimport) void
BroadcastSetExternalInterruptExitingAllCores();

__declspec(dllimport) void
BroadcastUnsetExternalInterruptExitingOnlyOnClearingInterruptEventsAllCores();

__declspec(dllimport) void
BroadcastIoBitmapChangeAllCores(UINT64 Port);

__declspec(dllimport) void
BroadcastIoBitmapResetAllCores();

__declspec(dllimport) void
BroadcastEnableMovToCr3ExitingOnAllProcessors();

__declspec(dllimport) void
BroadcastDisableMovToCr3ExitingOnAllProcessors();

__declspec(dllimport) void
BroadcastEnableEferSyscallEventsOnAllProcessors();

__declspec(dllimport) void
BroadcastDisableEferSyscallEventsOnAllProcessors();
