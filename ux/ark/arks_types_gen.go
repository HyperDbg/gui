package ark

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type ArksType uint8

const (
	KernelTablesType ArksType = iota
	ExplorerType
	TaskManagerType
	DriverToolType
	RegistryEditorType
	HardwareMonitorType
	HardwareHookType
	RandomHookType
	EnvironmentEditorType
	VstartType
	CryptType
	PackerType
)

func (t ArksType) Valid() bool {
	return t >= KernelTablesType && t <= PackerType
}

func ArksTypeBy[T stream.Integer](v T) ArksType {
	return ArksType(v)
}

func (t ArksType) AssertBy(name string) ArksType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t ArksType) String() string {
	switch t {
	case KernelTablesType:
		return "KernelTables"
	case ExplorerType:
		return "Explorer"
	case TaskManagerType:
		return "TaskManager"
	case DriverToolType:
		return "DriverTool"
	case RegistryEditorType:
		return "RegistryEditor"
	case HardwareMonitorType:
		return "HardwareMonitor"
	case HardwareHookType:
		return "HardwareHook"
	case RandomHookType:
		return "RandomHook"
	case EnvironmentEditorType:
		return "EnvironmentEditor"
	case VstartType:
		return "Vstart"
	case CryptType:
		return "Crypt"
	case PackerType:
		return "Packer"
	default:
		panic("InvalidType")
	}
}

func (t ArksType) Tooltip() string {
	switch t {
	case KernelTablesType:
		return "kernelTables"
	case ExplorerType:
		return "explorer"
	case TaskManagerType:
		return "taskManager"
	case DriverToolType:
		return "driverTool"
	case RegistryEditorType:
		return "registryEditor"
	case HardwareMonitorType:
		return "hardwareMonitor"
	case HardwareHookType:
		return "hardwareHook"
	case RandomHookType:
		return "randomHook"
	case EnvironmentEditorType:
		return "environmentEditor"
	case VstartType:
		return "vstart"
	case CryptType:
		return "crypt"
	case PackerType:
		return "packer"
	default:
		panic("InvalidType")
	}
}

func (t ArksType) Names() []string {
	return []string{
		"KernelTables",
		"Explorer",
		"TaskManager",
		"DriverTool",
		"RegistryEditor",
		"HardwareMonitor",
		"HardwareHook",
		"RandomHook",
		"EnvironmentEditor",
		"Vstart",
		"Crypt",
		"Packer",
	}
}

func (t ArksType) EnumTypes() []ArksType {
	return []ArksType{
		KernelTablesType,
		ExplorerType,
		TaskManagerType,
		DriverToolType,
		RegistryEditorType,
		HardwareMonitorType,
		HardwareHookType,
		RandomHookType,
		EnvironmentEditorType,
		VstartType,
		CryptType,
		PackerType,
	}
}

func (t ArksType) SvgFileName() string {
	return t.String() + ".svg"
}
