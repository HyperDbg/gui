// Code generated by gengo. DO NOT EDIT.
package bug

import (
	"unsafe"

	"github.com/can1357/gengo/gengort"
)

const GengoLibraryName = "bug"

var GengoLibrary = gengort.NewLibrary(GengoLibraryName)

type (
	Cr3Type struct{}
	Anon9_6 struct {
		Raw [1]int32
	}
)
type Anon13_10 struct {
	Pcid            int32
	PageFrameNumber int32
	Reserved1       int32
	Reserved_2      int32
	PcidInvalidate  int32
}
type (
	_Int128T           = any
	_Uint128T          = any
	__NSConstantString = any
	SizeT              = uint64
	_BuiltinMsVaList   = *byte
	_BuiltinVaList     = *byte
	Pcr3Type           = *Cr3Type
)

func (s Anon9_6) Flags() int32 {
	return gengort.ReadBitcast[int32](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon9_6) SetFlags(v int32) {
	gengort.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

func (s Anon9_6) Fields() Anon13_10 {
	return gengort.ReadBitcast[Anon13_10](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}

func (s *Anon9_6) SetFields(v Anon13_10) {
	gengort.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

// Gengo init function.
func init() {
	gengort.Validate((*Cr3Type)(nil), 0x4, 0x1)
	gengort.Validate((*Anon9_6)(nil), 0x4, 0x4)
	gengort.Validate((*Anon13_10)(nil), 0x14, 0x4, "Pcid", 0x0, "PageFrameNumber", 0x4, "Reserved1", 0x8, "Reserved_2", 0xc, "PcidInvalidate", 0x10)
}
