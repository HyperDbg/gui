// Code generated by gengo. DO NOT EDIT.
package bug

import (
	"unsafe"
	"github.com/can1357/gengo/gengort"
)

const GengoLibraryName = "bug"

var GengoLibrary = gengort.NewLibrary(GengoLibraryName)

type Cr3Type struct {
	Anon12_6
}
type Anon12_6 struct {
	Raw [1]int64
}
type Anon16_10 struct {
	Pcid            Uint64
	PageFrameNumber Uint64
	Reserved1       Uint64
	Reserved_2      Uint64
	PcidInvalidate  Uint64
}
type _Int128T = any
type _Uint128T = any
type __NSConstantString = any
type SizeT = uint64
type _BuiltinMsVaList = *byte
type _BuiltinVaList = *byte
type Uint64 = uint64
type Puint64 = *uint64
type Pcr3Type = *Cr3Type

func (s Anon12_6) Flags() Uint64 {
	return gengort.ReadBitcast[Uint64](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}
func (s *Anon12_6) SetFlags(v Uint64) {
	gengort.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}
func (s Anon12_6) Fields() Anon16_10 {
	return gengort.ReadBitcast[Anon16_10](unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0))
}
func (s *Anon12_6) SetFields(v Anon16_10) {
	gengort.WriteBitcast(unsafe.Add(unsafe.Pointer(unsafe.SliceData(s.Raw[:])), 0), v)
}

//  Gengo init function.
func init() {
	gengort.Validate((*Cr3Type)(nil), 0x8, 0x8)
	gengort.Validate((*Anon12_6)(nil), 0x8, 0x8)
	gengort.Validate((*Anon16_10)(nil), 0x8, 0x8, "Pcid", 0xc, "PageFrameNumber", 0x30, "Reserved1", 0x3c, "Reserved_2", 0x3f, "PcidInvalidate", 0x40)
}
