package main

import (
	"strings"

	"golang.org/x/exp/constraints"
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type DebuggerErrorKind byte

const (
	TagNotExistsKind DebuggerErrorKind = iota
	InvalidActionTypeKind
	ActionBufferSizeIsZeroKind
	EventTypeIsInvalidKind
	UnableToCreateEventKind
	InvalidAddressKind
	InvalidCoreIdKind
	ExceptionIndexExceedFirst32EntriesKind
	InterruptIndexIsNotValidKind
	UnableToHideOrUnhideDebuggerKind
	DebuggerAlreadyUhideKind
	EditMemoryStatusInvalidParameterKind
	EditMemoryStatusInvalidAddressBasedOnCurrentProcessKind
	EditMemoryStatusInvalidAddressBasedOnOtherProcessKind
	ModifyEventsInvalidTagKind
	ModifyEventsInvalidTypeOfActionKind
	SteppingInvalidParameterKind
	SteppingsEitherThreadNotFoundOrDisabledKind
	PreparingDebuggeeInvalidBaudrateKind
	PreparingDebuggeeInvalidSerialPortKind
	PreparingDebuggeeInvalidCoreInRemoteDebuggeKind
	PreparingDebuggeeUnableToSwitchToNewProcessKind
	PreparingDebuggeeToRunScriptKind
	InvalidRegisterNumberKind
	MaximumBreakpointWithoutContinueKind
	BreakpointAlreadyExistsOnTheAddressKind
	BreakpointIdNotFoundKind
	BreakpointAlreadyDisabledKind
	BreakpointAlreadyEnabledKind
	MemoryTypeInvalidKind
	InvalidProcessIdKind
	EventIsNotAppliedKind
	DetailsOrSwitchProcessInvalidParameterKind
	DetailsOrSwitchThreadInvalidParameterKind
	MaximumBreakpointForASinglePageIsHitKind
	PreAllocatedBufferIsEmptyKind
	EptCouldNotSplitTheLargePageTo4KbPagesKind
	EptFailedToGetPml1EntryOfTargetAddressKind
	EptMultipleHooksInASinglePageKind
	CouldNotBuildTheEptHookKind
	CouldNotFindAllocationTypeKind
	InvalidTestQueryIndexKind
	UnableToAttachToTargetUserModeProcessKind
	UnableToRemoveHooksEntrypointNotReachedKind
	UnableToRemoveHooksKind
	FunctionsForInitializingPebAddressesAreNotInitializedKind
	UnableToDetect32BitOr64BitProcessKind
	UnableToKillTheProcessKind
	InvalidThreadDebuggingTokenKind
	UnableToPauseTheProcessThreadsKind
	UnableToAttachToAnAlreadyAttachedProcessKind
	TheUserDebuggerNotAttachedToTheProcessKind
	UnableToDetachAsThereArePausedThreadsKind
	UnableToSwitchProcessIdOrThreadIdIsInvalidKind
	UnableToSwitchThereIsNoThreadOnTheProcessKind
	UnableToGetModulesOfTheProcessKind
	UnableToGetCallstackKind
	UnableToQueryCountOfProcessesOrThreadsKind
	UsingShortCircuitingEventWithPostEventModeIsForbiddednKind
	UnknownTestQueryReceivedKind
	ReadingMemoryInvalidParameterKind
	TheTrapFlagListIsFullKind
	UnableToKillTheProcessDoesNotExistsKind
	ModeExecutionIsInvalidKind
	ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootModeKind
	InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionalsKind
	InstantEventRegularPreallocatedBufferNotFoundKind
	InstantEventBigPreallocatedBufferNotFoundKind
	UnableToCreateActionCannotAllocateBufferKind
	InstantEventActionRegularPreallocatedBufferNotFoundKind
	InstantEventActionBigPreallocatedBufferNotFoundKind
	InstantEventPreallocatedBufferIsNotEnoughForActionBufferKind
	InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStackKind
	InstantEventRegularRequestedSafeBufferNotFoundKind
	InstantEventBigRequestedSafeBufferNotFoundKind
	InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBufferKind
	UnableToAllocateRequestedSafeBufferKind
	CouldNotFindPreactivationTypeKind
	TheModeExecTrapIsNotInitializedKind
	TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFullKind
	NotAllCoresAreLockedForApplyingInstantEventKind
	TargetSwitchingCoreIsNotLockedKind
	InvalidPhysicalAddressKind
	InvalidDebuggerErrorKind
)

func ConvertInteger2DebuggerErrorKind[T constraints.Integer](v T) DebuggerErrorKind {
	return DebuggerErrorKind(v)
}

func (k DebuggerErrorKind) AssertKind(kinds string) DebuggerErrorKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidDebuggerErrorKind
}

func (k DebuggerErrorKind) String() string {
	switch k {
	case TagNotExistsKind:
		return "TagNotExists"
	case InvalidActionTypeKind:
		return "InvalidActionType"
	case ActionBufferSizeIsZeroKind:
		return "ActionBufferSizeIsZero"
	case EventTypeIsInvalidKind:
		return "EventTypeIsInvalid"
	case UnableToCreateEventKind:
		return "UnableToCreateEvent"
	case InvalidAddressKind:
		return "InvalidAddress"
	case InvalidCoreIdKind:
		return "InvalidCoreId"
	case ExceptionIndexExceedFirst32EntriesKind:
		return "ExceptionIndexExceedFirst32Entries"
	case InterruptIndexIsNotValidKind:
		return "InterruptIndexIsNotValid"
	case UnableToHideOrUnhideDebuggerKind:
		return "UnableToHideOrUnhideDebugger"
	case DebuggerAlreadyUhideKind:
		return "DebuggerAlreadyUhide"
	case EditMemoryStatusInvalidParameterKind:
		return "EditMemoryStatusInvalidParameter"
	case EditMemoryStatusInvalidAddressBasedOnCurrentProcessKind:
		return "EditMemoryStatusInvalidAddressBasedOnCurrentProcess"
	case EditMemoryStatusInvalidAddressBasedOnOtherProcessKind:
		return "EditMemoryStatusInvalidAddressBasedOnOtherProcess"
	case ModifyEventsInvalidTagKind:
		return "ModifyEventsInvalidTag"
	case ModifyEventsInvalidTypeOfActionKind:
		return "ModifyEventsInvalidTypeOfAction"
	case SteppingInvalidParameterKind:
		return "SteppingInvalidParameter"
	case SteppingsEitherThreadNotFoundOrDisabledKind:
		return "SteppingsEitherThreadNotFoundOrDisabled"
	case PreparingDebuggeeInvalidBaudrateKind:
		return "PreparingDebuggeeInvalidBaudrate"
	case PreparingDebuggeeInvalidSerialPortKind:
		return "PreparingDebuggeeInvalidSerialPort"
	case PreparingDebuggeeInvalidCoreInRemoteDebuggeKind:
		return "PreparingDebuggeeInvalidCoreInRemoteDebugge"
	case PreparingDebuggeeUnableToSwitchToNewProcessKind:
		return "PreparingDebuggeeUnableToSwitchToNewProcess"
	case PreparingDebuggeeToRunScriptKind:
		return "PreparingDebuggeeToRunScript"
	case InvalidRegisterNumberKind:
		return "InvalidRegisterNumber"
	case MaximumBreakpointWithoutContinueKind:
		return "MaximumBreakpointWithoutContinue"
	case BreakpointAlreadyExistsOnTheAddressKind:
		return "BreakpointAlreadyExistsOnTheAddress"
	case BreakpointIdNotFoundKind:
		return "BreakpointIdNotFound"
	case BreakpointAlreadyDisabledKind:
		return "BreakpointAlreadyDisabled"
	case BreakpointAlreadyEnabledKind:
		return "BreakpointAlreadyEnabled"
	case MemoryTypeInvalidKind:
		return "MemoryTypeInvalid"
	case InvalidProcessIdKind:
		return "InvalidProcessId"
	case EventIsNotAppliedKind:
		return "EventIsNotApplied"
	case DetailsOrSwitchProcessInvalidParameterKind:
		return "DetailsOrSwitchProcessInvalidParameter"
	case DetailsOrSwitchThreadInvalidParameterKind:
		return "DetailsOrSwitchThreadInvalidParameter"
	case MaximumBreakpointForASinglePageIsHitKind:
		return "MaximumBreakpointForASinglePageIsHit"
	case PreAllocatedBufferIsEmptyKind:
		return "PreAllocatedBufferIsEmpty"
	case EptCouldNotSplitTheLargePageTo4KbPagesKind:
		return "EptCouldNotSplitTheLargePageTo4KbPages"
	case EptFailedToGetPml1EntryOfTargetAddressKind:
		return "EptFailedToGetPml1EntryOfTargetAddress"
	case EptMultipleHooksInASinglePageKind:
		return "EptMultipleHooksInASinglePage"
	case CouldNotBuildTheEptHookKind:
		return "CouldNotBuildTheEptHook"
	case CouldNotFindAllocationTypeKind:
		return "CouldNotFindAllocationType"
	case InvalidTestQueryIndexKind:
		return "InvalidTestQueryIndex"
	case UnableToAttachToTargetUserModeProcessKind:
		return "UnableToAttachToTargetUserModeProcess"
	case UnableToRemoveHooksEntrypointNotReachedKind:
		return "UnableToRemoveHooksEntrypointNotReached"
	case UnableToRemoveHooksKind:
		return "UnableToRemoveHooks"
	case FunctionsForInitializingPebAddressesAreNotInitializedKind:
		return "FunctionsForInitializingPebAddressesAreNotInitialized"
	case UnableToDetect32BitOr64BitProcessKind:
		return "UnableToDetect32BitOr64BitProcess"
	case UnableToKillTheProcessKind:
		return "UnableToKillTheProcess"
	case InvalidThreadDebuggingTokenKind:
		return "InvalidThreadDebuggingToken"
	case UnableToPauseTheProcessThreadsKind:
		return "UnableToPauseTheProcessThreads"
	case UnableToAttachToAnAlreadyAttachedProcessKind:
		return "UnableToAttachToAnAlreadyAttachedProcess"
	case TheUserDebuggerNotAttachedToTheProcessKind:
		return "TheUserDebuggerNotAttachedToTheProcess"
	case UnableToDetachAsThereArePausedThreadsKind:
		return "UnableToDetachAsThereArePausedThreads"
	case UnableToSwitchProcessIdOrThreadIdIsInvalidKind:
		return "UnableToSwitchProcessIdOrThreadIdIsInvalid"
	case UnableToSwitchThereIsNoThreadOnTheProcessKind:
		return "UnableToSwitchThereIsNoThreadOnTheProcess"
	case UnableToGetModulesOfTheProcessKind:
		return "UnableToGetModulesOfTheProcess"
	case UnableToGetCallstackKind:
		return "UnableToGetCallstack"
	case UnableToQueryCountOfProcessesOrThreadsKind:
		return "UnableToQueryCountOfProcessesOrThreads"
	case UsingShortCircuitingEventWithPostEventModeIsForbiddednKind:
		return "UsingShortCircuitingEventWithPostEventModeIsForbiddedn"
	case UnknownTestQueryReceivedKind:
		return "UnknownTestQueryReceived"
	case ReadingMemoryInvalidParameterKind:
		return "ReadingMemoryInvalidParameter"
	case TheTrapFlagListIsFullKind:
		return "TheTrapFlagListIsFull"
	case UnableToKillTheProcessDoesNotExistsKind:
		return "UnableToKillTheProcessDoesNotExists"
	case ModeExecutionIsInvalidKind:
		return "ModeExecutionIsInvalid"
	case ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootModeKind:
		return "ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootMode"
	case InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionalsKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionals"
	case InstantEventRegularPreallocatedBufferNotFoundKind:
		return "InstantEventRegularPreallocatedBufferNotFound"
	case InstantEventBigPreallocatedBufferNotFoundKind:
		return "InstantEventBigPreallocatedBufferNotFound"
	case UnableToCreateActionCannotAllocateBufferKind:
		return "UnableToCreateActionCannotAllocateBuffer"
	case InstantEventActionRegularPreallocatedBufferNotFoundKind:
		return "InstantEventActionRegularPreallocatedBufferNotFound"
	case InstantEventActionBigPreallocatedBufferNotFoundKind:
		return "InstantEventActionBigPreallocatedBufferNotFound"
	case InstantEventPreallocatedBufferIsNotEnoughForActionBufferKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForActionBuffer"
	case InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStackKind:
		return "InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStack"
	case InstantEventRegularRequestedSafeBufferNotFoundKind:
		return "InstantEventRegularRequestedSafeBufferNotFound"
	case InstantEventBigRequestedSafeBufferNotFoundKind:
		return "InstantEventBigRequestedSafeBufferNotFound"
	case InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBufferKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBuffer"
	case UnableToAllocateRequestedSafeBufferKind:
		return "UnableToAllocateRequestedSafeBuffer"
	case CouldNotFindPreactivationTypeKind:
		return "CouldNotFindPreactivationType"
	case TheModeExecTrapIsNotInitializedKind:
		return "TheModeExecTrapIsNotInitialized"
	case TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFullKind:
		return "TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFull"
	case NotAllCoresAreLockedForApplyingInstantEventKind:
		return "NotAllCoresAreLockedForApplyingInstantEvent"
	case TargetSwitchingCoreIsNotLockedKind:
		return "TargetSwitchingCoreIsNotLocked"
	case InvalidPhysicalAddressKind:
		return "InvalidPhysicalAddress"
	default:
		return "InvalidDebuggerErrorKind"
	}
}

func (k DebuggerErrorKind) Keys() []string {
	return []string{
		"TagNotExists",
		"InvalidActionType",
		"ActionBufferSizeIsZero",
		"EventTypeIsInvalid",
		"UnableToCreateEvent",
		"InvalidAddress",
		"InvalidCoreId",
		"ExceptionIndexExceedFirst32Entries",
		"InterruptIndexIsNotValid",
		"UnableToHideOrUnhideDebugger",
		"DebuggerAlreadyUhide",
		"EditMemoryStatusInvalidParameter",
		"EditMemoryStatusInvalidAddressBasedOnCurrentProcess",
		"EditMemoryStatusInvalidAddressBasedOnOtherProcess",
		"ModifyEventsInvalidTag",
		"ModifyEventsInvalidTypeOfAction",
		"SteppingInvalidParameter",
		"SteppingsEitherThreadNotFoundOrDisabled",
		"PreparingDebuggeeInvalidBaudrate",
		"PreparingDebuggeeInvalidSerialPort",
		"PreparingDebuggeeInvalidCoreInRemoteDebugge",
		"PreparingDebuggeeUnableToSwitchToNewProcess",
		"PreparingDebuggeeToRunScript",
		"InvalidRegisterNumber",
		"MaximumBreakpointWithoutContinue",
		"BreakpointAlreadyExistsOnTheAddress",
		"BreakpointIdNotFound",
		"BreakpointAlreadyDisabled",
		"BreakpointAlreadyEnabled",
		"MemoryTypeInvalid",
		"InvalidProcessId",
		"EventIsNotApplied",
		"DetailsOrSwitchProcessInvalidParameter",
		"DetailsOrSwitchThreadInvalidParameter",
		"MaximumBreakpointForASinglePageIsHit",
		"PreAllocatedBufferIsEmpty",
		"EptCouldNotSplitTheLargePageTo4KbPages",
		"EptFailedToGetPml1EntryOfTargetAddress",
		"EptMultipleHooksInASinglePage",
		"CouldNotBuildTheEptHook",
		"CouldNotFindAllocationType",
		"InvalidTestQueryIndex",
		"UnableToAttachToTargetUserModeProcess",
		"UnableToRemoveHooksEntrypointNotReached",
		"UnableToRemoveHooks",
		"FunctionsForInitializingPebAddressesAreNotInitialized",
		"UnableToDetect32BitOr64BitProcess",
		"UnableToKillTheProcess",
		"InvalidThreadDebuggingToken",
		"UnableToPauseTheProcessThreads",
		"UnableToAttachToAnAlreadyAttachedProcess",
		"TheUserDebuggerNotAttachedToTheProcess",
		"UnableToDetachAsThereArePausedThreads",
		"UnableToSwitchProcessIdOrThreadIdIsInvalid",
		"UnableToSwitchThereIsNoThreadOnTheProcess",
		"UnableToGetModulesOfTheProcess",
		"UnableToGetCallstack",
		"UnableToQueryCountOfProcessesOrThreads",
		"UsingShortCircuitingEventWithPostEventModeIsForbiddedn",
		"UnknownTestQueryReceived",
		"ReadingMemoryInvalidParameter",
		"TheTrapFlagListIsFull",
		"UnableToKillTheProcessDoesNotExists",
		"ModeExecutionIsInvalid",
		"ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootMode",
		"InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionals",
		"InstantEventRegularPreallocatedBufferNotFound",
		"InstantEventBigPreallocatedBufferNotFound",
		"UnableToCreateActionCannotAllocateBuffer",
		"InstantEventActionRegularPreallocatedBufferNotFound",
		"InstantEventActionBigPreallocatedBufferNotFound",
		"InstantEventPreallocatedBufferIsNotEnoughForActionBuffer",
		"InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStack",
		"InstantEventRegularRequestedSafeBufferNotFound",
		"InstantEventBigRequestedSafeBufferNotFound",
		"InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBuffer",
		"UnableToAllocateRequestedSafeBuffer",
		"CouldNotFindPreactivationType",
		"TheModeExecTrapIsNotInitialized",
		"TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFull",
		"NotAllCoresAreLockedForApplyingInstantEvent",
		"TargetSwitchingCoreIsNotLocked",
		"InvalidPhysicalAddress",
		"InvalidDebuggerErrorKind",
	}
}

func (k DebuggerErrorKind) Kinds() []DebuggerErrorKind {
	return []DebuggerErrorKind{
		TagNotExistsKind,
		InvalidActionTypeKind,
		ActionBufferSizeIsZeroKind,
		EventTypeIsInvalidKind,
		UnableToCreateEventKind,
		InvalidAddressKind,
		InvalidCoreIdKind,
		ExceptionIndexExceedFirst32EntriesKind,
		InterruptIndexIsNotValidKind,
		UnableToHideOrUnhideDebuggerKind,
		DebuggerAlreadyUhideKind,
		EditMemoryStatusInvalidParameterKind,
		EditMemoryStatusInvalidAddressBasedOnCurrentProcessKind,
		EditMemoryStatusInvalidAddressBasedOnOtherProcessKind,
		ModifyEventsInvalidTagKind,
		ModifyEventsInvalidTypeOfActionKind,
		SteppingInvalidParameterKind,
		SteppingsEitherThreadNotFoundOrDisabledKind,
		PreparingDebuggeeInvalidBaudrateKind,
		PreparingDebuggeeInvalidSerialPortKind,
		PreparingDebuggeeInvalidCoreInRemoteDebuggeKind,
		PreparingDebuggeeUnableToSwitchToNewProcessKind,
		PreparingDebuggeeToRunScriptKind,
		InvalidRegisterNumberKind,
		MaximumBreakpointWithoutContinueKind,
		BreakpointAlreadyExistsOnTheAddressKind,
		BreakpointIdNotFoundKind,
		BreakpointAlreadyDisabledKind,
		BreakpointAlreadyEnabledKind,
		MemoryTypeInvalidKind,
		InvalidProcessIdKind,
		EventIsNotAppliedKind,
		DetailsOrSwitchProcessInvalidParameterKind,
		DetailsOrSwitchThreadInvalidParameterKind,
		MaximumBreakpointForASinglePageIsHitKind,
		PreAllocatedBufferIsEmptyKind,
		EptCouldNotSplitTheLargePageTo4KbPagesKind,
		EptFailedToGetPml1EntryOfTargetAddressKind,
		EptMultipleHooksInASinglePageKind,
		CouldNotBuildTheEptHookKind,
		CouldNotFindAllocationTypeKind,
		InvalidTestQueryIndexKind,
		UnableToAttachToTargetUserModeProcessKind,
		UnableToRemoveHooksEntrypointNotReachedKind,
		UnableToRemoveHooksKind,
		FunctionsForInitializingPebAddressesAreNotInitializedKind,
		UnableToDetect32BitOr64BitProcessKind,
		UnableToKillTheProcessKind,
		InvalidThreadDebuggingTokenKind,
		UnableToPauseTheProcessThreadsKind,
		UnableToAttachToAnAlreadyAttachedProcessKind,
		TheUserDebuggerNotAttachedToTheProcessKind,
		UnableToDetachAsThereArePausedThreadsKind,
		UnableToSwitchProcessIdOrThreadIdIsInvalidKind,
		UnableToSwitchThereIsNoThreadOnTheProcessKind,
		UnableToGetModulesOfTheProcessKind,
		UnableToGetCallstackKind,
		UnableToQueryCountOfProcessesOrThreadsKind,
		UsingShortCircuitingEventWithPostEventModeIsForbiddednKind,
		UnknownTestQueryReceivedKind,
		ReadingMemoryInvalidParameterKind,
		TheTrapFlagListIsFullKind,
		UnableToKillTheProcessDoesNotExistsKind,
		ModeExecutionIsInvalidKind,
		ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootModeKind,
		InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionalsKind,
		InstantEventRegularPreallocatedBufferNotFoundKind,
		InstantEventBigPreallocatedBufferNotFoundKind,
		UnableToCreateActionCannotAllocateBufferKind,
		InstantEventActionRegularPreallocatedBufferNotFoundKind,
		InstantEventActionBigPreallocatedBufferNotFoundKind,
		InstantEventPreallocatedBufferIsNotEnoughForActionBufferKind,
		InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStackKind,
		InstantEventRegularRequestedSafeBufferNotFoundKind,
		InstantEventBigRequestedSafeBufferNotFoundKind,
		InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBufferKind,
		UnableToAllocateRequestedSafeBufferKind,
		CouldNotFindPreactivationTypeKind,
		TheModeExecTrapIsNotInitializedKind,
		TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFullKind,
		NotAllCoresAreLockedForApplyingInstantEventKind,
		TargetSwitchingCoreIsNotLockedKind,
		InvalidPhysicalAddressKind,
		InvalidDebuggerErrorKind,
	}
}

func (k DebuggerErrorKind) SvgFileName() string {
	switch k {
	case TagNotExistsKind:
		return "TagNotExists"
	case InvalidActionTypeKind:
		return "InvalidActionType"
	case ActionBufferSizeIsZeroKind:
		return "ActionBufferSizeIsZero"
	case EventTypeIsInvalidKind:
		return "EventTypeIsInvalid"
	case UnableToCreateEventKind:
		return "UnableToCreateEvent"
	case InvalidAddressKind:
		return "InvalidAddress"
	case InvalidCoreIdKind:
		return "InvalidCoreId"
	case ExceptionIndexExceedFirst32EntriesKind:
		return "ExceptionIndexExceedFirst32Entries"
	case InterruptIndexIsNotValidKind:
		return "InterruptIndexIsNotValid"
	case UnableToHideOrUnhideDebuggerKind:
		return "UnableToHideOrUnhideDebugger"
	case DebuggerAlreadyUhideKind:
		return "DebuggerAlreadyUhide"
	case EditMemoryStatusInvalidParameterKind:
		return "EditMemoryStatusInvalidParameter"
	case EditMemoryStatusInvalidAddressBasedOnCurrentProcessKind:
		return "EditMemoryStatusInvalidAddressBasedOnCurrentProcess"
	case EditMemoryStatusInvalidAddressBasedOnOtherProcessKind:
		return "EditMemoryStatusInvalidAddressBasedOnOtherProcess"
	case ModifyEventsInvalidTagKind:
		return "ModifyEventsInvalidTag"
	case ModifyEventsInvalidTypeOfActionKind:
		return "ModifyEventsInvalidTypeOfAction"
	case SteppingInvalidParameterKind:
		return "SteppingInvalidParameter"
	case SteppingsEitherThreadNotFoundOrDisabledKind:
		return "SteppingsEitherThreadNotFoundOrDisabled"
	case PreparingDebuggeeInvalidBaudrateKind:
		return "PreparingDebuggeeInvalidBaudrate"
	case PreparingDebuggeeInvalidSerialPortKind:
		return "PreparingDebuggeeInvalidSerialPort"
	case PreparingDebuggeeInvalidCoreInRemoteDebuggeKind:
		return "PreparingDebuggeeInvalidCoreInRemoteDebugge"
	case PreparingDebuggeeUnableToSwitchToNewProcessKind:
		return "PreparingDebuggeeUnableToSwitchToNewProcess"
	case PreparingDebuggeeToRunScriptKind:
		return "PreparingDebuggeeToRunScript"
	case InvalidRegisterNumberKind:
		return "InvalidRegisterNumber"
	case MaximumBreakpointWithoutContinueKind:
		return "MaximumBreakpointWithoutContinue"
	case BreakpointAlreadyExistsOnTheAddressKind:
		return "BreakpointAlreadyExistsOnTheAddress"
	case BreakpointIdNotFoundKind:
		return "BreakpointIdNotFound"
	case BreakpointAlreadyDisabledKind:
		return "BreakpointAlreadyDisabled"
	case BreakpointAlreadyEnabledKind:
		return "BreakpointAlreadyEnabled"
	case MemoryTypeInvalidKind:
		return "MemoryTypeInvalid"
	case InvalidProcessIdKind:
		return "InvalidProcessId"
	case EventIsNotAppliedKind:
		return "EventIsNotApplied"
	case DetailsOrSwitchProcessInvalidParameterKind:
		return "DetailsOrSwitchProcessInvalidParameter"
	case DetailsOrSwitchThreadInvalidParameterKind:
		return "DetailsOrSwitchThreadInvalidParameter"
	case MaximumBreakpointForASinglePageIsHitKind:
		return "MaximumBreakpointForASinglePageIsHit"
	case PreAllocatedBufferIsEmptyKind:
		return "PreAllocatedBufferIsEmpty"
	case EptCouldNotSplitTheLargePageTo4KbPagesKind:
		return "EptCouldNotSplitTheLargePageTo4KbPages"
	case EptFailedToGetPml1EntryOfTargetAddressKind:
		return "EptFailedToGetPml1EntryOfTargetAddress"
	case EptMultipleHooksInASinglePageKind:
		return "EptMultipleHooksInASinglePage"
	case CouldNotBuildTheEptHookKind:
		return "CouldNotBuildTheEptHook"
	case CouldNotFindAllocationTypeKind:
		return "CouldNotFindAllocationType"
	case InvalidTestQueryIndexKind:
		return "InvalidTestQueryIndex"
	case UnableToAttachToTargetUserModeProcessKind:
		return "UnableToAttachToTargetUserModeProcess"
	case UnableToRemoveHooksEntrypointNotReachedKind:
		return "UnableToRemoveHooksEntrypointNotReached"
	case UnableToRemoveHooksKind:
		return "UnableToRemoveHooks"
	case FunctionsForInitializingPebAddressesAreNotInitializedKind:
		return "FunctionsForInitializingPebAddressesAreNotInitialized"
	case UnableToDetect32BitOr64BitProcessKind:
		return "UnableToDetect32BitOr64BitProcess"
	case UnableToKillTheProcessKind:
		return "UnableToKillTheProcess"
	case InvalidThreadDebuggingTokenKind:
		return "InvalidThreadDebuggingToken"
	case UnableToPauseTheProcessThreadsKind:
		return "UnableToPauseTheProcessThreads"
	case UnableToAttachToAnAlreadyAttachedProcessKind:
		return "UnableToAttachToAnAlreadyAttachedProcess"
	case TheUserDebuggerNotAttachedToTheProcessKind:
		return "TheUserDebuggerNotAttachedToTheProcess"
	case UnableToDetachAsThereArePausedThreadsKind:
		return "UnableToDetachAsThereArePausedThreads"
	case UnableToSwitchProcessIdOrThreadIdIsInvalidKind:
		return "UnableToSwitchProcessIdOrThreadIdIsInvalid"
	case UnableToSwitchThereIsNoThreadOnTheProcessKind:
		return "UnableToSwitchThereIsNoThreadOnTheProcess"
	case UnableToGetModulesOfTheProcessKind:
		return "UnableToGetModulesOfTheProcess"
	case UnableToGetCallstackKind:
		return "UnableToGetCallstack"
	case UnableToQueryCountOfProcessesOrThreadsKind:
		return "UnableToQueryCountOfProcessesOrThreads"
	case UsingShortCircuitingEventWithPostEventModeIsForbiddednKind:
		return "UsingShortCircuitingEventWithPostEventModeIsForbiddedn"
	case UnknownTestQueryReceivedKind:
		return "UnknownTestQueryReceived"
	case ReadingMemoryInvalidParameterKind:
		return "ReadingMemoryInvalidParameter"
	case TheTrapFlagListIsFullKind:
		return "TheTrapFlagListIsFull"
	case UnableToKillTheProcessDoesNotExistsKind:
		return "UnableToKillTheProcessDoesNotExists"
	case ModeExecutionIsInvalidKind:
		return "ModeExecutionIsInvalid"
	case ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootModeKind:
		return "ProcessIdCannotBeSpecifiedWhileApplyingEventFromVmxRootMode"
	case InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionalsKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForEventAndConditionals"
	case InstantEventRegularPreallocatedBufferNotFoundKind:
		return "InstantEventRegularPreallocatedBufferNotFound"
	case InstantEventBigPreallocatedBufferNotFoundKind:
		return "InstantEventBigPreallocatedBufferNotFound"
	case UnableToCreateActionCannotAllocateBufferKind:
		return "UnableToCreateActionCannotAllocateBuffer"
	case InstantEventActionRegularPreallocatedBufferNotFoundKind:
		return "InstantEventActionRegularPreallocatedBufferNotFound"
	case InstantEventActionBigPreallocatedBufferNotFoundKind:
		return "InstantEventActionBigPreallocatedBufferNotFound"
	case InstantEventPreallocatedBufferIsNotEnoughForActionBufferKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForActionBuffer"
	case InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStackKind:
		return "InstantEventRequestedOptionalBufferIsBiggerThanDebuggersSendReceiveStack"
	case InstantEventRegularRequestedSafeBufferNotFoundKind:
		return "InstantEventRegularRequestedSafeBufferNotFound"
	case InstantEventBigRequestedSafeBufferNotFoundKind:
		return "InstantEventBigRequestedSafeBufferNotFound"
	case InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBufferKind:
		return "InstantEventPreallocatedBufferIsNotEnoughForRequestedSafeBuffer"
	case UnableToAllocateRequestedSafeBufferKind:
		return "UnableToAllocateRequestedSafeBuffer"
	case CouldNotFindPreactivationTypeKind:
		return "CouldNotFindPreactivationType"
	case TheModeExecTrapIsNotInitializedKind:
		return "TheModeExecTrapIsNotInitialized"
	case TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFullKind:
		return "TheTargetEventIsDisabledButCannotBeClearedPrirityBufferIsFull"
	case NotAllCoresAreLockedForApplyingInstantEventKind:
		return "NotAllCoresAreLockedForApplyingInstantEvent"
	case TargetSwitchingCoreIsNotLockedKind:
		return "TargetSwitchingCoreIsNotLocked"
	case InvalidPhysicalAddressKind:
		return "InvalidPhysicalAddress"
	default:
		return "InvalidDebuggerErrorKind"
	}
}
