package Headers

import "encoding/binary"

var SIZEOF_DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS = binary.Size(DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS{})

type (
	DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS struct {
		VirtualAddress uint64
		ProcessId      uint32

		Pml4eVirtualAddress uint64
		Pml4eValue          uint64

		PdpteVirtualAddress uint64
		PdpteValue          uint64

		PdeVirtualAddress uint64
		PdeValue          uint64

		PteVirtualAddress uint64
		PteValue          uint64

		KernelStatus uint32
	}
	PDEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS *DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS
)

var SIZEOF_DEBUGGER_VA2PA_AND_PA2VA_COMMANDS = binary.Size(DEBUGGER_VA2PA_AND_PA2VA_COMMANDS{})

type (
	DEBUGGER_VA2PA_AND_PA2VA_COMMANDS struct {
		VirtualAddress     uint64
		PhysicalAddress    uint64
		ProcessId          uint32
		IsVirtual2Physical bool
		KernelStatus       uint32
	}
	PDEBUGGER_VA2PA_AND_PA2VA_COMMANDS *DEBUGGER_VA2PA_AND_PA2VA_COMMANDS
)

// #define SIZEOF_DEBUGGER_DT_COMMAND_OPTIONS \
// sizeof(DEBUGGER_DT_COMMAND_OPTIONS)
type (
	DEBUGGER_DT_COMMAND_OPTIONS struct {
		TypeName             *byte
		SizeOfTypeName       uint64
		Address              uint64
		IsStruct             bool
		BufferAddress        PVOID
		TargetPid            uint32
		AdditionalParameters *byte
	}
	PDEBUGGER_DT_COMMAND_OPTIONS *DEBUGGER_DT_COMMAND_OPTIONS
)

type DEBUGGER_PREALLOC_COMMAND_TYPE byte

const (
	DEBUGGER_PREALLOC_COMMAND_TYPE_MONITOR DEBUGGER_PREALLOC_COMMAND_TYPE = iota
	DEBUGGER_PREALLOC_COMMAND_TYPE_THREAD_INTERCEPTION
)

var SIZEOF_DEBUGGER_PREALLOC_COMMAND = binary.Size(DEBUGGER_PREALLOC_COMMAND{})

type (
	DEBUGGER_PREALLOC_COMMAND struct {
		Type         DEBUGGER_PREALLOC_COMMAND_TYPE
		Count        uint64
		KernelStatus uint32
	}
	PDEBUGGER_PREALLOC_COMMAND *DEBUGGER_PREALLOC_COMMAND
)

// #define SIZEOF_DEBUGGER_READ_MEMORY sizeof(DEBUGGER_READ_MEMORY)
type DEBUGGER_READ_READING_TYPE byte

const (
	READ_FROM_KERNEL DEBUGGER_READ_READING_TYPE = iota
	READ_FROM_VMX_ROOT
)

type DEBUGGER_READ_MEMORY_TYPE byte

const (
	DEBUGGER_READ_PHYSICAL_ADDRESS DEBUGGER_READ_MEMORY_TYPE = iota
	DEBUGGER_READ_VIRTUAL_ADDRESS
)

type DEBUGGER_SHOW_MEMORY_STYLE byte

const (
	DEBUGGER_SHOW_MEMORY_STYLE_bad DEBUGGER_SHOW_MEMORY_STYLE = iota
	DEBUGGER_SHOW_COMMAND_DT                                  = 1
	DEBUGGER_SHOW_COMMAND_DISASSEMBLE64
	DEBUGGER_SHOW_COMMAND_DISASSEMBLE32
	DEBUGGER_SHOW_COMMAND_DB
	DEBUGGER_SHOW_COMMAND_DC
	DEBUGGER_SHOW_COMMAND_DQ
	DEBUGGER_SHOW_COMMAND_DD
)

type (
	DEBUGGER_READ_MEMORY struct {
		Pid          uint32 // Read from cr3 of what process
		Address      uint64
		Size         uint32
		MemoryType   DEBUGGER_READ_MEMORY_TYPE
		ReadingType  DEBUGGER_READ_READING_TYPE
		DtDetails    PDEBUGGER_DT_COMMAND_OPTIONS
		Style        DEBUGGER_SHOW_MEMORY_STYLE // not used in local debugging
		ReturnLength uint32                     // not used in local debugging
		KernelStatus uint32                     // not used in local debugging

	}
	PDEBUGGER_READ_MEMORY *DEBUGGER_READ_MEMORY
)

var SIZEOF_DEBUGGER_FLUSH_LOGGING_BUFFERS = binary.Size(DEBUGGER_FLUSH_LOGGING_BUFFERS{})

type (
	DEBUGGER_FLUSH_LOGGING_BUFFERS struct {
		KernelStatus                               uint32
		CountOfMessagesThatSetAsReadFromVmxRoot    uint32
		CountOfMessagesThatSetAsReadFromVmxNonRoot uint32
	}
	PDEBUGGER_FLUSH_LOGGING_BUFFERS *DEBUGGER_FLUSH_LOGGING_BUFFERS
)

// #define SIZEOF_DEBUGGER_TEST_QUERY_BUFFER \
// sizeof(DEBUGGER_TEST_QUERY_BUFFER)
type (
	DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER struct {
		RequestIndex uint32
		KernelStatus uint32
	}
	PDEBUGGER_DEBUGGER_TEST_QUERY_BUFFER *DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER
)

var SIZEOF_DEBUGGER_PERFORM_KERNEL_TESTS = binary.Size(DEBUGGER_PERFORM_KERNEL_TESTS{})

type (
	DEBUGGER_PERFORM_KERNEL_TESTS struct {
		KernelStatus uint32
	}
	PDEBUGGER_PERFORM_KERNEL_TESTS *DEBUGGER_PERFORM_KERNEL_TESTS
)

var SIZEOF_DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL = binary.Size(DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL{})

type (
	DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL struct {
		KernelStatus uint32
	}
	PDEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL *DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL
)

var SIZEOF_DEBUGGEE_KERNEL_AND_USER_TEST_INFORMATION = binary.Size(DEBUGGEE_KERNEL_AND_USER_TEST_INFORMATION{})

type (
	DEBUGGEE_KERNEL_AND_USER_TEST_INFORMATION struct {
		Value uint64
		Tag   [32]byte
	}
	PDEBUGGEE_KERNEL_AND_USER_TEST_INFORMATION *DEBUGGEE_KERNEL_AND_USER_TEST_INFORMATION
)

// #define SIZEOF_DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER \
// sizeof(DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER)
type (
	DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER struct {
		RequestedAction       DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION
		LengthOfBuffer        uint32
		PauseDebuggeeWhenSent bool
		KernelResult          uint32
		// The buffer for the general packet is here
	}
	PDEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER *DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER
)

// #define SIZEOF_DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER \
// sizeof(DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER)
type (
	DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER struct {
		KernelStatus uint32
		Length       uint32
		// Here is the messages
	}
	PDEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER *DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER
)

// #define SIZEOF_DEBUGGER_READ_AND_WRITE_ON_MSR \
// sizeof(DEBUGGER_READ_AND_WRITE_ON_MSR)
type DEBUGGER_MSR_ACTION_TYPE byte

const (
	DEBUGGER_MSR_READ DEBUGGER_MSR_ACTION_TYPE = iota
	DEBUGGER_MSR_WRITE
)

type (
	DEBUGGER_READ_AND_WRITE_ON_MSR struct {
		Msr        uint64 // It's actually a 32-Bit value but let's not mess with a register
		CoreNumber uint32 // specifies the core to execute wrmsr or read the msr
		// (DEBUGGER_READ_AND_WRITE_ON_MSR_APPLY_ALL_CORES mean all
		// the cores)
		ActionType DEBUGGER_MSR_ACTION_TYPE // Detects whether user needs wrmsr or rdmsr
		Value      uint64
	}
	PDEBUGGER_READ_AND_WRITE_ON_MSR *DEBUGGER_READ_AND_WRITE_ON_MSR
)

// #define SIZEOF_DEBUGGER_EDIT_MEMORY sizeof(DEBUGGER_EDIT_MEMORY)
type DEBUGGER_EDIT_MEMORY_TYPE byte

const (
	EDIT_PHYSICAL_MEMORYDEBUGGER_EDIT_MEMORY_TYPE = iota
	EDIT_VIRTUAL_MEMORY
)

type DEBUGGER_EDIT_MEMORY_BYTE_SIZE byte

const (
	EDIT_BYTE DEBUGGER_EDIT_MEMORY_BYTE_SIZE = iota
	EDIT_DWORD
	EDIT_QWORD
)

type (
	DEBUGGER_EDIT_MEMORY struct {
		Result             uint32                         // Result from kernel
		Address            uint64                         // Target adddress to modify
		ProcessId          uint32                         // specifies the process id
		MemoryType         DEBUGGER_EDIT_MEMORY_TYPE      // Type of memory
		ByteSize           DEBUGGER_EDIT_MEMORY_BYTE_SIZE // Modification size
		CountOf64Chunks    uint32
		FinalStructureSize uint32
		KernelStatus       uint32 // not used in local debugging
	}
	PDEBUGGER_EDIT_MEMORY *DEBUGGER_EDIT_MEMORY
)

// #define SIZEOF_DEBUGGER_SEARCH_MEMORY sizeof(DEBUGGER_SEARCH_MEMORY)
type DEBUGGER_SEARCH_MEMORY_TYPE byte

const (
	SEARCH_PHYSICAL_MEMORY DEBUGGER_SEARCH_MEMORY_TYPE = iota
	SEARCH_VIRTUAL_MEMORY
	SEARCH_PHYSICAL_FROM_VIRTUAL_MEMORY
)

type DEBUGGER_SEARCH_MEMORY_BYTE_SIZE byte

const (
	SEARCH_BYTE DEBUGGER_SEARCH_MEMORY_BYTE_SIZE = iota
	SEARCH_DWORD
	SEARCH_QWORD
)

type (
	DEBUGGER_SEARCH_MEMORY struct {
		Address            uint64                           // Target adddress to start searching
		Length             uint64                           // Length of bytes to search
		ProcessId          uint32                           // specifies the process id
		MemoryType         DEBUGGER_SEARCH_MEMORY_TYPE      // Type of memory
		ByteSize           DEBUGGER_SEARCH_MEMORY_BYTE_SIZE // Modification size
		CountOf64Chunks    uint32
		FinalStructureSize uint32
	}
	PDEBUGGER_SEARCH_MEMORY *DEBUGGER_SEARCH_MEMORY
)

// #define SIZEOF_DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE \
// sizeof(DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE)
type (
	DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE struct {
		IsHide bool

		CpuidAverage           uint64
		CpuidStandardDeviation uint64
		CpuidMedian            uint64

		RdtscAverage           uint64
		RdtscStandardDeviation uint64
		RdtscMedian            uint64

		TrueIfProcessIdAndFalseIfProcessName bool
		ProcId                               uint32
		LengthOfProcessName                  uint32 // in the case of !hide name xxx, this parameter
		// shows the length of xxx

		KernelStatus uint64 /* DEBUGGER_OPERATION_WAS_SUCCESSFUL ,
		   DEBUGGER_ERROR_UNABLE_TO_HIDE_OR_UNHIDE_DEBUGGER
		*/
	}
	PDEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE *DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE
)

// #define SIZEOF_DEBUGGER_PREPARE_DEBUGGEE sizeof(DEBUGGER_PREPARE_DEBUGGEE)
type (
	DEBUGGER_PREPARE_DEBUGGEE struct {
		PortAddress         uint32
		Baudrate            uint32
		NtoskrnlBaseAddress uint64
		Result              uint32 // Result from the kernel
		//OsName[MAXIMUM_CHARACTER_FOR_OS_NAME]int8 //todo
	}
	PDEBUGGER_PREPARE_DEBUGGEE *DEBUGGER_PREPARE_DEBUGGEE
)
type (
	DEBUGGEE_CHANGE_CORE_PACKET struct {
		NewCore uint32
		Result  uint32
	}
	PDEBUGGEE_CHANGE_CORE_PACKET *DEBUGGEE_CHANGE_CORE_PACKET
)

// #define SIZEOF_DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS \
// sizeof(DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS)
type DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE byte

const (
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_ATTACH DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE = iota
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_DETACH
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_REMOVE_HOOKS
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_KILL_PROCESS
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_PAUSE_PROCESS
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_SWITCH_BY_PROCESS_OR_THREAD
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_QUERY_COUNT_OF_ACTIVE_DEBUGGING_THREADS
)

type (
	DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS struct {
		IsStartingNewProcess                      bool
		ProcessId                                 uint32
		ThreadId                                  uint32
		Is32Bit                                   bool
		IsPaused                                  bool // used in switching to threads
		Action                                    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE
		CountOfActiveDebuggingThreadsAndProcesses uint32 // used in showing the list of active threads/processes
		Token                                     uint64
		Result                                    uint64
	}
	PDEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS *DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS
)

// #define SIZEOF_DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS \
// sizeof(DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS)
type DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES byte

const (
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES_bad DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES = iota
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_COUNT
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_COUNT
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_LIST
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_LIST
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_PROCESS
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_THREAD
)

type DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS byte

const (
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS_bad DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS = iota
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_SHOW_INSTANTLY
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_COUNT
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_SAVE_DETAILS
)

type (
	DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS struct {
		PsActiveProcessHead      uint64 // nt!PsActiveProcessHead
		ImageFileNameOffset      uint32 // nt!_EPROCESS.ImageFileName
		UniquePidOffset          uint32 // nt!_EPROCESS.UniqueProcessId
		ActiveProcessLinksOffset uint32 // nt!_EPROCESS.ActiveProcessLinks
	}
	PDEBUGGEE_PROCESS_LIST_NEEDED_DETAILS *DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS
)
type (
	DEBUGGEE_THREAD_LIST_NEEDED_DETAILS struct {
		ThreadListHeadOffset     uint32 // nt!_EPROCESS.ThreadListHead
		ThreadListEntryOffset    uint32 // nt!_ETHREAD.ThreadListEntry
		CidOffset                uint32 // nt!_ETHREAD.Cid
		PsActiveProcessHead      uint64 // nt!PsActiveProcessHead
		ActiveProcessLinksOffset uint32 // nt!_EPROCESS.ActiveProcessLinks
		Process                  uint64
	}
	PDEBUGGEE_THREAD_LIST_NEEDED_DETAILS *DEBUGGEE_THREAD_LIST_NEEDED_DETAILS
)
type (
	DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY struct {
		Eprocess      uint64
		Pid           uint32
		Cr3           uint64
		ImageFileName [15 + 1]byte
	}
	PDEBUGGEE_PROCESS_LIST_DETAILS_ENTRY *DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY
)
type (
	DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS struct {
		ProcessListNeededDetails DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS
		ThreadListNeededDetails  DEBUGGEE_THREAD_LIST_NEEDED_DETAILS
		QueryType                DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES
		QueryAction              DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS
		Count                    uint32
		Result                   uint64
	}
	PDEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS *DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS
)

type (
	DEBUGGER_SINGLE_CALLSTACK_FRAME struct {
		IsStackAddressValid bool
		IsValidAddress      bool
		IsExecutable        bool
		Value               uint64
		//InstructionBytesOnRip[MAXIMUM_CALL_INSTR_SIZE]byte //todo
	}
	PDEBUGGER_SINGLE_CALLSTACK_FRAME *DEBUGGER_SINGLE_CALLSTACK_FRAME
)

var SIZEOF_DEBUGGER_CALLSTACK_REQUEST = binary.Size(DEBUGGER_CALLSTACK_REQUEST{})

type DEBUGGER_CALLSTACK_DISPLAY_METHOD byte

const (
	DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITHOUT_PARAMS DEBUGGER_CALLSTACK_DISPLAY_METHOD = iota
	DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITH_PARAMS
)

type (
	DEBUGGER_CALLSTACK_REQUEST struct {
		Is32Bit       bool
		KernelStatus  uint32
		DisplayMethod DEBUGGER_CALLSTACK_DISPLAY_METHOD
		Size          uint32
		FrameCount    uint32
		BaseAddress   uint64
		BufferSize    uint64
		// Here is the size of stack frames
	}
	PDEBUGGER_CALLSTACK_REQUEST *DEBUGGER_CALLSTACK_REQUEST
)

// #define SIZEOF_USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS \
// sizeof(USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS)
type (
	USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS struct {
		ProcessId uint32
		ThreadId  uint32
		IsProcess bool
	}
	PUSERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS *USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS
)
type (
	DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION struct {
		ScriptBuffer                uint64
		ScriptLength                uint32
		ScriptPointer               uint32
		OptionalRequestedBufferSize uint32
	}
	PDEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION *DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION
)
type (
	DEBUGGER_EVENT_REQUEST_BUFFER struct {
		EnabledRequestBuffer bool
		RequestBufferSize    uint32
		RequstBufferAddress  uint64
	}
	PDEBUGGER_EVENT_REQUEST_BUFFER *DEBUGGER_EVENT_REQUEST_BUFFER
)
type (
	DEBUGGER_EVENT_REQUEST_CUSTOM_CODE struct {
		CustomCodeBufferSize        uint32
		CustomCodeBufferAddress     PVOID
		OptionalRequestedBufferSize uint32
	}
	PDEBUGGER_EVENT_REQUEST_CUSTOM_CODE *DEBUGGER_EVENT_REQUEST_CUSTOM_CODE
)
type DEBUGGER_UD_COMMAND_ACTION_TYPE byte

const (
	DEBUGGER_UD_COMMAND_ACTION_TYPE_NONE DEBUGGER_UD_COMMAND_ACTION_TYPE = iota
	DEBUGGER_UD_COMMAND_ACTION_TYPE_PAUSE
	DEBUGGER_UD_COMMAND_ACTION_TYPE_CONTINUE
	DEBUGGER_UD_COMMAND_ACTION_TYPE_REGULAR_STEP
)

type (
	DEBUGGER_UD_COMMAND_ACTION struct {
		ActionType     DEBUGGER_UD_COMMAND_ACTION_TYPE
		OptionalParam1 uint64
		OptionalParam2 uint64
		OptionalParam3 uint64
		OptionalParam4 uint64
	}
	PDEBUGGER_UD_COMMAND_ACTION *DEBUGGER_UD_COMMAND_ACTION
)

type (
	DEBUGGER_UD_COMMAND_PACKET struct {
		UdAction                    DEBUGGER_UD_COMMAND_ACTION
		ProcessDebuggingDetailToken uint64
		TargetThreadId              uint32
		ApplyToAllPausedThreads     bool
		Result                      uint32
	}
	PDEBUGGER_UD_COMMAND_PACKET *DEBUGGER_UD_COMMAND_PACKET
)
type DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE byte

const (
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_DETAILS DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE = iota
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_LIST
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PERFORM_SWITCH
)

type (
	DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET struct {
		ActionType            DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE
		ProcessId             uint32
		Process               uint64
		IsSwitchByClkIntr     bool
		ProcessName           [16]byte
		ProcessListSymDetails DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS
		Result                uint32
	}
	PDEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET *DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET
)

var SIZEOF_DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET = binary.Size(DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET{})

type DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE byte

const (
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PERFORM_SWITCH DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE = iota
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_DETAILS
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_LIST
)

type (
	DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET struct {
		ActionType            DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE
		ThreadId              uint32
		ProcessId             uint32
		Thread                uint64
		Process               uint64
		CheckByClockInterrupt bool
		ProcessName           [16]byte
		ThreadListSymDetails  DEBUGGEE_THREAD_LIST_NEEDED_DETAILS
		Result                uint32
	}
	PDEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET *DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET
)

// #define SIZEOF_DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET \
// sizeof(DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET)
type DEBUGGER_REMOTE_STEPPING_REQUEST byte

const (
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER DEBUGGER_REMOTE_STEPPING_REQUEST = iota
	DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_IN
	DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN
)

type (
	DEBUGGEE_STEP_PACKET struct {
		StepType DEBUGGER_REMOTE_STEPPING_REQUEST
		// Only in the case of call instructions
		// the 'p' command
		IsCurrentInstructionACall bool
		CallLength                uint32
	}
	PDEBUGGEE_STEP_PACKET *DEBUGGEE_STEP_PACKET
)
type (
	DEBUGGEE_FORMATS_PACKET struct {
		Value  uint64
		Result uint32
	}
	PDEBUGGEE_FORMATS_PACKET *DEBUGGEE_FORMATS_PACKET
)

type (
	DEBUGGEE_SYMBOL_REQUEST_PACKET struct {
		ProcessId uint32
	}
	PDEBUGGEE_SYMBOL_REQUEST_PACKET *DEBUGGEE_SYMBOL_REQUEST_PACKET
)

type (
	DEBUGGEE_BP_PACKET struct {
		Address uint64
		Pid     uint32
		Tid     uint32
		Core    uint32
		Result  uint32
	}
	PDEBUGGEE_BP_PACKET *DEBUGGEE_BP_PACKET
)

type (
	DEBUGGEE_BP_DESCRIPTOR struct {
		BreakpointId uint64
		//BreakpointsList LIST_ENTRY //todo can use list.list ?
		Enabled                bool
		Address                uint64
		PhysAddress            uint64
		Pid                    uint32
		Tid                    uint32
		Core                   uint32
		InstructionLength      uint16
		PreviousByte           byte
		SetRflagsIFBitOnMtf    bool
		AvoidReApplyBreakpoint bool
	}
	PDEBUGGEE_BP_DESCRIPTOR *DEBUGGEE_BP_DESCRIPTOR
)
type DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST byte

const (
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_LIST_BREAKPOINTS DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST = iota
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_ENABLE
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_DISABLE
	DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_CLEAR
)

type (
	DEBUGGEE_BP_LIST_OR_MODIFY_PACKET struct {
		BreakpointId uint64
		Request      DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST
		Result       uint32
	}
	PDEBUGGEE_BP_LIST_OR_MODIFY_PACKET *DEBUGGEE_BP_LIST_OR_MODIFY_PACKET
)

type DEBUGGER_CONDITIONAL_JUMP_STATUS byte

const (
	DEBUGGER_CONDITIONAL_JUMP_STATUS_ERROR DEBUGGER_CONDITIONAL_JUMP_STATUS = iota
	DEBUGGER_CONDITIONAL_JUMP_STATUS_NOT_CONDITIONAL_JUMP
	DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_TAKEN
	DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_NOT_TAKEN
)

type (
	DEBUGGEE_SCRIPT_PACKET struct {
		ScriptBufferSize    uint32
		ScriptBufferPointer uint32
		IsFormat            bool
		Result              uint32
		// The script buffer is here
	}
	PDEBUGGEE_SCRIPT_PACKET *DEBUGGEE_SCRIPT_PACKET
)

type (
	DEBUGGEE_RESULT_OF_SEARCH_PACKET struct {
		CountOfResults uint32
		Result         uint32
	}
	PDEBUGGEE_RESULT_OF_SEARCH_PACKET *DEBUGGEE_RESULT_OF_SEARCH_PACKET
)

type (
	DEBUGGEE_REGISTER_READ_DESCRIPTION struct {
		RegisterID   uint32 // the number is from REGS_ENUM
		Value        uint64
		KernelStatus uint32
	}
	PDEBUGGEE_REGISTER_READ_DESCRIPTION *DEBUGGEE_REGISTER_READ_DESCRIPTION
)
